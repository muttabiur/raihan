<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN""http://www.w3.org/TR/REC-html40/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc on Tue Nov 07 19:59:06 IST 2006 -->
<TITLE>
LogWriter (AdventNet)
</TITLE>
<LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../stylesheet.css" TITLE="Style">
</HEAD>
<SCRIPT>
function asd()
{
parent.document.title="LogWriter (AdventNet)";
}
</SCRIPT>
<BODY BGCOLOR="white" onload="asd();">

<!-- ========== START OF NAVBAR ========== -->
<A NAME="navbar_top"><!-- --></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0">
<TR>
<TD COLSPAN=3 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../../com/adventnet/afp/log/Logger.html"><B>PREV CLASS</B></A>&nbsp;
&nbsp;NEXT CLASS</FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../index.html" TARGET="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="LogWriter.html" TARGET="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;
<SCRIPT>
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
<A HREF="../../../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>
</NOSCRIPT>
</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;CONSTR&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;CONSTR&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<!-- =========== END OF NAVBAR =========== -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
<FONT SIZE="-1">
com.adventnet.afp.log</FONT>
<BR>
Interface  LogWriter</H2>
<DL>
<DT><B>All Known Implementing Classes:</B> <DD><A HREF="../../../../com/adventnet/afp/log/AbstractLogWriter.html">AbstractLogWriter</A></DD>
</DL>
<HR>
<DL>
<DT>public interface <B>LogWriter</B></DL>

<P>
<p>The LogWriter takes care of deciding where to
 log the messages - the storage destination. It redirects all
 the log out and log error messages to the storage destination specified
 in the configuration details. The destination
 <br>can be a file, console, database, socket etc.,
 <p>If your storage destination is a file, then you can use the default
 implementation FileLogWriter available in this framework. In case, you
 desire to direct the log messages to some other destination, you can do
 so by giving your own implementation
 <br>for the interface LogWriter.
 <p>Various properties of the LogWriter namely ClassName and Custom properties
 like MaxLineCount, ArchiveStatus, MaxFileCount etc., can be modified at
 runtime.
 
 
 &nbsp;
 <p></p><p></p>
 <table BORDER=0 COLS=1 WIDTH="100%" BGCOLOR="#CBCBFF" >
 <tr>
 <td><b><font size=+2>Writing Your Own LogWriter</font></b></td>
 </tr>
 </table>
 <p></p><p></p>
 <table BORDER=0 COLS=1 WIDTH="100%" BGCOLOR="#CBCBFF" >
 <tr>
 <td><b>Reference Implementation</b></td>
 </tr>
 </table>
 
 <p>To explain you how you can write your own Logwriter, we provide below
 an example which explains how implementation can be given for directing
 the messages to the DataBase. In this implementation, the log messages
 are inserted to tables. Keeping
 <br>this implementation as a reference, you can write your own LogWriter,
 by implementing the interface LogWriter or extending the abstract class
 AbstractLogWriter.
 <p>For ease of reference, detailed explanation has been provided alongside
 the code snippet itself.
 <br>&nbsp;
 <table BORDER COLS=1 WIDTH="100%" >
 <tr>
 <td>package com.adventnet.afp.log;
 <br>//Product imports
 <br>import com.adventnet.afp.log.*;
 <br>import java.io.*;
 <br>import java.sql.*;
 <br>import java.util.*;
 <br>&nbsp;
 <p>// <font color="#009900">This class implements the interface LogWriter.
 This class will move all the log messages into the database. The configuraton
 details are given in the file logging.xml which can be read through LogConfigReader.
 In the DataBase, the log messages will be moved to their respective Tables
 bearing the names serverout, servererr etc.,</font>
 <br>&nbsp;
 <p>//&nbsp; <font color="#009900">The following tag is added in the file
 logging.xml. This is for getting information about the database (i.e. Writer).
 The information about database is required to get connection to the database
 and to log the messages&nbsp; into the database. The InstanceName of this
 DataBaseWriter is given as "SERVEROUT". The Loggers associated with this
 DatabaseWriter should also have the same "SERVEROUT" as the WriterInstanceName
 in order to log the messages into the database.</font>
 <br>&nbsp;
 <p>&nbsp;&nbsp;&nbsp; &lt;LOG_WRITER>&nbsp;
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ClassName>com.adventnet.afp.log.DatabaseWriter&lt;/ClassName>
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;InstanceName>SERVEROUT&lt;/InstanceName>
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;PROPERTIES>
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &lt;PROPERTY>
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &lt;Key>TableName&lt;/Key>
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &lt;Value>serverout&lt;/Value>
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &lt;/PROPERTY>
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &lt;PROPERTY>
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &lt;Key>URL&lt;/Key>
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &lt;Value>jdbc:mysql://localhost/WebNmsDB&lt;/Value>
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &lt;/PROPERTY>
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &lt;PROPERTY>
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &lt;Key>DriverName&lt;/Key>
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &lt;Value>org.gjt.mm.mysql.Driver&lt;/Value>
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &lt;/PROPERTY>
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &lt;PROPERTY>
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &lt;Key>UserName&lt;/Key>
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &lt;Value>root&lt;/Value>
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &lt;/PROPERTY>
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &lt;PROPERTY>
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &lt;Key>Password&lt;/Key>
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &lt;Value>public&lt;/Value>
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &lt;/PROPERTY>
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/PROPERTIES>&nbsp;
 <br>&nbsp;&nbsp;&nbsp; &lt;LOG_WRITER>
 <br>
 <p>public class DatabaseWriter extends AbstractLogWriter
 <br>{
 <br>&nbsp;&nbsp;&nbsp; Statement stmt=null;
 <br>&nbsp;&nbsp;&nbsp; PreparedStatement prst=null;
 <br>&nbsp;&nbsp;&nbsp; private String url=null;
 <br>&nbsp;&nbsp;&nbsp; private String driverName=null;
 <br>&nbsp;&nbsp;&nbsp; private String pass=null;
 <br>&nbsp;&nbsp;&nbsp; private String user=null;
 <br>&nbsp;&nbsp;&nbsp; private Connection conn=null;
 <br>&nbsp;&nbsp;&nbsp; private String logWriterInstanceName=null;
 <br>&nbsp;&nbsp;&nbsp; private String tableName=null;
 <br>&nbsp;
 <p>// <font color="#009900">To get the properties from the class LogWriterProperties
 and to set all the properties.</font>
 <br>&nbsp;&nbsp;&nbsp; public void init(LogWriterProperties prop)
 <p>&nbsp;&nbsp;&nbsp; {
 <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String str = null;
 <p>//<font color="#009900">To get the custom properties from the LogWriterProperties.</font>
 <br>//<font color="#009900">To get the table name for the Log Writer (where
 the log messages are to be written in the database).</font>
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if((str = prop.getCustomProperty("TableName"))
 != null)
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 this.tableName = str;
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 <p>//<font color="#009900">To get the Log Writer Instance from the LogWriterProperties.</font>
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if((str = prop.getInstanceName())
 != null)
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 this.logWriterInstanceName = str;
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 <p>// <font color="#009900">DataBase properties like URL, Driver name,
 password and user name are given in the file logging.xml. In order to get
 DataBase connection, get those properties&nbsp;</font>
 <br>// <font color="#009900">To get the URL properties .</font>
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if((str = prop.getCustomProperty("URL"))
 != null)
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 this.url = str;
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //To get the Driver name
 properties.
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if((str = prop.getCustomProperty("DriverName"))
 != null)
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 this.driverName = str;
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 <p>//<font color="#009900">To get the Password for connecting to the database.</font>
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if((str = prop.getCustomProperty("Password"))
 != null)
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 this.pass = str;
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 <p>&nbsp;//<font color="#009900">To get the User name for connecting to
 the database.</font>
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if((str = prop.getCustomProperty("UserName"))
 != null)
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.user
 = str;
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 Class.forName(driverName);
 <p>//<font color="#009900">To get the connection to the database using
 the database properties like user name, URL and password</font>
 <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; conn=DriverManager.getConnection(url,user,pass);
 <br>&nbsp;
 <p>/<font color="#009900">/To create the table with the corresponding table
 names.</font>
 <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String createString="create
 table "+tableName+" ( message varchar (250))";
 <p>//<font color="#009900">To insert the log messages into the respective
 table name.</font>
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String
 insertString="insert into "+tableName+" values(?)";
 <p>//<font color="#009900">To create the statement object for sending SQL
 statements into the DataBase.</font>
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; stmt=conn.createStatement();
 <p>//<font color="#009900">To execute a SQL string</font>
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; stmt.executeUpdate(createString);
 <p>//<font color="#009900">To create the PreparedStatement object for sending
 the SQL statements.</font>
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 prst=conn.prepareStatement(insertString);
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }catch(Exception e)
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 e.printStackTrace();
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 <p>&nbsp;&nbsp;&nbsp; }
 <br>&nbsp;
 <p>// <font color="#009900">This method returns all the messages that are
 placed in the memory.</font>
 <br>&nbsp;&nbsp;&nbsp; public synchronized&nbsp; void flush ()&nbsp;
 <br>&nbsp;&nbsp;&nbsp; {
 <p>//<font color="#009900"> To Flush the messages in the buffer into their
 respective streams</font>
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; conn.commit();
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }catch(Exception ee)
 <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ee.printStackTrace();
 <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 <br>&nbsp;&nbsp;&nbsp; }
 <p>// <font color="#009900">To write the error messages and the stack traces
 into the&nbsp; database line by line.</font>
 <br>&nbsp;&nbsp;&nbsp; public synchronized&nbsp; void err(String message
 ,Throwable exception)&nbsp;
 <br>&nbsp;&nbsp;&nbsp; {
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try
 <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 <p>//<font color="#009900">To Set the message to be displayed in the first
 parameter.</font>
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 prst.setString(1,message);
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 //To execute a SQL string.
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 prst.executeUpdate();
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 if(exception !=null)
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 {
 <p>//<font color="#009900">To store the exception stack traces line by
 line in order to get the line count.</font>
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 StringWriter sw=new StringWriter();
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 PrintWriter pw=new PrintWriter(sw);
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 Print the stack Trace.
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 exception.printStackTrace(pw);
 <p>//<font color="#009900">To get the complete Stack trace.</font>
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 String tmpstr=sw.getBuffer().toString();
 <p>//<font color="#009900">To get the stack trace line by line</font>
 <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 StringTokenizer stkr=new StringTokenizer(tmpstr,System.getProperty("line.separator"));
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 while(stkr.hasMoreTokens())
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 {&nbsp;
 <p>//<font color="#009900">To get the message in each line and to execute
 the SQL string for inserting each line into the respective table.</font>
 <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 prst.setString(1,stkr.nextToken());
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 prst.executeUpdate();
 <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 }
 <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; catch(Exception ec)
 <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ec.printStackTrace();
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 <br>&nbsp;&nbsp;&nbsp; }&nbsp;
 <br>&nbsp;
 <p>//<font color="#009900">To Write the output messages into the database.</font>
 <br>&nbsp;&nbsp;&nbsp; public synchronized&nbsp; void out(String message)&nbsp;
 <br>&nbsp;&nbsp;&nbsp; {
 <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 {
 <br>&nbsp;
 <p>//<font color="#009900">To insert the messages into their respective
 tables in the database by executing the SQL statement.</font>
 <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 prst.setString(1,message);
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 prst.executeUpdate();
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 }catch(Exception ece)
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 {
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 ece.printStackTrace();
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 }
 <br>&nbsp;&nbsp;&nbsp; }
 <br>&nbsp;
 <p>// <font color="#009900">To close the database connections that were
 opened.</font>
 <br>&nbsp;&nbsp;&nbsp; public void close()
 <br>&nbsp;&nbsp;&nbsp; {
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 <br>&nbsp;
 <p>//<font color="#009900">To close the connections which were opened for
 writing log messages into the database.</font>
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 conn.close();
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }catch(Exception e)
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 e.printStackTrace();
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 <br>&nbsp;&nbsp;&nbsp; }
 <p>}&nbsp;</td>
 </tr>
 </table>
 
 <br>&nbsp;
 <table BORDER=0 COLS=1 WIDTH="100%" BGCOLOR="#CBCBFF" >
 <tr>
 <td><b>Integrating Your LogWriter</b></td>
 </tr>
 </table>
 
 <p>The above code snippet explained you how to create a LogWriter. You
 need to follow the steps given below for integrating it with the Logging
 Mechanism. You can add the LogWriters either in the configuration details
 or at runtime programmatically.
 <p><b>Adding in the configuration details</b>
 <p><b>Step1</b>
 <ul>
 <li>
 Write a class implementing the LogWriter. You can give your own implementation
 for the methods available in the interface. You may add new methods depending
 on your requirements.</li>
 </ul>
 <b>Step 2</b>
 <ul>
 <li>
 Add the new LogWriter to the source from where LogConfigReader would read
 the configuration details. In this framework, by default, the LogConfigReader
 reads the details from a file. The tags which you find above with the DatabaseWriter
 class, can be added to the logging.xml (as LogWrier), if you wish to use
 the default setup.</li>
 </ul>
 The Loggers for this writer can be given as
 <p>&lt;LOGGER>
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ClassName>com.adventnet.afp.log.LoggerImpl&lt;/ClassName>
 <br>&lt;InstanceName>TestLogger&lt;/InstanceName>
 <br>&lt;WriterInstanceName>SERVEROUT&lt;/WriterInstanceName>
 <br>&lt;LogLevel>3&lt;/LogLevel>
 <br>&lt;Properties>
 <br>&lt;Property>
 <br>&lt;Key>DisplayName&lt;/Key>
 <br>&lt;Value>TEST&lt;/Value>
 <br>&lt;/Property>
 <br>&lt;/Properties>
 <br>&lt;/LOGGER>
 <p><b>Step 3</b>
 <p>The following are the steps to be followed to send the messages to be
 logged, to the LogWriter.
 <br>&nbsp;
 <ul>
 <li>
 Get the instances of Configuration reader&nbsp; and Configuration writer.</li>
 </ul>
 
 <ul>
 <li>
 Get the instance of the LogFactory and initialize it.</li>
 </ul>
 
 <ul>
 <li>
 Get the Logger which has the WriterInstanceName as SERVEROUT. This will
 create the Logger and the associated LogWriter (i.e. DatabaseWriter).</li>
 </ul>
 Now, all the log messages will be moved to the specified LogWriter (in
 this example, DataBase).
 <p><b>Creating LogWriter at Runtime</b>
 <p><b>Step1</b>
 <ul>
 <li>
 Write a class implementing the LogWriter. You can give your own implementation
 for the methods available in the interface. You may add new methods depending
 on your requirements.</li>
 </ul>
 <b>Step2</b>
 <ul>
 <li>
 Get the Properties of your&nbsp; LogWriter</li>
 </ul>
 
 <ul>
 <li>
 Get the instance of LogWriterProperties by passing the InstanceName as
 argument.</li>
 </ul>
 
 <ul>
 <li>
 Set the Class name of the LogWriter which will be the classname of your
 own Logger Implementation (i.e. test.DatabaseWrtiter, in this example).</li>
 </ul>
 
 <ul>
 <li>
 Add the custom properties.</li>
 </ul>
 
 <p><br><b>Step 3</b>
 <ul>
 <li>
 Create the LogWriter using the methods available in LogFactory.</li>
 </ul>
 <b>Step 4</b>
 <ul>
 <li>
 Create a Logger. The Logger should have the WriterInstanceName same as
 that of the&nbsp; InstanceName in the LogWriter created by you. All the
 log messages under this Logger will be moved to your own LogWriter.</li>
 </ul>
<P>

<P>
<HR>

<P>
<!-- ======== NESTED CLASS SUMMARY ======== -->


<!-- =========== FIELD SUMMARY =========== -->


<!-- ======== CONSTRUCTOR SUMMARY ======== -->


<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Method Summary</B></FONT></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/afp/log/LogWriter.html#addPropertyChangeListener(java.beans.PropertyChangeListener)">addPropertyChangeListener</A></B>(java.beans.PropertyChangeListener&nbsp;listener)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method for adding PropertyChangeListener to this LogWriter instance.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/afp/log/LogWriter.html#close()">close</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;For closing all the writer instances.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/afp/log/LogWriter.html#err(java.lang.String, java.lang.Throwable)">err</A></B>(java.lang.String&nbsp;message,
    java.lang.Throwable&nbsp;Exception)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;For logging the error messages with the throwable Exceptions.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/afp/log/LogWriter.html#flush()">flush</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;For flushing out the current buffer.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/afp/log/LogWriter.html#getInstanceName()">getInstanceName</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method to get the instance name.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/afp/log/LogWriter.html#init(com.adventnet.afp.log.LogWriterProperties)">init</A></B>(<A HREF="../../../../com/adventnet/afp/log/LogWriterProperties.html">LogWriterProperties</A>&nbsp;logWriterProperties)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;For initializing implementation class with required properties.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/afp/log/LogWriter.html#out(java.lang.String)">out</A></B>(java.lang.String&nbsp;message)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Derived classes for logging messages.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/afp/log/LogWriter.html#removePropertyChangeListener(java.beans.PropertyChangeListener)">removePropertyChangeListener</A></B>(java.beans.PropertyChangeListener&nbsp;listener)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Used to remove the registered PropertyChangeListener.</TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ============ FIELD DETAIL =========== -->


<!-- ========= CONSTRUCTOR DETAIL ======== -->


<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=1><FONT SIZE="+2">
<B>Method Detail</B></FONT></TD>
</TR>
</TABLE>

<A NAME="out(java.lang.String)"><!-- --></A><H3>
out</H3>
<PRE>
public void <B>out</B>(java.lang.String&nbsp;message)</PRE>
<DL>
<DD>Derived classes for logging messages. The output messages or any informative messages can be
 moved to their respective file using this method. By default the messages passed to this
 method will be moved to serverout.txt,serverout1.txt etc.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>message</CODE> - String to be logged</DL>
</DD>
</DL>
<HR>

<A NAME="err(java.lang.String, java.lang.Throwable)"><!-- --></A><H3>
err</H3>
<PRE>
public void <B>err</B>(java.lang.String&nbsp;message,
                java.lang.Throwable&nbsp;Exception)</PRE>
<DL>
<DD>For logging the error messages with the throwable Exceptions. The error messages by default are
 moved to the file namely servererr.txt, servererr1.txt etc. The line count is made for the
 stack trace which will be very helpful in maintaining the line count when buffering is enabled.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>Exception</CODE> - throwable<DD><CODE>message</CODE> - the error message to be logged</DL>
</DD>
</DL>
<HR>

<A NAME="flush()"><!-- --></A><H3>
flush</H3>
<PRE>
public void <B>flush</B>()
           throws <A HREF="../../../../com/adventnet/afp/log/LogException.html">LogException</A></PRE>
<DL>
<DD>For flushing out the current buffer. This method forms the basis for the file operations.When the
 buffer size is 0, the messages passed to the methods out and err will be flushed into their
 respective log files by this method. When buffering is enabled, depending upon the
 buffer type, the messages are flushed at a stretch into their respective files.
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../com/adventnet/afp/log/LogException.html">LogException</A></CODE> - if an error occurs during flushing of contents</DL>
</DD>
</DL>
<HR>

<A NAME="close()"><!-- --></A><H3>
close</H3>
<PRE>
public void <B>close</B>()
           throws <A HREF="../../../../com/adventnet/afp/log/LogException.html">LogException</A></PRE>
<DL>
<DD>For closing all the writer instances. This can also be used to clean up all the resources.
  The log files are written into the file that is opened using PrintStream. When the next
  log file is to be opened, then the currently opened file stream should be closed.
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../com/adventnet/afp/log/LogException.html">LogException</A></CODE> - if an error occurs while closing the writer</DL>
</DD>
</DL>
<HR>

<A NAME="init(com.adventnet.afp.log.LogWriterProperties)"><!-- --></A><H3>
init</H3>
<PRE>
public void <B>init</B>(<A HREF="../../../../com/adventnet/afp/log/LogWriterProperties.html">LogWriterProperties</A>&nbsp;logWriterProperties)
          throws <A HREF="../../../../com/adventnet/afp/log/LogException.html">LogException</A></PRE>
<DL>
<DD>For initializing implementation class with required properties. The Custom properties are passed
 through this method from the LogWriterProperties.The properties are taken from the LogWriterProperties
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>logWriterProperties</CODE> - The Writer properties are obtained
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../com/adventnet/afp/log/LogException.html">LogException</A></CODE> - if an error occurs during initialization</DL>
</DD>
</DL>
<HR>

<A NAME="getInstanceName()"><!-- --></A><H3>
getInstanceName</H3>
<PRE>
public java.lang.String <B>getInstanceName</B>()</PRE>
<DL>
<DD>Method to get the instance name. The Log writer Instance name is passed as one of the
 log writer properties. For every Log Writer, the Instance is passed.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>The log Writer Instance is returned</DL>
</DD>
</DL>
<HR>

<A NAME="addPropertyChangeListener(java.beans.PropertyChangeListener)"><!-- --></A><H3>
addPropertyChangeListener</H3>
<PRE>
public void <B>addPropertyChangeListener</B>(java.beans.PropertyChangeListener&nbsp;listener)</PRE>
<DL>
<DD>Method for adding PropertyChangeListener to this LogWriter instance. This can be used to get notification
when any one of the property changes.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>listener</CODE> - PropertyChangeListener to be added</DL>
</DD>
</DL>
<HR>

<A NAME="removePropertyChangeListener(java.beans.PropertyChangeListener)"><!-- --></A><H3>
removePropertyChangeListener</H3>
<PRE>
public boolean <B>removePropertyChangeListener</B>(java.beans.PropertyChangeListener&nbsp;listener)</PRE>
<DL>
<DD>Used to remove the registered PropertyChangeListener. On successful removal, this method will return true.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>listener</CODE> - reference of PropertyChangeListener to be removed
<DT><B>Returns:</B><DD>boolean value to indicate the result of the operation.</DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>

<!-- ========== START OF NAVBAR ========== -->
<A NAME="navbar_bottom"><!-- --></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0">
<TR>
<TD COLSPAN=3 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../../com/adventnet/afp/log/Logger.html"><B>PREV CLASS</B></A>&nbsp;
&nbsp;NEXT CLASS</FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../index.html" TARGET="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="LogWriter.html" TARGET="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;
<SCRIPT>
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
<A HREF="../../../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>
</NOSCRIPT>
</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;CONSTR&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;CONSTR&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<!-- =========== END OF NAVBAR =========== -->

<HR>
Copyright (c)AdventNet Inc., 1996-2006
</BODY>
</HTML>
