<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN""http://www.w3.org/TR/REC-html40/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc on Tue Nov 07 19:59:02 IST 2006 -->
<TITLE>
SASClient (AdventNet)
</TITLE>
<LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../stylesheet.css" TITLE="Style">
</HEAD>
<SCRIPT>
function asd()
{
parent.document.title="SASClient (AdventNet)";
}
</SCRIPT>
<BODY BGCOLOR="white" onload="asd();">

<!-- ========== START OF NAVBAR ========== -->
<A NAME="navbar_top"><!-- --></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0">
<TR>
<TD COLSPAN=3 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../../com/adventnet/snmp/snmp2/SASAppletStub.html"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../../com/adventnet/snmp/snmp2/SASProtocolOptions.html"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../index.html" TARGET="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="SASClient.html" TARGET="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;
<SCRIPT>
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
<A HREF="../../../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>
</NOSCRIPT>
</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<!-- =========== END OF NAVBAR =========== -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
<FONT SIZE="-1">
com.adventnet.snmp.snmp2</FONT>
<BR>
Class  SASClient</H2>
<PRE>
java.lang.Object
  |
  +--java.util.Observable
        |
        +--<B>com.adventnet.snmp.snmp2.SASClient</B>
</PRE>
<DL>
<DT><B>All Implemented Interfaces:</B> <DD>java.lang.Runnable, java.io.Serializable</DD>
</DL>
<HR>
<DL>
<DT>public class <B>SASClient</B><DT>extends java.util.Observable<DT>implements java.io.Serializable, java.lang.Runnable</DL>

<P>
The SASClient class enables applet services for applets that are limited 
  by the security sandbox that Java applets often run within.  In addition to
  sending and receiving SNMP data, the services available through SASClient
  allow saving files, creating and deleting directories and files, etc.,
  on the web server that loaded the applet, provided the SAS server is run
  on the server. 
	<p>
  You can also do all these operations using HTTP instead of TCP/IP by setting 
  the value of protocol in SnmpSession using setSASProtocol() to 2 or by using 
	the constructor SASClient(applet,debug, protocol). 
  For using HTTP protocol, you don't have to start the SAServer. 
  <p>
  The SASClient class is needed on account of browser security which 
  prevents Java applets from sending data to any host but the applet host
  when loaded over the network.
  <p>
  This class will not need to be used directly for SNMP operations
  as the use of SASClient class use will not be transparent to the user.
  The SNMP library will by default attempt to use SAS if available, 
  or use HTTP if the protocol value is set to 2 but will
  otherwise use direct socket connections if SAS is unavailable.
  The file access methods of this class may be used if file operation
  are required by an applet.  For example the applet may use the
  saveFile method or appendFile method to save data on the applet host.
  <p>
  If the protocol value is 1,which is the default value,
  this class implements a client to send/receive PDUs from any SNMP peer 
  via a deamon (SAS) on the Applet Host, i.e. Web server. While using 
  Java enabled browsers that do not permit socket connections to anything 
  but the applet host ,your applet will automatically instantiate this 
  class to communicate with an SNMP entity.
  <p>
  If the protocol value is 2,this class uses the servlet loaded with the 
	web-server to send/receive requests. 
  <p> 
  Use the open method on your session instance to specify whether the
  SAS or HTTP function needs to be used by your applet.
  For each session, you will call the open method with your
  applet instance as an argument.  If the connection to the SAS 
  daemon fails(if the value of protocol specified is 1) or if 
  the protocol is not set to 2, the session will try and 
  open a direct local UDP port for SNMP operations.
  <p>
  Enable CALLBACKTHREAD to use the SASClient calls from callback. By default
  it is disabled.
<P>

<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html"><CODE>SnmpSession</CODE></A>, 
<A HREF="../../../../serialized-form.html" TARGET="com.adventnet.snmp.snmp2.SASClient">Serialized Form</A></DL>
<HR>

<P>
<!-- ======== NESTED CLASS SUMMARY ======== -->


<!-- =========== FIELD SUMMARY =========== -->

<A NAME="field_summary"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Field Summary</B></FONT></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SASClient.html#HTTP_PROTOCOL">HTTP_PROTOCOL</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SASClient.html#TCP_PROTOCOL">TCP_PROTOCOL</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
</TABLE>
&nbsp;
<!-- ======== CONSTRUCTOR SUMMARY ======== -->

<A NAME="constructor_summary"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Constructor Summary</B></FONT></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SASClient.html#SASClient(java.applet.Applet, boolean)">SASClient</A></B>(java.applet.Applet&nbsp;applet,
          boolean&nbsp;debug)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;By default this constructor will take the protocol value as 1 and look 
 for the SASPort.html file in the applet html directory.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SASClient.html#SASClient(java.applet.Applet, boolean, int)">SASClient</A></B>(java.applet.Applet&nbsp;applet,
          boolean&nbsp;debug,
          int&nbsp;protocol)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;If the protocol value is set to 1, this constructor will look 
 for the SASPort.html file in the applet html directory.</TD>
</TR>
</TABLE>
&nbsp;
<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Method Summary</B></FONT></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SASClient.html#appendFile(java.lang.String, byte[])">appendFile</A></B>(java.lang.String&nbsp;filename,
           byte[]&nbsp;data)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The appendFile method for appending data to a file in "SASusers" sub-directory
 in which SASPort.html was created by the SAServer.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;byte[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SASClient.html#clientCall(byte[])">clientCall</A></B>(byte[]&nbsp;bytes)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method is used to build user defined functions around SAS.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SASClient.html#closeDB()">closeDB</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method is for closing the database connection which is opened 
  through the method connectDB method.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SASClient.html#connectDB(java.lang.String, java.lang.String, java.lang.String, java.lang.String)">connectDB</A></B>(java.lang.String&nbsp;driver,
          java.lang.String&nbsp;url,
          java.lang.String&nbsp;user,
          java.lang.String&nbsp;pass)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method is for connecting with the database through SAS.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SASClient.html#createDir(java.lang.String)">createDir</A></B>(java.lang.String&nbsp;directory)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The createDir method is for creating a directory on the applet host.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SASClient.html#deleteDir(java.lang.String)">deleteDir</A></B>(java.lang.String&nbsp;directory)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The deleteDir method for deleting a directory on the applet host.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SASClient.html#deleteFile(java.lang.String)">deleteFile</A></B>(java.lang.String&nbsp;filename)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The deleteFile method is for deleting a file on the applet host.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SASClient.html#getHostAddress(java.lang.String, int)">getHostAddress</A></B>(java.lang.String&nbsp;hostname,
               int&nbsp;timeout)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The ip address lookup method is for applet clients.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SASClient.html#getHostName(java.lang.String, int)">getHostName</A></B>(java.lang.String&nbsp;address,
            int&nbsp;timeout)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The name lookup method is for applet clients.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SASClient.html#getMaxSasTypes()">getMaxSasTypes</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method returns the number of known  SAS request types and users 
 are requested to use a  number greater than the returned value which 
 will keep changing in the future.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SASClient.html#isConnected()">isConnected</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Indicates if the connection to the SNMP Applet Server has been
 successfully established.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SASClient.html#isDBConnected()">isDBConnected</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method is for knowing whether the database connection
 has been established or not.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SASClient.html#isFileReadWrite()">isFileReadWrite</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Checks if the fileWrite flag is true.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SASClient.html#isKnownSASType(int)">isKnownSASType</A></B>(int&nbsp;type)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;If the value passed is one of the known request types, it returns true.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.sql.ResultSet</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SASClient.html#queryDB(java.lang.String)">queryDB</A></B>(java.lang.String&nbsp;queryString)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method is for doing a database query.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SASClient.html#reqTraps(int)">reqTraps</A></B>(int&nbsp;port)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method to request delivery of traps by SAServer arriving 
 at that port.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SASClient.html#run()">run</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Invokes receive() method.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SASClient.html#saveFile(java.lang.String, byte[])">saveFile</A></B>(java.lang.String&nbsp;filename,
         byte[]&nbsp;data)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The saveFile method for saving data to a file in "SASusers" sub-directory
 in which SASPort.html was created by the SAServer.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SASClient.html#setFileReadWrite(boolean)">setFileReadWrite</A></B>(boolean&nbsp;writeFlag)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the fileWrite flag.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SASClient.html#setTimeout(int)">setTimeout</A></B>(int&nbsp;to)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;For setting the timeOut value for a synchronous SASClient operation.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SASClient.html#start()">start</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Starts the receiver thread.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SASClient.html#stop()">stop</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Stops the receiver thread and closes socket connection with SAServer.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SASClient.html#updateDB(java.lang.String)">updateDB</A></B>(java.lang.String&nbsp;updateString)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method is for updating the database with a new value.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;byte[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SASClient.html#userSyncSend(int, byte[])">userSyncSend</A></B>(int&nbsp;userType,
             byte[]&nbsp;bytes)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Using this method the user can send his own request type.</TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.util.Observable"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TD><B>Methods inherited from class java.util.Observable</B></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>addObserver, clearChanged, countObservers, deleteObserver, deleteObservers, hasChanged, notifyObservers, notifyObservers, setChanged</CODE></TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TD><B>Methods inherited from class java.lang.Object</B></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</CODE></TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ============ FIELD DETAIL =========== -->

<A NAME="field_detail"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=1><FONT SIZE="+2">
<B>Field Detail</B></FONT></TD>
</TR>
</TABLE>

<A NAME="TCP_PROTOCOL"><!-- --></A><H3>
TCP_PROTOCOL</H3>
<PRE>
public static final int <B>TCP_PROTOCOL</B></PRE>
<DL>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.adventnet.snmp.snmp2.SASClient.TCP_PROTOCOL">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="HTTP_PROTOCOL"><!-- --></A><H3>
HTTP_PROTOCOL</H3>
<PRE>
public static final int <B>HTTP_PROTOCOL</B></PRE>
<DL>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.adventnet.snmp.snmp2.SASClient.HTTP_PROTOCOL">Constant Field Values</A></DL>
</DL>

<!-- ========= CONSTRUCTOR DETAIL ======== -->

<A NAME="constructor_detail"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=1><FONT SIZE="+2">
<B>Constructor Detail</B></FONT></TD>
</TR>
</TABLE>

<A NAME="SASClient(java.applet.Applet, boolean)"><!-- --></A><H3>
SASClient</H3>
<PRE>
public <B>SASClient</B>(java.applet.Applet&nbsp;applet,
                 boolean&nbsp;debug)
          throws <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpException.html">SnmpException</A></PRE>
<DL>
<DD>By default this constructor will take the protocol value as 1 and look 
 for the SASPort.html file in the applet html directory. If the 
 SASPort.html file is created elsewhere then the directory where it is 
 created, is specified in the applet html file, using an applet parameter 
 SAS_PORT_DIR.
<P>
<DT><B>Parameters:</B><DD><CODE>applet</CODE> - applet refernce using this sasclient to talk to SAServer.<DD><CODE>debug</CODE> - Debug messages are printed, if true.
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpException.html">SnmpException</A></CODE> - is thrown whenever an error occurs.</DL>
<HR>

<A NAME="SASClient(java.applet.Applet, boolean, int)"><!-- --></A><H3>
SASClient</H3>
<PRE>
public <B>SASClient</B>(java.applet.Applet&nbsp;applet,
                 boolean&nbsp;debug,
                 int&nbsp;protocol)
          throws <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpException.html">SnmpException</A></PRE>
<DL>
<DD>If the protocol value is set to 1, this constructor will look 
 for the SASPort.html file in the applet html directory. If the 
 SASPort.html file is created elsewhere then the directory where it is 
 created is specified in the applet html file using an applet parameter 
 SAS_PORT_DIR. If you want to change the default protocol value which is 1,
 use the method setSASProtocol(int) of SnmpSession before calling 
 SnmpSession.open(applet).
<P>
<DT><B>Parameters:</B><DD><CODE>applet</CODE> - applet reference using this sasclient to talk to SAServer<DD><CODE>debug</CODE> - Debug messages are printed, if true.
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpException.html">SnmpException</A></CODE> - is thrown whenever an error occurs.</DL>

<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=1><FONT SIZE="+2">
<B>Method Detail</B></FONT></TD>
</TR>
</TABLE>

<A NAME="setTimeout(int)"><!-- --></A><H3>
setTimeout</H3>
<PRE>
public void <B>setTimeout</B>(int&nbsp;to)</PRE>
<DL>
<DD>For setting the timeOut value for a synchronous SASClient operation.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>to</CODE> - the timeOut value in milliSeconds.</DL>
</DD>
</DL>
<HR>

<A NAME="isFileReadWrite()"><!-- --></A><H3>
isFileReadWrite</H3>
<PRE>
public static boolean <B>isFileReadWrite</B>()</PRE>
<DL>
<DD>Checks if the fileWrite flag is true.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setFileReadWrite(boolean)"><!-- --></A><H3>
setFileReadWrite</H3>
<PRE>
public static void <B>setFileReadWrite</B>(boolean&nbsp;writeFlag)</PRE>
<DL>
<DD>Sets the fileWrite flag.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="isConnected()"><!-- --></A><H3>
isConnected</H3>
<PRE>
public boolean <B>isConnected</B>()</PRE>
<DL>
<DD>Indicates if the connection to the SNMP Applet Server has been
 successfully established.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>true if the connection is established.</DL>
</DD>
</DL>
<HR>

<A NAME="isKnownSASType(int)"><!-- --></A><H3>
isKnownSASType</H3>
<PRE>
public boolean <B>isKnownSASType</B>(int&nbsp;type)</PRE>
<DL>
<DD>If the value passed is one of the known request types, it returns true.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>type</CODE> - requestType
<DT><B>Returns:</B><DD>true if one of the known types</DL>
</DD>
</DL>
<HR>

<A NAME="getMaxSasTypes()"><!-- --></A><H3>
getMaxSasTypes</H3>
<PRE>
public int <B>getMaxSasTypes</B>()</PRE>
<DL>
<DD>This method returns the number of known  SAS request types and users 
 are requested to use a  number greater than the returned value which 
 will keep changing in the future. So it is advisable  for the user 
 to use a  new  request type by incrementing the value for your 
 different requests.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>int The number of sas request types.</DL>
</DD>
</DL>
<HR>

<A NAME="reqTraps(int)"><!-- --></A><H3>
reqTraps</H3>
<PRE>
public void <B>reqTraps</B>(int&nbsp;port)
              throws java.io.IOException,
                     <A HREF="../../../../com/adventnet/management/transport/TransportException.html">TransportException</A></PRE>
<DL>
<DD>Method to request delivery of traps by SAServer arriving 
 at that port.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>port</CODE> - the port at which SAServer to listen for
                      traps and forward to this client. Multiple
                      client applications can request for the same 
                      port.
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - on error in writing to SAServer
<DD><CODE><A HREF="../../../../com/adventnet/management/transport/TransportException.html">TransportException</A></CODE></DL>
</DD>
</DL>
<HR>

<A NAME="saveFile(java.lang.String, byte[])"><!-- --></A><H3>
saveFile</H3>
<PRE>
public void <B>saveFile</B>(java.lang.String&nbsp;filename,
                     byte[]&nbsp;data)
              throws <A HREF="../../../../com/adventnet/management/transport/TransportException.html">TransportException</A>,
                     java.io.IOException</PRE>
<DL>
<DD>The saveFile method for saving data to a file in "SASusers" sub-directory
 in which SASPort.html was created by the SAServer.  Lacks error
 checking at this point.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>filename</CODE> - the file will be saved by this name at the SAServer.<DD><CODE>data</CODE> - the contents of the file.
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - on error in writing to SAServer.
<DD><CODE><A HREF="../../../../com/adventnet/management/transport/TransportException.html">TransportException</A></CODE></DL>
</DD>
</DL>
<HR>

<A NAME="appendFile(java.lang.String, byte[])"><!-- --></A><H3>
appendFile</H3>
<PRE>
public void <B>appendFile</B>(java.lang.String&nbsp;filename,
                       byte[]&nbsp;data)
                throws <A HREF="../../../../com/adventnet/management/transport/TransportException.html">TransportException</A>,
                       java.io.IOException</PRE>
<DL>
<DD>The appendFile method for appending data to a file in "SASusers" sub-directory
 in which SASPort.html was created by the SAServer.  Lacks error
 checking at this point.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>filename</CODE> - the data will be appended to file by this name at the SAServer.<DD><CODE>data</CODE> - the contents to be appended to the file.
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - on error in writing to SAServer.
<DD><CODE><A HREF="../../../../com/adventnet/management/transport/TransportException.html">TransportException</A></CODE></DL>
</DD>
</DL>
<HR>

<A NAME="connectDB(java.lang.String, java.lang.String, java.lang.String, java.lang.String)"><!-- --></A><H3>
connectDB</H3>
<PRE>
public void <B>connectDB</B>(java.lang.String&nbsp;driver,
                      java.lang.String&nbsp;url,
                      java.lang.String&nbsp;user,
                      java.lang.String&nbsp;pass)
               throws java.sql.SQLException,
                      java.lang.ClassNotFoundException</PRE>
<DL>
<DD>This method is for connecting with the database through SAS.
  This is a synchronous method which waits till the response comes
  or till it timesout.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>driver</CODE> - the driver class for database.<DD><CODE>url</CODE> - the url where the database exists<DD><CODE>user</CODE> - the username<DD><CODE>pass</CODE> - the password
<DT><B>Throws:</B>
<DD><CODE>java.sql.SQLException</CODE> - is thrown when unable to create a Connection.
<DD><CODE>java.lang.ClassNotFoundException</CODE> - when the driver class specified is 
  not present.</DL>
</DD>
</DL>
<HR>

<A NAME="isDBConnected()"><!-- --></A><H3>
isDBConnected</H3>
<PRE>
public boolean <B>isDBConnected</B>()
                      throws <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpException.html">SnmpException</A></PRE>
<DL>
<DD>This method is for knowing whether the database connection
 has been established or not.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>returns true if the database connection has been
 successfully established and false otherwise.
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpException.html">SnmpException</A></CODE> - if any error occurs.</DL>
</DD>
</DL>
<HR>

<A NAME="closeDB()"><!-- --></A><H3>
closeDB</H3>
<PRE>
public void <B>closeDB</B>()
             throws java.sql.SQLException</PRE>
<DL>
<DD>This method is for closing the database connection which is opened 
  through the method connectDB method.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.sql.SQLException</CODE> - thrown when unable to close the database.</DL>
</DD>
</DL>
<HR>

<A NAME="queryDB(java.lang.String)"><!-- --></A><H3>
queryDB</H3>
<PRE>
public java.sql.ResultSet <B>queryDB</B>(java.lang.String&nbsp;queryString)
                           throws java.sql.SQLException</PRE>
<DL>
<DD>This method is for doing a database query.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>queryString</CODE> - the actual query string that is to be performed on
  the database.
<DT><B>Returns:</B><DD>a ResultSet object for the query. This object's next() method
  will return false, if zero rows are afected by the query.
<DT><B>Throws:</B>
<DD><CODE>java.sql.SQLException</CODE> - thrown when a database access error occurs.</DL>
</DD>
</DL>
<HR>

<A NAME="updateDB(java.lang.String)"><!-- --></A><H3>
updateDB</H3>
<PRE>
public int <B>updateDB</B>(java.lang.String&nbsp;updateString)
             throws java.sql.SQLException</PRE>
<DL>
<DD>This method is for updating the database with a new value.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>updateString</CODE> - the sql query string that is to be performed on the 
  database.
<DT><B>Returns:</B><DD>either the row count for INSERT, UPDATE or DELETE or 0 for 
  SQL statements that return nothing.
<DT><B>Throws:</B>
<DD><CODE>java.sql.SQLException</CODE> - if a database access error occurs.</DL>
</DD>
</DL>
<HR>

<A NAME="start()"><!-- --></A><H3>
start</H3>
<PRE>
public void <B>start</B>()</PRE>
<DL>
<DD>Starts the receiver thread. Use this for receiving non SNMP service 
 responses when SnmpSession thread is not available.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="run()"><!-- --></A><H3>
run</H3>
<PRE>
public void <B>run</B>()</PRE>
<DL>
<DD>Invokes receive() method.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>run</CODE> in interface <CODE>java.lang.Runnable</CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="stop()"><!-- --></A><H3>
stop</H3>
<PRE>
public void <B>stop</B>()</PRE>
<DL>
<DD>Stops the receiver thread and closes socket connection with SAServer.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="clientCall(byte[])"><!-- --></A><H3>
clientCall</H3>
<PRE>
public byte[] <B>clientCall</B>(byte[]&nbsp;bytes)</PRE>
<DL>
<DD>This method is used to build user defined functions around SAS.
 SAS supports extension of server/client interaction, and the building
 of synchronous and asynchronous interactions.  This is synchronous
 when data is returned immediately, and asynchronous when the observer
 interface is used.
 Note: Currently asynchrouns communication won't work.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>bytes</CODE> - The byte array data to be sent
<DT><B>Returns:</B><DD>The response data</DL>
</DD>
</DL>
<HR>

<A NAME="userSyncSend(int, byte[])"><!-- --></A><H3>
userSyncSend</H3>
<PRE>
public byte[] <B>userSyncSend</B>(int&nbsp;userType,
                           byte[]&nbsp;bytes)</PRE>
<DL>
<DD>Using this method the user can send his own request type.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>userType</CODE> - The request type to be sent to SAServer.<DD><CODE>bytes</CODE> - The byte array packet to be sent.
<DT><B>Returns:</B><DD>The response packet.</DL>
</DD>
</DL>
<HR>

<A NAME="getHostName(java.lang.String, int)"><!-- --></A><H3>
getHostName</H3>
<PRE>
public java.lang.String <B>getHostName</B>(java.lang.String&nbsp;address,
                                    int&nbsp;timeout)
                             throws <A HREF="../../../../com/adventnet/management/transport/TransportException.html">TransportException</A></PRE>
<DL>
<DD>The name lookup method is for applet clients. This will return the
 host name for the address. e.g., returns littleangel.com for 
 '192.234.123.56'.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>address</CODE> - the ip address of the host.<DD><CODE>timeout</CODE> - the time in ms to wait for the SAServer to respond. 
                        Defaults to 2 Secs.
<DT><B>Returns:</B><DD>null, on failure.
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../com/adventnet/management/transport/TransportException.html">TransportException</A></CODE> - on error in writing to SAServer.</DL>
</DD>
</DL>
<HR>

<A NAME="getHostAddress(java.lang.String, int)"><!-- --></A><H3>
getHostAddress</H3>
<PRE>
public java.lang.String <B>getHostAddress</B>(java.lang.String&nbsp;hostname,
                                       int&nbsp;timeout)
                                throws <A HREF="../../../../com/adventnet/management/transport/TransportException.html">TransportException</A></PRE>
<DL>
<DD>The ip address lookup method is for applet clients. This will return the
 address for the host name. e.g., returns 192.234.123.56 for littleangel.com
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>hostname</CODE> - the host whose ipaddress needs to be looked up.<DD><CODE>timeout</CODE> - the time in ms to wait for the SAServer to respond. 
                          Defaults to 2 Secs.
<DT><B>Returns:</B><DD>the host address, null if Host Not Found.
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../com/adventnet/management/transport/TransportException.html">TransportException</A></CODE> - on error in writing to SAServer.</DL>
</DD>
</DL>
<HR>

<A NAME="createDir(java.lang.String)"><!-- --></A><H3>
createDir</H3>
<PRE>
public void <B>createDir</B>(java.lang.String&nbsp;directory)
               throws <A HREF="../../../../com/adventnet/management/transport/TransportException.html">TransportException</A>,
                      java.io.IOException</PRE>
<DL>
<DD>The createDir method is for creating a directory on the applet host.
 Can specify a relative path to SASusers sub-directory in which
 SASPort.html was created by the SAServer.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>directory</CODE> - The name of the directory to be created
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - on error in Creating Directory
<DD><CODE><A HREF="../../../../com/adventnet/management/transport/TransportException.html">TransportException</A></CODE></DL>
</DD>
</DL>
<HR>

<A NAME="deleteFile(java.lang.String)"><!-- --></A><H3>
deleteFile</H3>
<PRE>
public void <B>deleteFile</B>(java.lang.String&nbsp;filename)
                throws <A HREF="../../../../com/adventnet/management/transport/TransportException.html">TransportException</A>,
                       java.io.IOException</PRE>
<DL>
<DD>The deleteFile method is for deleting a file on the applet host.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>filename</CODE> - The name of the file to be deleted.
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - on error in Deleting File .
<DD><CODE><A HREF="../../../../com/adventnet/management/transport/TransportException.html">TransportException</A></CODE></DL>
</DD>
</DL>
<HR>

<A NAME="deleteDir(java.lang.String)"><!-- --></A><H3>
deleteDir</H3>
<PRE>
public void <B>deleteDir</B>(java.lang.String&nbsp;directory)
               throws <A HREF="../../../../com/adventnet/management/transport/TransportException.html">TransportException</A>,
                      java.io.IOException</PRE>
<DL>
<DD>The deleteDir method for deleting a directory on the applet host.
 It will not delete a directory if that is not empty.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>directory</CODE> - The name for the directory to be deleted.
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - on error in Deleting Directory.
<DD><CODE><A HREF="../../../../com/adventnet/management/transport/TransportException.html">TransportException</A></CODE></DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>

<!-- ========== START OF NAVBAR ========== -->
<A NAME="navbar_bottom"><!-- --></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0">
<TR>
<TD COLSPAN=3 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../../com/adventnet/snmp/snmp2/SASAppletStub.html"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../../com/adventnet/snmp/snmp2/SASProtocolOptions.html"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../index.html" TARGET="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="SASClient.html" TARGET="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;
<SCRIPT>
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
<A HREF="../../../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>
</NOSCRIPT>
</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<!-- =========== END OF NAVBAR =========== -->

<HR>
Copyright (c)AdventNet Inc., 1996-2006
</BODY>
</HTML>
