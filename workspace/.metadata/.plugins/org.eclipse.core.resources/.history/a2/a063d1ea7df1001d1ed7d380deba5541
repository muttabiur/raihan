<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN""http://www.w3.org/TR/REC-html40/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc on Thu Jan 29 17:18:49 IST 2009 -->
<TITLE>
SecurityModelEntry (AdventNet)
</TITLE>
<LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../stylesheet.css" TITLE="Style">
</HEAD>
<SCRIPT>
function asd()
{
parent.document.title="SecurityModelEntry (AdventNet)";
}
</SCRIPT>
<BODY BGCOLOR="white" onload="asd();">

<!-- ========== START OF NAVBAR ========== -->
<A NAME="navbar_top"><!-- --></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0">
<TR>
<TD COLSPAN=3 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../../com/adventnet/snmp/snmp2/SASProtocolOptions.html"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../../com/adventnet/snmp/snmp2/SecurityModelTable.html"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../index.html" TARGET="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="SecurityModelEntry.html" TARGET="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;
<SCRIPT>
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
<A HREF="../../../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>
</NOSCRIPT>
</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<!-- =========== END OF NAVBAR =========== -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
<FONT SIZE="-1">
com.adventnet.snmp.snmp2</FONT>
<BR>
Class  SecurityModelEntry</H2>
<PRE>
java.lang.Object
  |
  +--<B>com.adventnet.snmp.snmp2.SecurityModelEntry</B>
</PRE>
<DL>
<DT><B>Direct Known Subclasses:</B> <DD><A HREF="../../../../com/adventnet/snmp/snmp2/security/community/SnmpCommunityEntry.html">SnmpCommunityEntry</A>, <A HREF="../../../../com/adventnet/snmp/snmp2/usm/USMUserEntry.html">USMUserEntry</A></DD>
</DL>
<HR>
<DL>
<DT>public abstract class <B>SecurityModelEntry</B><DT>extends java.lang.Object</DL>

<P>
This is an abstract class which is used to define a new security model.
 API users should extend this class to implement their own security model.
 This class has a security model number, a model independent
 securityName, a model dependent securityID and the securityLevel of the
 model independent securityName. This class has to be extended to
 provide the securityModel specific parameters (In case of the USM, the
 parameters are engineID, engineBoots, engineTime, authentication and 
 privacy parameters). In addition this class also has the abstract 
 methods to encode/decode the messageSecurityParameters and 
 authenticate the message to be sent/received.
 <p>
 To implement a securityModel, the securityModel has to be registered
 with the securityProvider. And it is for this purpose a security provider
 class is given.
<P>

<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../../com/adventnet/snmp/snmp2/SecurityProvider.html"><CODE>SecurityProvider</CODE></A></DL>
<HR>

<P>
<!-- ======== NESTED CLASS SUMMARY ======== -->


<!-- =========== FIELD SUMMARY =========== -->


<!-- ======== CONSTRUCTOR SUMMARY ======== -->

<A NAME="constructor_summary"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Constructor Summary</B></FONT></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SecurityModelEntry.html#SecurityModelEntry()">SecurityModelEntry</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
</TABLE>
&nbsp;
<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Method Summary</B></FONT></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>abstract &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SecurityModelEntry.html#authenticateMessageToSend(com.adventnet.snmp.snmp2.Snmp3Message, com.adventnet.snmp.snmp2.SnmpSession)">authenticateMessageToSend</A></B>(<A HREF="../../../../com/adventnet/snmp/snmp2/Snmp3Message.html">Snmp3Message</A>&nbsp;msg,
                          <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html">SnmpSession</A>&nbsp;session)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Prepares the outgoing message as per security model and
 message security level etc.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>abstract &nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SecurityModelEntry.html#authenticateReceivedMessage(com.adventnet.snmp.snmp2.Snmp3Message, com.adventnet.snmp.snmp2.SnmpSession)">authenticateReceivedMessage</A></B>(<A HREF="../../../../com/adventnet/snmp/snmp2/Snmp3Message.html">Snmp3Message</A>&nbsp;msg,
                            <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html">SnmpSession</A>&nbsp;session)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Performs authentication of the received message as per the
 security model.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>abstract &nbsp;<A HREF="../../../../com/adventnet/snmp/snmp2/SecurityModelEntry.html">SecurityModelEntry</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SecurityModelEntry.html#copy()">copy</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This returns the copy of this Security Entry object.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>abstract &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SecurityModelEntry.html#decodeMsgSecurityParams(com.adventnet.snmp.snmp2.Snmp3Message, com.adventnet.snmp.snmp2.SnmpSession, com.adventnet.snmp.snmp2.ASN1Parser)">decodeMsgSecurityParams</A></B>(<A HREF="../../../../com/adventnet/snmp/snmp2/Snmp3Message.html">Snmp3Message</A>&nbsp;msg,
                        <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html">SnmpSession</A>&nbsp;session,
                        <A HREF="../../../../com/adventnet/snmp/snmp2/ASN1Parser.html">ASN1Parser</A>&nbsp;parser)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method will decode the securityModel dependent security
 parameters.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>abstract &nbsp;byte[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SecurityModelEntry.html#decrypt(byte[], int, byte[], int, byte[])">decrypt</A></B>(byte[]&nbsp;data,
        int&nbsp;offset,
        byte[]&nbsp;key,
        int&nbsp;protocol,
        byte[]&nbsp;privParams)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method is called to decrypt the data.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>abstract &nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SecurityModelEntry.html#encodeMsgSecurityParams(com.adventnet.snmp.snmp2.Snmp3Message, com.adventnet.snmp.snmp2.SnmpAPI, com.adventnet.snmp.snmp2.ASN1Parser)">encodeMsgSecurityParams</A></B>(<A HREF="../../../../com/adventnet/snmp/snmp2/Snmp3Message.html">Snmp3Message</A>&nbsp;msg,
                        <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpAPI.html">SnmpAPI</A>&nbsp;API,
                        <A HREF="../../../../com/adventnet/snmp/snmp2/ASN1Parser.html">ASN1Parser</A>&nbsp;asnParser)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method will encode the securityModel dependent security 
 parameters.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>abstract &nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SecurityModelEntry.html#encrypt(byte[], int, byte[], int, byte[])">encrypt</A></B>(byte[]&nbsp;data,
        int&nbsp;spaceLeft,
        byte[]&nbsp;key,
        int&nbsp;protocol,
        byte[]&nbsp;privParams)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method is called to encrypt the data.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>abstract &nbsp;byte[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SecurityModelEntry.html#getEngineID()">getEngineID</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the engineID of this SnmpEngine.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>abstract &nbsp;java.lang.Object</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SecurityModelEntry.html#getKey()">getKey</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns an Object which is interpretted as a key to uniquely
 identify this entry in the SecurityModelTable.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>abstract &nbsp;byte[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SecurityModelEntry.html#getSecurityID(byte[])">getSecurityID</A></B>(byte[]&nbsp;securityName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns a security model dependent securityID, using the
 security model independent security name.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>abstract &nbsp;byte</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SecurityModelEntry.html#getSecurityLevel()">getSecurityLevel</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the security level associated with this securityEntry.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>abstract &nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SecurityModelEntry.html#getSecurityModel()">getSecurityModel</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the security model.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>abstract &nbsp;byte[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SecurityModelEntry.html#getSecurityName()">getSecurityName</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the security model independent security name.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>abstract &nbsp;byte[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SecurityModelEntry.html#getSecurityName(byte[])">getSecurityName</A></B>(byte[]&nbsp;securityID)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns a security model independent security name, using the
 security model dependent securityID.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>abstract &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SecurityModelEntry.html#init(com.adventnet.snmp.snmp2.SnmpSession, com.adventnet.snmp.snmp2.ProtocolOptions)">init</A></B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html">SnmpSession</A>&nbsp;session,
     <A HREF="../../../../com/adventnet/snmp/snmp2/ProtocolOptions.html">ProtocolOptions</A>&nbsp;po)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>abstract &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SecurityModelEntry.html#processEncodedMsg(com.adventnet.snmp.snmp2.Snmp3Message, com.adventnet.snmp.snmp2.ASN1Parser)">processEncodedMsg</A></B>(<A HREF="../../../../com/adventnet/snmp/snmp2/Snmp3Message.html">Snmp3Message</A>&nbsp;msg,
                  <A HREF="../../../../com/adventnet/snmp/snmp2/ASN1Parser.html">ASN1Parser</A>&nbsp;parser)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method is called after encoding the message version.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>abstract &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SecurityModelEntry.html#setSecurityLevel(byte)">setSecurityLevel</A></B>(byte&nbsp;level)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the security level associated with this securityEntry.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>abstract &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SecurityModelEntry.html#setSecurityName(byte[])">setSecurityName</A></B>(byte[]&nbsp;name)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the security name by taking in the security model independent
 security name as the argument.</TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TD><B>Methods inherited from class java.lang.Object</B></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</CODE></TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ============ FIELD DETAIL =========== -->


<!-- ========= CONSTRUCTOR DETAIL ======== -->

<A NAME="constructor_detail"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=1><FONT SIZE="+2">
<B>Constructor Detail</B></FONT></TD>
</TR>
</TABLE>

<A NAME="SecurityModelEntry()"><!-- --></A><H3>
SecurityModelEntry</H3>
<PRE>
public <B>SecurityModelEntry</B>()</PRE>
<DL>
</DL>

<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=1><FONT SIZE="+2">
<B>Method Detail</B></FONT></TD>
</TR>
</TABLE>

<A NAME="getSecurityModel()"><!-- --></A><H3>
getSecurityModel</H3>
<PRE>
public abstract int <B>getSecurityModel</B>()</PRE>
<DL>
<DD>Returns the security model.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getEngineID()"><!-- --></A><H3>
getEngineID</H3>
<PRE>
public abstract byte[] <B>getEngineID</B>()</PRE>
<DL>
<DD>Returns the engineID of this SnmpEngine.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getSecurityName()"><!-- --></A><H3>
getSecurityName</H3>
<PRE>
public abstract byte[] <B>getSecurityName</B>()</PRE>
<DL>
<DD>Returns the security model independent security name.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getSecurityName(byte[])"><!-- --></A><H3>
getSecurityName</H3>
<PRE>
public abstract byte[] <B>getSecurityName</B>(byte[]&nbsp;securityID)</PRE>
<DL>
<DD>Returns a security model independent security name, using the
 security model dependent securityID.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getSecurityID(byte[])"><!-- --></A><H3>
getSecurityID</H3>
<PRE>
public abstract byte[] <B>getSecurityID</B>(byte[]&nbsp;securityName)</PRE>
<DL>
<DD>Returns a security model dependent securityID, using the
 security model independent security name.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setSecurityName(byte[])"><!-- --></A><H3>
setSecurityName</H3>
<PRE>
public abstract void <B>setSecurityName</B>(byte[]&nbsp;name)</PRE>
<DL>
<DD>Sets the security name by taking in the security model independent
 security name as the argument. The model dependent securityID
 should also be set as a result of this operation.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getSecurityLevel()"><!-- --></A><H3>
getSecurityLevel</H3>
<PRE>
public abstract byte <B>getSecurityLevel</B>()</PRE>
<DL>
<DD>Returns the security level associated with this securityEntry.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setSecurityLevel(byte)"><!-- --></A><H3>
setSecurityLevel</H3>
<PRE>
public abstract void <B>setSecurityLevel</B>(byte&nbsp;level)</PRE>
<DL>
<DD>Sets the security level associated with this securityEntry.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getKey()"><!-- --></A><H3>
getKey</H3>
<PRE>
public abstract java.lang.Object <B>getKey</B>()</PRE>
<DL>
<DD>Returns an Object which is interpretted as a key to uniquely
 identify this entry in the SecurityModelTable. Generally the returned
 Object is a function of the index values
 in the MIB which defines the security model.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="authenticateReceivedMessage(com.adventnet.snmp.snmp2.Snmp3Message, com.adventnet.snmp.snmp2.SnmpSession)"><!-- --></A><H3>
authenticateReceivedMessage</H3>
<PRE>
public abstract int <B>authenticateReceivedMessage</B>(<A HREF="../../../../com/adventnet/snmp/snmp2/Snmp3Message.html">Snmp3Message</A>&nbsp;msg,
                                                <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html">SnmpSession</A>&nbsp;session)</PRE>
<DL>
<DD>Performs authentication of the received message as per the
 security model.
 The authenticateReceivedMessage of the security Model
 will actually check whether the received message is any of the 
 following ones ,such as
 1. Discovery or timeSysnc message and respond appropriately.
 2. Response to a discovery or timeSync message.
 i.e discovery/timeSync report message. It will update the
 security info.
 3. Response to an SNMP request. Here it will authenticate
 the message.
 The SnmpSession is also passed so that if this module requires
 the message to be replied(e.g respond to a discovery/timeSync)
 appropriately.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>msg</CODE> - The Smp3Message instance.<DD><CODE>session</CODE> - The SnmpSession instance, incase this module requires
 to reply appropriately.
<DT><B>Returns:</B><DD>The approptiate negative value in case the authentication fails
 and a positive value if it is successful. 
 Returns  0 if authentication is successful and pdu is stored in the queue.
 Returns  1 if authentication is successful and no need to queue the pdu.</DL>
</DD>
</DL>
<HR>

<A NAME="authenticateMessageToSend(com.adventnet.snmp.snmp2.Snmp3Message, com.adventnet.snmp.snmp2.SnmpSession)"><!-- --></A><H3>
authenticateMessageToSend</H3>
<PRE>
public abstract void <B>authenticateMessageToSend</B>(<A HREF="../../../../com/adventnet/snmp/snmp2/Snmp3Message.html">Snmp3Message</A>&nbsp;msg,
                                               <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html">SnmpSession</A>&nbsp;session)
                                        throws <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpException.html">SnmpException</A></PRE>
<DL>
<DD>Prepares the outgoing message as per security model and
 message security level etc.  
 This method is called on the SecurityModelEntry instance of
 Snmp3Message before emcoding the PDU.
 This method will fill up the security parameters in the
 securityModelEntry to prepare for an outgoing message.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>msg</CODE> - The Snmp3Message instance.<DD><CODE>session</CODE> - The SnmpSession instance.
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpException.html">SnmpException</A></CODE> - If the message could not be authenticated
 properly or the particular entry is not available.</DL>
</DD>
</DL>
<HR>

<A NAME="copy()"><!-- --></A><H3>
copy</H3>
<PRE>
public abstract <A HREF="../../../../com/adventnet/snmp/snmp2/SecurityModelEntry.html">SecurityModelEntry</A> <B>copy</B>()</PRE>
<DL>
<DD>This returns the copy of this Security Entry object.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="encodeMsgSecurityParams(com.adventnet.snmp.snmp2.Snmp3Message, com.adventnet.snmp.snmp2.SnmpAPI, com.adventnet.snmp.snmp2.ASN1Parser)"><!-- --></A><H3>
encodeMsgSecurityParams</H3>
<PRE>
public abstract boolean <B>encodeMsgSecurityParams</B>(<A HREF="../../../../com/adventnet/snmp/snmp2/Snmp3Message.html">Snmp3Message</A>&nbsp;msg,
                                                <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpAPI.html">SnmpAPI</A>&nbsp;API,
                                                <A HREF="../../../../com/adventnet/snmp/snmp2/ASN1Parser.html">ASN1Parser</A>&nbsp;asnParser)</PRE>
<DL>
<DD>This method will encode the securityModel dependent security 
 parameters.
 This will encode the message security params. The message
 security params is security model independent and hence
 the securityModelEntry should take of this.
 It will also encrypt the scoped pdu if it is an authpriv user.
 This method should also set the message flags in Snmp3Message.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>msg</CODE> - The Snmp3Message instance.<DD><CODE>API</CODE> - The SnmpAPI Instance.<DD><CODE>asnParser</CODE> - The reference to ASN1Parser which has the
 methods to encode the SnmpPDU.</DL>
</DD>
</DL>
<HR>

<A NAME="decodeMsgSecurityParams(com.adventnet.snmp.snmp2.Snmp3Message, com.adventnet.snmp.snmp2.SnmpSession, com.adventnet.snmp.snmp2.ASN1Parser)"><!-- --></A><H3>
decodeMsgSecurityParams</H3>
<PRE>
public abstract void <B>decodeMsgSecurityParams</B>(<A HREF="../../../../com/adventnet/snmp/snmp2/Snmp3Message.html">Snmp3Message</A>&nbsp;msg,
                                             <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html">SnmpSession</A>&nbsp;session,
                                             <A HREF="../../../../com/adventnet/snmp/snmp2/ASN1Parser.html">ASN1Parser</A>&nbsp;parser)
                                      throws <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpException.html">SnmpException</A>,
                                             java.lang.ArrayIndexOutOfBoundsException</PRE>
<DL>
<DD>This method will decode the securityModel dependent security
 parameters. The msgSecurityParameters
 are securityModel dependent. i.e the engineID, boots
 time, auth and priv params used in USM may not
 be used in other securityModels.
 This method  will also have to decrypt if a message with privacy
 is received. This method is called by the securityModelEntry
 instance of Snmp3Mesage. While decoding, the API user will 
 have to set the security parameters in this securityModelEntry.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>msg</CODE> - The Snmp3Message instance.
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpException.html">SnmpException</A></CODE> - If the security parameters could not be 
 decoded properly.
<DD><CODE>java.lang.ArrayIndexOutOfBoundsException</CODE> - If an unrecognized 
 snmp message</DL>
</DD>
</DL>
<HR>

<A NAME="processEncodedMsg(com.adventnet.snmp.snmp2.Snmp3Message, com.adventnet.snmp.snmp2.ASN1Parser)"><!-- --></A><H3>
processEncodedMsg</H3>
<PRE>
public abstract void <B>processEncodedMsg</B>(<A HREF="../../../../com/adventnet/snmp/snmp2/Snmp3Message.html">Snmp3Message</A>&nbsp;msg,
                                       <A HREF="../../../../com/adventnet/snmp/snmp2/ASN1Parser.html">ASN1Parser</A>&nbsp;parser)</PRE>
<DL>
<DD>This method is called after encoding the message version. It is 
 useful when the API user needs to calculate the digest over the
 message. Eg. in the USM, the message authentication parameters
 (authParams) need to be calculated over the entire message.
 This method is called on the SecurityModelEntry instance of 
 Snmp3Mesage.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>msg</CODE> - Snmp3Messgage instance.</DL>
</DD>
</DL>
<HR>

<A NAME="encrypt(byte[], int, byte[], int, byte[])"><!-- --></A><H3>
encrypt</H3>
<PRE>
public abstract int <B>encrypt</B>(byte[]&nbsp;data,
                            int&nbsp;spaceLeft,
                            byte[]&nbsp;key,
                            int&nbsp;protocol,
                            byte[]&nbsp;privParams)
                     throws <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpException.html">SnmpException</A></PRE>
<DL>
<DD>This method is called to encrypt the data.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>data</CODE> - The data to be encrypt.<DD><CODE>key</CODE> - The key value used in encryption.<DD><CODE>protocol</CODE> - The protocol used for encryption.<DD><CODE>privParams</CODE> - The privacy params used in encryption.
<DD><CODE><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpException.html">SnmpException</A></CODE></DL>
</DD>
</DL>
<HR>

<A NAME="decrypt(byte[], int, byte[], int, byte[])"><!-- --></A><H3>
decrypt</H3>
<PRE>
public abstract byte[] <B>decrypt</B>(byte[]&nbsp;data,
                               int&nbsp;offset,
                               byte[]&nbsp;key,
                               int&nbsp;protocol,
                               byte[]&nbsp;privParams)</PRE>
<DL>
<DD>This method is called to decrypt the data.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>data</CODE> - The data to be decrypt.<DD><CODE>offset</CODE> - The offset value to be used in decrypt.<DD><CODE>key</CODE> - The key value to be used in decryption.<DD><CODE>protocol</CODE> - The protocol used for decryption.<DD><CODE>privParams</CODE> - The privacy params used in decryption.
<DT><B>Returns:</B><DD>data The decrypted data.</DL>
</DD>
</DL>
<HR>

<A NAME="init(com.adventnet.snmp.snmp2.SnmpSession, com.adventnet.snmp.snmp2.ProtocolOptions)"><!-- --></A><H3>
init</H3>
<PRE>
public abstract void <B>init</B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html">SnmpSession</A>&nbsp;session,
                          <A HREF="../../../../com/adventnet/snmp/snmp2/ProtocolOptions.html">ProtocolOptions</A>&nbsp;po)
                   throws <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpException.html">SnmpException</A></PRE>
<DL>
<DD><DL>

<DD><CODE><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpException.html">SnmpException</A></CODE></DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>

<!-- ========== START OF NAVBAR ========== -->
<A NAME="navbar_bottom"><!-- --></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0">
<TR>
<TD COLSPAN=3 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../../com/adventnet/snmp/snmp2/SASProtocolOptions.html"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../../com/adventnet/snmp/snmp2/SecurityModelTable.html"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../index.html" TARGET="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="SecurityModelEntry.html" TARGET="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;
<SCRIPT>
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
<A HREF="../../../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>
</NOSCRIPT>
</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<!-- =========== END OF NAVBAR =========== -->

<HR>
Copyright (c)AdventNet Inc., 1996-2006
</BODY>
</HTML>
