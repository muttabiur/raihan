<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN""http://www.w3.org/TR/REC-html40/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc on Tue Nov 07 19:59:02 IST 2006 -->
<TITLE>
ASN1Parser (AdventNet)
</TITLE>
<LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../stylesheet.css" TITLE="Style">
</HEAD>
<SCRIPT>
function asd()
{
parent.document.title="ASN1Parser (AdventNet)";
}
</SCRIPT>
<BODY BGCOLOR="white" onload="asd();">

<!-- ========== START OF NAVBAR ========== -->
<A NAME="navbar_top"><!-- --></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0">
<TR>
<TD COLSPAN=3 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../../com/adventnet/snmp/snmp2/ACMProvider.html"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../../com/adventnet/snmp/snmp2/SASAppletStub.html"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../index.html" TARGET="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="ASN1Parser.html" TARGET="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;
<SCRIPT>
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
<A HREF="../../../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>
</NOSCRIPT>
</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<!-- =========== END OF NAVBAR =========== -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
<FONT SIZE="-1">
com.adventnet.snmp.snmp2</FONT>
<BR>
Class  ASN1Parser</H2>
<PRE>
java.lang.Object
  |
  +--<B>com.adventnet.snmp.snmp2.ASN1Parser</B>
</PRE>
<DL>
<DT><B>All Implemented Interfaces:</B> <DD>java.io.Serializable</DD>
</DL>
<HR>
<DL>
<DT>public class <B>ASN1Parser</B><DT>extends java.lang.Object<DT>implements java.io.Serializable</DL>

<P>
Implements the ASN1Parser that contains the decode and encode methods.
  You need to instantiate this class to decode/encode an SNMP message.
  <p>
  An instance of the ASN1Parser is instantiated when a SNMP message is
  created. Each instance of the SNMP message consists of an SnmpPDU and
  an ASN1Parser. The ASN1Parser keeps track of the state how far
  a message is decoded.
  <p>
<P>

<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpMessage.html"><CODE>and SnmpPDU</CODE></A>, 
<A HREF="../../../../serialized-form.html" TARGET="com.adventnet.snmp.snmp2.ASN1Parser">Serialized Form</A></DL>
<HR>

<P>
<!-- ======== NESTED CLASS SUMMARY ======== -->


<!-- =========== FIELD SUMMARY =========== -->


<!-- ======== CONSTRUCTOR SUMMARY ======== -->

<A NAME="constructor_summary"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Constructor Summary</B></FONT></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/ASN1Parser.html#ASN1Parser()">ASN1Parser</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This constructor is used by the caller while preparing a message
 that will be sent to the SNMP peer.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/ASN1Parser.html#ASN1Parser(byte[])">ASN1Parser</A></B>(byte[]&nbsp;msg)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This constructor is used by the caller while decoding a received
 SNMP message from the peer</TD>
</TR>
</TABLE>
&nbsp;
<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Method Summary</B></FONT></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/ASN1Parser.html#decodeInteger()">decodeInteger</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Decodes an ASN.1 Integer
 Only the least significant 4 bytes are retained</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;long</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/ASN1Parser.html#decodeInteger64()">decodeInteger64</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Decodes an ASN.1 Integer
 Only the least significant 8 bytes are retained</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/ASN1Parser.html#decodeLength()">decodeLength</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Decodes an ASN.1 length field of an SNMP packet.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;long[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/ASN1Parser.html#decodeLong()">decodeLong</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Decodes an ASN.1 Long
 Only the least significant 8 bytes are retained</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;byte[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/ASN1Parser.html#decodeOctetString()">decodeOctetString</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Decodes an ASN.1 Octet string.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/ASN1Parser.html#decodeOID()">decodeOID</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Decodes an ASN.1 Object Identifier.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/ASN1Parser.html#decodeVarBindList(java.util.Vector)">decodeVarBindList</A></B>(java.util.Vector&nbsp;variables)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/ASN1Parser.html#decrypt(byte[], byte[], int, com.adventnet.snmp.snmp2.SecurityModelEntry)">decrypt</A></B>(byte[]&nbsp;key,
        byte[]&nbsp;privParms,
        int&nbsp;protocol,
        <A HREF="../../../../com/adventnet/snmp/snmp2/SecurityModelEntry.html">SecurityModelEntry</A>&nbsp;utils)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Decrypts the data.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/ASN1Parser.html#encodeCommand(byte)">encodeCommand</A></B>(byte&nbsp;command)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Encodes the command.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/ASN1Parser.html#encodeEnterprise(com.adventnet.snmp.snmp2.SnmpOID)">encodeEnterprise</A></B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpOID.html">SnmpOID</A>&nbsp;enterprise)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Encodes the enterprise.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/ASN1Parser.html#encodeInt(int)">encodeInt</A></B>(int&nbsp;value)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Encodes the data type int.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/ASN1Parser.html#encodeInteger(long)">encodeInteger</A></B>(long&nbsp;value)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Encodes the data type int.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/ASN1Parser.html#encodeIPAddress(com.adventnet.snmp.snmp2.SnmpString)">encodeIPAddress</A></B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpString.html">SnmpString</A>&nbsp;addr)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Encodes the IPAddress.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/ASN1Parser.html#encodeOctets(byte[], int)">encodeOctets</A></B>(byte[]&nbsp;buf,
             int&nbsp;length)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Encodes the octets specified.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/ASN1Parser.html#encodeSequence()">encodeSequence</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method encodes the sequence.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/ASN1Parser.html#encodeSequence(byte)">encodeSequence</A></B>(byte&nbsp;type)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method encodes the sequence.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/ASN1Parser.html#encodeSequence(int)">encodeSequence</A></B>(int&nbsp;length)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method encodes the sequence.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/ASN1Parser.html#encodeSequence(int, byte)">encodeSequence</A></B>(int&nbsp;length,
               byte&nbsp;type)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method encodes the sequence.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/ASN1Parser.html#encodeString(java.lang.String)">encodeString</A></B>(java.lang.String&nbsp;str)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Encodes the data type string.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/ASN1Parser.html#encodeUInt(int)">encodeUInt</A></B>(int&nbsp;value)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Encodes the data type unsigned int.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/ASN1Parser.html#encodeVarBindList(java.util.Vector)">encodeVarBindList</A></B>(java.util.Vector&nbsp;variables)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Encodes the VarBindList.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/ASN1Parser.html#encrypt(byte[], byte[], int, com.adventnet.snmp.snmp2.SecurityModelEntry)">encrypt</A></B>(byte[]&nbsp;key,
        byte[]&nbsp;privParms,
        int&nbsp;protocol,
        <A HREF="../../../../com/adventnet/snmp/snmp2/SecurityModelEntry.html">SecurityModelEntry</A>&nbsp;utils)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Encrypts the data.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/ASN1Parser.html#getBookMark()">getBookMark</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method returns the bookmark value.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;byte[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/ASN1Parser.html#getData()">getData</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the data.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/ASN1Parser.html#getIndex()">getIndex</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the message index value.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/ASN1Parser.html#getPosition()">getPosition</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method returns the position in the buffer where the 
 the data will be encoded/decoded.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;byte[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/ASN1Parser.html#getReceivedData()">getReceivedData</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the data.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;byte</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/ASN1Parser.html#getTag()">getTag</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method is used to get the tag from a received SNMP message.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/ASN1Parser.html#isInteger()">isInteger</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method is used to check whether the tag is an integer.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/ASN1Parser.html#isIPAddress()">isIPAddress</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method is used to check whether the tag is an IP address.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/ASN1Parser.html#isMessageSequence()">isMessageSequence</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method is used to check whether the tag is a message sequence.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/ASN1Parser.html#isOctetString()">isOctetString</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method is used to check whether the tag is an octet string.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/ASN1Parser.html#isOID()">isOID</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method is used to check whether the tag is an OID.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/ASN1Parser.html#isTimeTicks()">isTimeTicks</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method is used to check whether the tag is a TimeTicks.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/ASN1Parser.html#setBookMark()">setBookMark</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method sets the bookmark.</TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TD><B>Methods inherited from class java.lang.Object</B></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</CODE></TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ============ FIELD DETAIL =========== -->


<!-- ========= CONSTRUCTOR DETAIL ======== -->

<A NAME="constructor_detail"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=1><FONT SIZE="+2">
<B>Constructor Detail</B></FONT></TD>
</TR>
</TABLE>

<A NAME="ASN1Parser()"><!-- --></A><H3>
ASN1Parser</H3>
<PRE>
public <B>ASN1Parser</B>()</PRE>
<DL>
<DD>This constructor is used by the caller while preparing a message
 that will be sent to the SNMP peer.
<P>
</DL>
<HR>

<A NAME="ASN1Parser(byte[])"><!-- --></A><H3>
ASN1Parser</H3>
<PRE>
public <B>ASN1Parser</B>(byte[]&nbsp;msg)</PRE>
<DL>
<DD>This constructor is used by the caller while decoding a received
 SNMP message from the peer
<P>
</DL>

<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=1><FONT SIZE="+2">
<B>Method Detail</B></FONT></TD>
</TR>
</TABLE>

<A NAME="decodeLength()"><!-- --></A><H3>
decodeLength</H3>
<PRE>
public int <B>decodeLength</B>()
                 throws java.lang.ArrayIndexOutOfBoundsException</PRE>
<DL>
<DD>Decodes an ASN.1 length field of an SNMP packet. The length field can
 have a minimum of 1 to a maximum of 4 bytes. In terms of decimal numbers
 it is from 0 to 2^31-1.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.lang.ArrayIndexOutOfBoundsException</CODE> - When there is insufficient space in buffer.</DL>
</DD>
</DL>
<HR>

<A NAME="decodeInteger()"><!-- --></A><H3>
decodeInteger</H3>
<PRE>
public int <B>decodeInteger</B>()
                  throws java.lang.ArrayIndexOutOfBoundsException</PRE>
<DL>
<DD>Decodes an ASN.1 Integer
 Only the least significant 4 bytes are retained
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.lang.ArrayIndexOutOfBoundsException</CODE> - When there is insufficient space in buffer.</DL>
</DD>
</DL>
<HR>

<A NAME="decodeInteger64()"><!-- --></A><H3>
decodeInteger64</H3>
<PRE>
public long <B>decodeInteger64</B>()
                     throws java.lang.ArrayIndexOutOfBoundsException</PRE>
<DL>
<DD>Decodes an ASN.1 Integer
 Only the least significant 8 bytes are retained
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.lang.ArrayIndexOutOfBoundsException</CODE> - When there is insufficient space in buffer.</DL>
</DD>
</DL>
<HR>

<A NAME="decodeLong()"><!-- --></A><H3>
decodeLong</H3>
<PRE>
public long[] <B>decodeLong</B>()
                  throws java.lang.ArrayIndexOutOfBoundsException</PRE>
<DL>
<DD>Decodes an ASN.1 Long
 Only the least significant 8 bytes are retained
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.lang.ArrayIndexOutOfBoundsException</CODE> - When there is insufficient space in buffer.</DL>
</DD>
</DL>
<HR>

<A NAME="decodeOctetString()"><!-- --></A><H3>
decodeOctetString</H3>
<PRE>
public byte[] <B>decodeOctetString</B>()
                         throws java.lang.ArrayIndexOutOfBoundsException</PRE>
<DL>
<DD>Decodes an ASN.1 Octet string.
 Only the primitive encoding is supported.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.lang.ArrayIndexOutOfBoundsException</CODE> - When there is insufficient space in buffer.</DL>
</DD>
</DL>
<HR>

<A NAME="decodeOID()"><!-- --></A><H3>
decodeOID</H3>
<PRE>
public int[] <B>decodeOID</B>()
                throws java.lang.ArrayIndexOutOfBoundsException</PRE>
<DL>
<DD>Decodes an ASN.1 Object Identifier.
 SNMP limits OID length to 128 max.
 SNMP limits sub-identifiers to 32 bits.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.lang.ArrayIndexOutOfBoundsException</CODE> - When there is insufficient space in buffer.</DL>
</DD>
</DL>
<HR>

<A NAME="isMessageSequence()"><!-- --></A><H3>
isMessageSequence</H3>
<PRE>
public boolean <B>isMessageSequence</B>()</PRE>
<DL>
<DD>This method is used to check whether the tag is a message sequence.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="isInteger()"><!-- --></A><H3>
isInteger</H3>
<PRE>
public boolean <B>isInteger</B>()</PRE>
<DL>
<DD>This method is used to check whether the tag is an integer.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="isOctetString()"><!-- --></A><H3>
isOctetString</H3>
<PRE>
public boolean <B>isOctetString</B>()</PRE>
<DL>
<DD>This method is used to check whether the tag is an octet string.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="isOID()"><!-- --></A><H3>
isOID</H3>
<PRE>
public boolean <B>isOID</B>()</PRE>
<DL>
<DD>This method is used to check whether the tag is an OID.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="isIPAddress()"><!-- --></A><H3>
isIPAddress</H3>
<PRE>
public boolean <B>isIPAddress</B>()</PRE>
<DL>
<DD>This method is used to check whether the tag is an IP address.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="isTimeTicks()"><!-- --></A><H3>
isTimeTicks</H3>
<PRE>
public boolean <B>isTimeTicks</B>()</PRE>
<DL>
<DD>This method is used to check whether the tag is a TimeTicks.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getTag()"><!-- --></A><H3>
getTag</H3>
<PRE>
public byte <B>getTag</B>()</PRE>
<DL>
<DD>This method is used to get the tag from a received SNMP message.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="decodeVarBindList(java.util.Vector)"><!-- --></A><H3>
decodeVarBindList</H3>
<PRE>
public void <B>decodeVarBindList</B>(java.util.Vector&nbsp;variables)
                       throws <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpException.html">SnmpException</A></PRE>
<DL>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpException.html">SnmpException</A></CODE> - is thrown whenever an error occurs.</DL>
</DD>
</DL>
<HR>

<A NAME="encodeSequence()"><!-- --></A><H3>
encodeSequence</H3>
<PRE>
public void <B>encodeSequence</B>()</PRE>
<DL>
<DD>This method encodes the sequence.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setBookMark()"><!-- --></A><H3>
setBookMark</H3>
<PRE>
public void <B>setBookMark</B>()</PRE>
<DL>
<DD>This method sets the bookmark. A bookmark is used to deal with 
 some encodings.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getBookMark()"><!-- --></A><H3>
getBookMark</H3>
<PRE>
public int <B>getBookMark</B>()</PRE>
<DL>
<DD>This method returns the bookmark value. A bookmark is used to deal with
 some encodings.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the bookmark value.</DL>
</DD>
</DL>
<HR>

<A NAME="getPosition()"><!-- --></A><H3>
getPosition</H3>
<PRE>
public int <B>getPosition</B>()</PRE>
<DL>
<DD>This method returns the position in the buffer where the 
 the data will be encoded/decoded.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the position in the buffer where the data will be next
 encoded/decoded.</DL>
</DD>
</DL>
<HR>

<A NAME="getIndex()"><!-- --></A><H3>
getIndex</H3>
<PRE>
public int <B>getIndex</B>()</PRE>
<DL>
<DD>Returns the message index value. Message index is the offset
 value in the buffer while decoding messages.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the index value.</DL>
</DD>
</DL>
<HR>

<A NAME="encodeSequence(byte)"><!-- --></A><H3>
encodeSequence</H3>
<PRE>
public void <B>encodeSequence</B>(byte&nbsp;type)</PRE>
<DL>
<DD>This method encodes the sequence.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>type</CODE> - the datatype</DL>
</DD>
</DL>
<HR>

<A NAME="encodeSequence(int)"><!-- --></A><H3>
encodeSequence</H3>
<PRE>
public void <B>encodeSequence</B>(int&nbsp;length)</PRE>
<DL>
<DD>This method encodes the sequence.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="encodeSequence(int, byte)"><!-- --></A><H3>
encodeSequence</H3>
<PRE>
public void <B>encodeSequence</B>(int&nbsp;length,
                           byte&nbsp;type)</PRE>
<DL>
<DD>This method encodes the sequence.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>type</CODE> - the datatype<DD><CODE>length</CODE> - the length of data.</DL>
</DD>
</DL>
<HR>

<A NAME="encodeInt(int)"><!-- --></A><H3>
encodeInt</H3>
<PRE>
public void <B>encodeInt</B>(int&nbsp;value)</PRE>
<DL>
<DD>Encodes the data type int.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>value</CODE> - the int value.</DL>
</DD>
</DL>
<HR>

<A NAME="encodeInteger(long)"><!-- --></A><H3>
encodeInteger</H3>
<PRE>
public void <B>encodeInteger</B>(long&nbsp;value)</PRE>
<DL>
<DD>Encodes the data type int.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>value</CODE> - the SNMP int value represent as java long.</DL>
</DD>
</DL>
<HR>

<A NAME="encodeUInt(int)"><!-- --></A><H3>
encodeUInt</H3>
<PRE>
public void <B>encodeUInt</B>(int&nbsp;value)</PRE>
<DL>
<DD>Encodes the data type unsigned int.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>value</CODE> - the unsigned int value.</DL>
</DD>
</DL>
<HR>

<A NAME="encodeString(java.lang.String)"><!-- --></A><H3>
encodeString</H3>
<PRE>
public void <B>encodeString</B>(java.lang.String&nbsp;str)</PRE>
<DL>
<DD>Encodes the data type string.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>str</CODE> - the string value.</DL>
</DD>
</DL>
<HR>

<A NAME="encodeOctets(byte[], int)"><!-- --></A><H3>
encodeOctets</H3>
<PRE>
public void <B>encodeOctets</B>(byte[]&nbsp;buf,
                         int&nbsp;length)</PRE>
<DL>
<DD>Encodes the octets specified. The data type is String.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>buf</CODE> - the value to be encoded.<DD><CODE>length</CODE> - the length of the value to be encoded.</DL>
</DD>
</DL>
<HR>

<A NAME="encodeIPAddress(com.adventnet.snmp.snmp2.SnmpString)"><!-- --></A><H3>
encodeIPAddress</H3>
<PRE>
public void <B>encodeIPAddress</B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpString.html">SnmpString</A>&nbsp;addr)</PRE>
<DL>
<DD>Encodes the IPAddress.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>addr</CODE> - The value to be encoded.</DL>
</DD>
</DL>
<HR>

<A NAME="encodeEnterprise(com.adventnet.snmp.snmp2.SnmpOID)"><!-- --></A><H3>
encodeEnterprise</H3>
<PRE>
public void <B>encodeEnterprise</B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpOID.html">SnmpOID</A>&nbsp;enterprise)</PRE>
<DL>
<DD>Encodes the enterprise.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>enterprise</CODE> - The value to be encoded.</DL>
</DD>
</DL>
<HR>

<A NAME="encodeCommand(byte)"><!-- --></A><H3>
encodeCommand</H3>
<PRE>
public void <B>encodeCommand</B>(byte&nbsp;command)</PRE>
<DL>
<DD>Encodes the command.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>command</CODE> - The value to be encoded.</DL>
</DD>
</DL>
<HR>

<A NAME="encodeVarBindList(java.util.Vector)"><!-- --></A><H3>
encodeVarBindList</H3>
<PRE>
public void <B>encodeVarBindList</B>(java.util.Vector&nbsp;variables)</PRE>
<DL>
<DD>Encodes the VarBindList.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>variables</CODE> - The value to be encoded.</DL>
</DD>
</DL>
<HR>

<A NAME="encrypt(byte[], byte[], int, com.adventnet.snmp.snmp2.SecurityModelEntry)"><!-- --></A><H3>
encrypt</H3>
<PRE>
public void <B>encrypt</B>(byte[]&nbsp;key,
                    byte[]&nbsp;privParms,
                    int&nbsp;protocol,
                    <A HREF="../../../../com/adventnet/snmp/snmp2/SecurityModelEntry.html">SecurityModelEntry</A>&nbsp;utils)
             throws <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpException.html">SnmpException</A></PRE>
<DL>
<DD>Encrypts the data.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>key</CODE> - The key value used in encryption.<DD><CODE>privParms</CODE> - The privacy params used in encryption.<DD><CODE>protocol</CODE> - The protocol used in encryption.<DD><CODE>utils</CODE> - The SecurityModelEntry implementation instance.
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpException.html">SnmpException</A></CODE> - if errors were encountered while encryption.</DL>
</DD>
</DL>
<HR>

<A NAME="decrypt(byte[], byte[], int, com.adventnet.snmp.snmp2.SecurityModelEntry)"><!-- --></A><H3>
decrypt</H3>
<PRE>
public void <B>decrypt</B>(byte[]&nbsp;key,
                    byte[]&nbsp;privParms,
                    int&nbsp;protocol,
                    <A HREF="../../../../com/adventnet/snmp/snmp2/SecurityModelEntry.html">SecurityModelEntry</A>&nbsp;utils)
             throws <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpException.html">SnmpException</A></PRE>
<DL>
<DD>Decrypts the data.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>key</CODE> - The key value used in decryption.<DD><CODE>privParms</CODE> - The privacy params used in decryption.<DD><CODE>protocol</CODE> - The protocol used in decryption.<DD><CODE>utils</CODE> - The SecurityModelEntry implementation instance.
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpException.html">SnmpException</A></CODE> - if errors were encountered while decryption.</DL>
</DD>
</DL>
<HR>

<A NAME="getReceivedData()"><!-- --></A><H3>
getReceivedData</H3>
<PRE>
public byte[] <B>getReceivedData</B>()</PRE>
<DL>
<DD>Returns the data. If decrypt method is called, it retruns the
 non decrypted data.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The non decrypted data.</DL>
</DD>
</DL>
<HR>

<A NAME="getData()"><!-- --></A><H3>
getData</H3>
<PRE>
public byte[] <B>getData</B>()</PRE>
<DL>
<DD>Returns the data. If decrypt method is already called, then it
 returns the decrypted data.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the data.</DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>

<!-- ========== START OF NAVBAR ========== -->
<A NAME="navbar_bottom"><!-- --></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0">
<TR>
<TD COLSPAN=3 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../../com/adventnet/snmp/snmp2/ACMProvider.html"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../../com/adventnet/snmp/snmp2/SASAppletStub.html"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../index.html" TARGET="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="ASN1Parser.html" TARGET="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;
<SCRIPT>
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
<A HREF="../../../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>
</NOSCRIPT>
</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<!-- =========== END OF NAVBAR =========== -->

<HR>
Copyright (c)AdventNet Inc., 1996-2006
</BODY>
</HTML>
