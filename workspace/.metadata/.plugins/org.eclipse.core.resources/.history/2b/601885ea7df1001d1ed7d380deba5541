<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN""http://www.w3.org/TR/REC-html40/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc on Thu Jan 29 17:18:53 IST 2009 -->
<TITLE>
LeafSyntax (AdventNet)
</TITLE>
<LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../stylesheet.css" TITLE="Style">
</HEAD>
<SCRIPT>
function asd()
{
parent.document.title="LeafSyntax (AdventNet)";
}
</SCRIPT>
<BODY BGCOLOR="white" onload="asd();">

<!-- ========== START OF NAVBAR ========== -->
<A NAME="navbar_top"><!-- --></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0">
<TR>
<TD COLSPAN=3 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../../com/adventnet/snmp/mibs/ErrorObject.html"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../../com/adventnet/snmp/mibs/MibErrorMessages.html"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../index.html" TARGET="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="LeafSyntax.html" TARGET="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;
<SCRIPT>
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
<A HREF="../../../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>
</NOSCRIPT>
</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;CONSTR&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;CONSTR&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<!-- =========== END OF NAVBAR =========== -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
<FONT SIZE="-1">
com.adventnet.snmp.mibs</FONT>
<BR>
Class  LeafSyntax</H2>
<PRE>
java.lang.Object
  |
  +--<B>com.adventnet.snmp.mibs.LeafSyntax</B>
</PRE>
<DL>
<DT><B>All Implemented Interfaces:</B> <DD>java.lang.Cloneable, com.adventnet.snmp.mibs.mibparser.MIBConstants, java.io.Serializable</DD>
</DL>
<DL>
<DT><B>Direct Known Subclasses:</B> <DD><A HREF="../../../../com/adventnet/snmp/mibs/MibTC.html">MibTC</A></DD>
</DL>
<HR>
<DL>
<DT>public class <B>LeafSyntax</B><DT>extends java.lang.Object<DT>implements java.io.Serializable, com.adventnet.snmp.mibs.mibparser.MIBConstants, java.lang.Cloneable</DL>

<P>
This class represents the syntax of a leaf node in a MIB module.
 If the appropriate MIB is loaded, the LeafSyntax instance for 
 an ObjectID could be obtained from the MibOperations object using 
 the following method.  
 <pre>
	mibOperations.getLeafSyntax(SnmpOID);
 </pre>
 The LeafSyntax instance for a MIB Node can be obtained from the 
 MibNode instance using the following method.
 <pre>
	mibNode.getSyntax();
 </pre>
 <p>
 Once you have the LeafSyntax instance for a node, you can 
 create new SNMP variables with the given syntax, check syntax 
 rules on variables, and get more information on the syntax.  
 <p>
<P>

<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../../serialized-form.html" TARGET="com.adventnet.snmp.mibs.LeafSyntax">Serialized Form</A></DL>
<HR>

<P>
<!-- ======== NESTED CLASS SUMMARY ======== -->


<!-- =========== FIELD SUMMARY =========== -->

<A NAME="field_summary"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Field Summary</B></FONT></TD>
</TR>
</TABLE>
&nbsp;<A NAME="fields_inherited_from_class_com.adventnet.snmp.mibs.mibparser.MIBConstants"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TD><B>Fields inherited from interface com.adventnet.snmp.mibs.mibparser.MIBConstants</B></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>ACCESS_ACCESSIBLE_FOR_NOTIFY, ACCESS_NOT_ACCESSIBLE, ACCESS_NOT_IMPLEMENTED, ACCESS_READ_CREATE, ACCESS_READ_ONLY, ACCESS_READ_WRITE, ACCESS_WRITE_ONLY, accessStr, AGENT_CAPABILITIES, alphaStr, BITSTRING, COUNTER, COUNTER32, COUNTER64, GAUGE, GAUGE32, INTEGER, INTEGER32, IPADDRESS, macroStr, MODULE_COMPLIANCE, MODULE_IDENTITY, NETWORKADDRESS, NOTIFICATION_GROUP, NOTIFICATION_TYPE, NULL, numericStr, OBJECT_GROUP, OBJECT_IDENTIFIER, OBJECT_IDENTITY, OBJECT_TYPE, OCTETSTRING, OPAQUE, SEQUENCE, STATUS_CURRENT, STATUS_DEPRECATED, STATUS_MANDATORY, STATUS_OBSOLETE, STATUS_OPTIONAL, statusStr, TEXTUAL_CONVENTION, TIMETICKS, TRAP_TYPE, UNSIGNED32</CODE></TD>
</TR>
</TABLE>
&nbsp;
<!-- ======== CONSTRUCTOR SUMMARY ======== -->


<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Method Summary</B></FONT></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/LeafSyntax.html#checkValue(int)">checkValue</A></B>(int&nbsp;i)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Checks whether the integer value argument is in the 
 defined range for this syntax definition.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/LeafSyntax.html#checkValue(java.lang.String)">checkValue</A></B>(java.lang.String&nbsp;s)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Checks whether the String value argument is in the 
 defined range for this syntax definition.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.Object</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/LeafSyntax.html#clone()">clone</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates and returns a copy of this object.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpVar.html">SnmpVar</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/LeafSyntax.html#createVariable(java.lang.String)">createVariable</A></B>(java.lang.String&nbsp;value)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Instantiates and returns an SnmpVar of type specified by this Syntax.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpVar.html">SnmpVar</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/LeafSyntax.html#createVariable(java.lang.String, java.lang.String)">createVariable</A></B>(java.lang.String&nbsp;value,
               java.lang.String&nbsp;enc)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Instantiates and returns an SnmpVar of type specified by this Syntax
 with respect to the encoding scheme.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.util.Vector</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/LeafSyntax.html#decodeInstanceString(java.lang.String, java.util.Vector)">decodeInstanceString</A></B>(java.lang.String&nbsp;instance,
                     java.util.Vector&nbsp;indexMibNodes)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Decodes an instance string based on the instance and indexMibNodes.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/LeafSyntax.html#encodeInstanceString(java.util.Vector, java.util.Vector)">encodeInstanceString</A></B>(java.util.Vector&nbsp;indexVector,
                     java.util.Vector&nbsp;indexMibNodes)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Encodes an instance string based on the indexVector and indexMibNodes.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/LeafSyntax.html#getDescription()">getDescription</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the description of the syntax.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/LeafSyntax.html#getEnumint()">getEnumint</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the values for each of the enumerated integer values
 </TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/LeafSyntax.html#getEnumlabels()">getEnumlabels</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gives all the labels present for an enumerated syntax.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/LeafSyntax.html#getEquivname()">getEquivname</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the equivalent SNMP type name.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/LeafSyntax.html#getInt(java.lang.String)">getInt</A></B>(java.lang.String&nbsp;s)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the int value of the label argument.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/LeafSyntax.html#getLabel(int)">getLabel</A></B>(int&nbsp;val)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the label corresponding to the integer value argument.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;long</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/LeafSyntax.html#getMax()">getMax</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gives the maximum value allowed for the syntaxes.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;long</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/LeafSyntax.html#getMin()">getMin</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gives the minimum value allowed for all the syntaxes.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/LeafSyntax.html#getName()">getName</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the name of this LeafSyntax instance.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/LeafSyntax.html#getRangeItems()">getRangeItems</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the range constraints available for this syntax.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/LeafSyntax.html#getSize()">getSize</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gives the maximum size restriction for this syntax.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../com/adventnet/snmp/mibs/LeafSyntax.html">LeafSyntax</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/LeafSyntax.html#getSyntax()">getSyntax</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gives the syntax for this leafSyntax Object.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;byte</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/LeafSyntax.html#getType()">getType</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Retrieves the SNMP ASN.1 tag value for this syntax.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/LeafSyntax.html#isConstrained()">isConstrained</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Checks whether the syntax has some range/size limitations explicitly 
 defined in the MIB.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/LeafSyntax.html#isEnumerated()">isEnumerated</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Checks whether the syntax is enumerated.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/LeafSyntax.html#isRanged()">isRanged</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Checks to see if this syntax has size or value limitations.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/LeafSyntax.html#toString()">toString</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the syntax name for display purposes.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/LeafSyntax.html#toTagString()">toTagString</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gives the detailed description of this syntax.</TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TD><B>Methods inherited from class java.lang.Object</B></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait</CODE></TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ============ FIELD DETAIL =========== -->


<!-- ========= CONSTRUCTOR DETAIL ======== -->


<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=1><FONT SIZE="+2">
<B>Method Detail</B></FONT></TD>
</TR>
</TABLE>

<A NAME="getName()"><!-- --></A><H3>
getName</H3>
<PRE>
public java.lang.String <B>getName</B>()</PRE>
<DL>
<DD>Returns the name of this LeafSyntax instance.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the syntax name</DL>
</DD>
</DL>
<HR>

<A NAME="getDescription()"><!-- --></A><H3>
getDescription</H3>
<PRE>
public java.lang.String <B>getDescription</B>()</PRE>
<DL>
<DD>Returns the description of the syntax. 
 e.g. "OCTET STRING (SIZE (0..255))"
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getType()"><!-- --></A><H3>
getType</H3>
<PRE>
public byte <B>getType</B>()</PRE>
<DL>
<DD>Retrieves the SNMP ASN.1 tag value for this syntax.
 syntax                        tagvalue    equivalent SnmpAPI types
 INTEGER/Integer32                0x02          SnmpAPI.INTEGER
 OCTET STRING/BITS                0x04           SnmpAPI.STRING
 NULL                             0x05           SnmpAPI.NULL
 OBJECT IDENTIFIER                0x06           SnmpAPI.OBJID
 IpAddress                        0x40           SnmpAPI.IPADDRESS
 NetworkAddress                   0x40           SnmpAPI.NETWORKADDRESS
 Counter/Counter32                0x41           SnmpAPI.COUNTER
 Unsigned32                       0x42           SnmpAPI.UNSIGNED32
 Gauge/Gauge32                    0x42           SnmpAPI.GAUGE
 TimeTicks                        0x43           SnmpAPI.TIMETICKS
 Opaque                           0x44           SnmpAPI.OPAQUE
 Counter64                        0x46           SnmpAPI.COUNTER64
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the type value of this syntax in bytes</DL>
</DD>
</DL>
<HR>

<A NAME="getEquivname()"><!-- --></A><H3>
getEquivname</H3>
<PRE>
public java.lang.String <B>getEquivname</B>()</PRE>
<DL>
<DD>Gets the equivalent SNMP type name.
 Using this method we can get the base datatype of a TC.
 <p>
 In case of MultiLevel-TC, returns the syntax of base TC.<br>
 For example, if the syntax of TC "LevelB" is "LevelA" 
 whose syntax is OCTET STRING, <br>then this method will 
 return OCTET STRING.<br>
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the base syntax as a String</DL>
</DD>
</DL>
<HR>

<A NAME="getEnumlabels()"><!-- --></A><H3>
getEnumlabels</H3>
<PRE>
public java.lang.String[] <B>getEnumlabels</B>()</PRE>
<DL>
<DD>Gives all the labels present for an enumerated syntax.
 <p>
 For example, if the syntax is INTEGER { up(1), down(2), testing(3) }
 <br>then the String array contain the following values <br>
 "up", "down" and "testing"
 <p>
 If you want to get a particular enumerated label, then you can 
 use the method getLabel(int).<br>
 The method getEnumint() can be used to get the enumerated values 
 available for an enumerated syntax.<br>
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>string array of the enumerated labels.<br>
 		   null, if not an enumerated integer.<DT><B>See Also:</B><DD><A HREF="../../../../com/adventnet/snmp/mibs/LeafSyntax.html#getLabel(int)"><CODE>getLabel(int)</CODE></A>, 
<A HREF="../../../../com/adventnet/snmp/mibs/LeafSyntax.html#getEnumint()"><CODE>getEnumint()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getEnumint()"><!-- --></A><H3>
getEnumint</H3>
<PRE>
public int[] <B>getEnumint</B>()</PRE>
<DL>
<DD>Gets the values for each of the enumerated integer values
 <p>
 For example, if the syntax is INTEGER { up(1), down(2), testing(3) }
 <br>then the integer array contain the following values <br>
 	'1', '2' and '3'
 <p>
 If you want to get a particular enumerated value, then you can use 
 the method  getInt(String).<br>
 The method getEnumlabels() can be used to get the enumerated labels 
 available for an enumerated syntax.<br>
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>integer array of enumerated integers.<br>
		   null, if the syntax is not enumerated.<DT><B>See Also:</B><DD><A HREF="../../../../com/adventnet/snmp/mibs/LeafSyntax.html#getInt(java.lang.String)"><CODE>getInt(java.lang.String)</CODE></A>, 
<CODE>#getEnumlables</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="getSize()"><!-- --></A><H3>
getSize</H3>
<PRE>
public int <B>getSize</B>()</PRE>
<DL>
<DD>Gives the maximum size restriction for this syntax.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the size restriction of the datatypes in bytes.<DT><B>See Also:</B><DD><A HREF="../../../../com/adventnet/snmp/mibs/LeafSyntax.html#getMin()"><CODE>getMin()</CODE></A>, 
<A HREF="../../../../com/adventnet/snmp/mibs/LeafSyntax.html#getMax()"><CODE>getMax()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getMin()"><!-- --></A><H3>
getMin</H3>
<PRE>
public long <B>getMin</B>()</PRE>
<DL>
<DD>Gives the minimum value allowed for all the syntaxes.
 <p>
 For the enumerated syntaxes, returns the minimum 
 of the enumerated values.<br>
 For example, if the syntax is INTEGER { up(1), down(2), testing(3) }
 this method will return 1.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the minimum value in bytes.<DT><B>See Also:</B><DD><A HREF="../../../../com/adventnet/snmp/mibs/LeafSyntax.html#getMax()"><CODE>getMax()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getMax()"><!-- --></A><H3>
getMax</H3>
<PRE>
public long <B>getMax</B>()</PRE>
<DL>
<DD>Gives the maximum value allowed for the syntaxes.
 <p>
 For the enumerated syntaxes, returns the maximum 
 of the enumerated values.<br>
 For example, if the syntax is INTEGER { up(1), down(2), testing(3) }
 this method will return 3.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the maximum value in bytes.<DT><B>See Also:</B><DD><A HREF="../../../../com/adventnet/snmp/mibs/LeafSyntax.html#getMin()"><CODE>getMin()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="createVariable(java.lang.String, java.lang.String)"><!-- --></A><H3>
createVariable</H3>
<PRE>
public <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpVar.html">SnmpVar</A> <B>createVariable</B>(java.lang.String&nbsp;value,
                              java.lang.String&nbsp;enc)
                       throws <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpException.html">SnmpException</A></PRE>
<DL>
<DD>Instantiates and returns an SnmpVar of type specified by this Syntax
 with respect to the encoding scheme. The SnmpVar object is initialized 
 to a value specified in the argument string.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>value</CODE> - the string representation of the value.<DD><CODE>enc</CODE> - the string for the encoding scheme to be used.
<DT><B>Returns:</B><DD>the SnmpVar instance for the value.
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpException.html">SnmpException</A></CODE> - is thrown on format errors.<DT><B>See Also:</B><DD><A HREF="../../../../com/adventnet/snmp/mibs/LeafSyntax.html#createVariable(java.lang.String)"><CODE>createVariable(String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="createVariable(java.lang.String)"><!-- --></A><H3>
createVariable</H3>
<PRE>
public <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpVar.html">SnmpVar</A> <B>createVariable</B>(java.lang.String&nbsp;value)
                       throws <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpException.html">SnmpException</A></PRE>
<DL>
<DD>Instantiates and returns an SnmpVar of type specified by this Syntax.
 The SnmpVar variable is initialized to a value specified in the 
 argument string.
 <p> 
 Depending on the ASN.1 tag value of this syntax, the corresponding
 SnmpVar object will be created.
 <p>

 OCTET STRING/BITS  SnmpString
 INTEGER/Integer32  SnmpInt
 Unsigned32         SnmpUnsignedInt
 Counter/Counter32  SnmpCounter
 Gauge/Gauge32      SnmpGauge
 Counter64          SnmpCounter64

 The input string we can give in Hex or binary format.

 In hex format, the value is enclosed within the single quotes 
 and endswith "h" or "H".<br> 
 for example, '64'h or'64'H
 <p>
 For the binary format, the value is enclosed with single quotes
 and endswith "b" or "B".
 for example, '01100100'b or '01100100'B
 The byte string can be set for the OCTET STRING, the value should
 be enclosed within the quotes and each octets should be separated 
 by colon.
 <p>
 For exaple, if we want to set the byte[] value to OCTET STRING object
 '0a:0b:0c:0d:0e:0f' then this value set as the byte array value.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>value</CODE> - the string representation of the value.
<DT><B>Returns:</B><DD>the SnmpVar instance for the value.
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpException.html">SnmpException</A></CODE> - is thrown on format errors.</DL>
</DD>
</DL>
<HR>

<A NAME="toString()"><!-- --></A><H3>
toString</H3>
<PRE>
public java.lang.String <B>toString</B>()</PRE>
<DL>
<DD>Returns the syntax name for display purposes.
 Same as the getName() method
<P>
<DD><DL>
<DT><B>Overrides:</B><DD><CODE>toString</CODE> in class <CODE>java.lang.Object</CODE></DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../../com/adventnet/snmp/mibs/LeafSyntax.html#getName()"><CODE>getName()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="toTagString()"><!-- --></A><H3>
toTagString</H3>
<PRE>
public java.lang.String <B>toTagString</B>()</PRE>
<DL>
<DD>Gives the detailed description of this syntax.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the string representation of the description
         of syntax. e.g. DisplayString (SIZE (0..255))</DL>
</DD>
</DL>
<HR>

<A NAME="getLabel(int)"><!-- --></A><H3>
getLabel</H3>
<PRE>
public java.lang.String <B>getLabel</B>(int&nbsp;val)</PRE>
<DL>
<DD>Gets the label corresponding to the integer value argument.
 <p>
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>val</CODE> - the integer value which ought to be one of the enumerations.
<DT><B>Returns:</B><DD>the string representing this value<br> 
         null if not an enumerated integer or if the value is not found.</DL>
</DD>
</DL>
<HR>

<A NAME="getInt(java.lang.String)"><!-- --></A><H3>
getInt</H3>
<PRE>
public int <B>getInt</B>(java.lang.String&nbsp;s)</PRE>
<DL>
<DD>Gets the int value of the label argument. 
 <p>
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>s</CODE> - the string value which should be one of the enumerations.
<DT><B>Returns:</B><DD>the integer corresponding to the label.<br>
         returns -1 if not found or if not an enumerated integer.</DL>
</DD>
</DL>
<HR>

<A NAME="checkValue(int)"><!-- --></A><H3>
checkValue</H3>
<PRE>
public boolean <B>checkValue</B>(int&nbsp;i)</PRE>
<DL>
<DD>Checks whether the integer value argument is in the 
 defined range for this syntax definition.
 <p>
 In case of enumerated syntax, if the input argument is
 any one of the enumerated value, then this method will
 return true.
 <p>
 For other syntaxes, if the value is between the maximum
 and minimum values or if it is one of the maximum and 
 minimum values, then this will return true.<br>
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>i</CODE> - the integer value.
<DT><B>Returns:</B><DD>true if it is in the enumeration list or
			if within max size limits(includes boundary values)<br>
			false otherwise.</DL>
</DD>
</DL>
<HR>

<A NAME="checkValue(java.lang.String)"><!-- --></A><H3>
checkValue</H3>
<PRE>
public boolean <B>checkValue</B>(java.lang.String&nbsp;s)</PRE>
<DL>
<DD>Checks whether the String value argument is in the 
 defined range for this syntax definition. 
 <p>
 NOTE : This method is supposed to be used for the enumerated
 syntax where the input is the any one of the enumerated label.
 When used for any other syntaxes, this method checks whether 
 the length of the input String argument exceeds the maximum 
 size of the syntax.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>s</CODE> - the string value.
<DT><B>Returns:</B><DD>true if in the enumeration list(if exists) or if 
		   the value is within max size limit for the syntax 
         string<br> false otherwise.</DL>
</DD>
</DL>
<HR>

<A NAME="isConstrained()"><!-- --></A><H3>
isConstrained</H3>
<PRE>
public boolean <B>isConstrained</B>()</PRE>
<DL>
<DD>Checks whether the syntax has some range/size limitations explicitly 
 defined in the MIB.
 <p>
 For example, if a node is defined with a syntax INTEGER, eventhough 
 it has a standard/default range (-2147483648 .. 2147483647), this 
 method will return false as there is no range constraints explicitly 
 imposed on the syntax in the MIB.<br>
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>true if the range restrictions is defined explicitly.<br>
		   false otherwise.</DL>
</DD>
</DL>
<HR>

<A NAME="isEnumerated()"><!-- --></A><H3>
isEnumerated</H3>
<PRE>
public boolean <B>isEnumerated</B>()</PRE>
<DL>
<DD>Checks whether the syntax is enumerated.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>true if the syntax contains the enum labels.<br>
 		   false otherwise.</DL>
</DD>
</DL>
<HR>

<A NAME="isRanged()"><!-- --></A><H3>
isRanged</H3>
<PRE>
public boolean <B>isRanged</B>()</PRE>
<DL>
<DD>Checks to see if this syntax has size or value limitations.
 <p>
 By default all the basic integer types have constraints on 
 their values in terms of numeric ranges and hence this method
 will return true for all the basic integer datatypes.<br>
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>true if the syntax has range restrictions.<br>
		   false  otherwise<DT><B>See Also:</B><DD><A HREF="../../../../com/adventnet/snmp/mibs/LeafSyntax.html#isEnumerated()"><CODE>isEnumerated()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="encodeInstanceString(java.util.Vector, java.util.Vector)"><!-- --></A><H3>
encodeInstanceString</H3>
<PRE>
public int[] <B>encodeInstanceString</B>(java.util.Vector&nbsp;indexVector,
                                  java.util.Vector&nbsp;indexMibNodes)
                           throws java.lang.NumberFormatException</PRE>
<DL>
<DD>Encodes an instance string based on the indexVector and indexMibNodes.
 <p>
 The instance int array should be concatenated to the oid int array to get 
 the complete oid. For example if the tcpConnTable has the following entry. 
 <p>
 <table BORDER COLS=5 WIDTH="100%">
 <tr>
 <td>tcpConnState</td>
 <td>tcpConnLocalAddress</td>
 <td>tcpConnLocalPort</td>
 <td>tcpConnRemAddress</td>
 <td>tcpConnRemPort</td>
 </tr>
 <tr>
 <td>established(5)</td>
 <td>128.253.154.64</td>
 <td>23</td>
 <td>128.253.154.3</td>
 <td>1111</td>
 </tr>
 </table>
 <p>
 In this case assuming you wish to obtain the instance corresponding to
 tcpConnRemAddress. The index for tcpConnTable and hence the indexNodes 
 vector will contain nodes corresponding to tcpConnLocalAddress,
 tcpConnLocalPort, tcpConnRemAddress and tcpConnRemPort in that order.
 The indexVector will contain the following SnmpVar objects.
 <p>
 SnmpIpAddress corresponding to 128.253.154.64<br>
 SnmpInt  corresponding to port 23<br>
 SnmpIpAddress corresponding to 128.253.154.3 and<br>
 SnmpInt  corresponding to port 1111<br>
 These should be in this very order. 
 <p>
 The return value in this case will contain the int array containing
 128.253.154.64.23.128.253.154.3.1111, the subids forming components 
 of the array.<br>
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>indexVector</CODE> - Vector of SnmpVar instances. Each instance should 
                    correspond to the index component value.<DD><CODE>indexMibNodes</CODE> - Vector containing the nodes corresponding to the 
                    index MibNodes.
<DT><B>Returns:</B><DD>the instance string.
<DD><CODE>java.lang.NumberFormatException</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="decodeInstanceString(java.lang.String, java.util.Vector)"><!-- --></A><H3>
decodeInstanceString</H3>
<PRE>
public java.util.Vector <B>decodeInstanceString</B>(java.lang.String&nbsp;instance,
                                             java.util.Vector&nbsp;indexMibNodes)
                                      throws java.lang.NumberFormatException</PRE>
<DL>
<DD>Decodes an instance string based on the instance and indexMibNodes.
 <p>
 For the syntax OCTET STRING and OBJECT IDENTIFIER, the length value 
 has to be prepended before the instance value, unless it is defined 
 IMPLIED.
 <p>
 If the SIZE clause is present with fixed length, the length need not 
 be prepended before the instance value.
 <p>
 For example, if the syntax of the index node is OCTET STRING and if
 String value is "test", then the instance String must be 
 "4.116.101.115.116".
 <p>
 If the index node is IMPLIED or if the syntax has a fixed length as
 defined in the MIB, then the length value need not be prepended and
 the instance String can be either "116.101.115.116" or 
 "4.116.101.115.116".<br>
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>instance</CODE> - the encoded instance String<DD><CODE>indexMibNodes</CODE> - Vector containing the nodes corresponding to the index MibNodes.
<DT><B>Returns:</B><DD>Vector of SnmpVar values for the index nodes.
<DT><B>Throws:</B>
<DD><CODE>throws</CODE> - NumberFormatException
<DD><CODE>java.lang.NumberFormatException</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="getSyntax()"><!-- --></A><H3>
getSyntax</H3>
<PRE>
public <A HREF="../../../../com/adventnet/snmp/mibs/LeafSyntax.html">LeafSyntax</A> <B>getSyntax</B>()</PRE>
<DL>
<DD>Gives the syntax for this leafSyntax Object. 
 <p>
 The idea is that each LeafSyntax could be a Textual-Convention.
 In such a cases the textual convention's syntax will be applicable.
 However if the textual convention's syntax is another textual
 convention then we have a case where it should be possible to derive
 the syntax tree without going into a cyclic loop.<br>
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>LeafSyntax object for this syntax.</DL>
</DD>
</DL>
<HR>

<A NAME="getRangeItems()"><!-- --></A><H3>
getRangeItems</H3>
<PRE>
public java.lang.String[] <B>getRangeItems</B>()</PRE>
<DL>
<DD>Gets the range constraints available for this syntax.
 For example if a syntax has a range like (0 .. 255 | 400 .. 500)
 then this method will return an array containing two components
 namely "0 .. 255" and "400 .. 500".<br>
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the string array of range constraints.<br>
		   null, if there are no range restrictions.</DL>
</DD>
</DL>
<HR>

<A NAME="clone()"><!-- --></A><H3>
clone</H3>
<PRE>
public java.lang.Object <B>clone</B>()
                       throws java.lang.CloneNotSupportedException</PRE>
<DL>
<DD>Creates and returns a copy of this object.
<P>
<DD><DL>
<DT><B>Overrides:</B><DD><CODE>clone</CODE> in class <CODE>java.lang.Object</CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the copy of this LeafSyntax object.
<DT><B>Throws:</B>
<DD><CODE>java.lang.CloneNotSupportedException</CODE> - is thrown if the object's class
			  does not support the Cloneable interface.</DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>

<!-- ========== START OF NAVBAR ========== -->
<A NAME="navbar_bottom"><!-- --></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0">
<TR>
<TD COLSPAN=3 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../../com/adventnet/snmp/mibs/ErrorObject.html"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../../com/adventnet/snmp/mibs/MibErrorMessages.html"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../index.html" TARGET="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="LeafSyntax.html" TARGET="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;
<SCRIPT>
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
<A HREF="../../../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>
</NOSCRIPT>
</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;CONSTR&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;CONSTR&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<!-- =========== END OF NAVBAR =========== -->

<HR>
Copyright (c)AdventNet Inc., 1996-2006
</BODY>
</HTML>
