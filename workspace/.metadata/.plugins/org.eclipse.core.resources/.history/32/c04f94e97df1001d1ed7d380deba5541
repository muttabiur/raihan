<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN""http://www.w3.org/TR/REC-html40/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc on Thu Jan 29 17:18:54 IST 2009 -->
<TITLE>
FileLogWriter (AdventNet)
</TITLE>
<LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../stylesheet.css" TITLE="Style">
</HEAD>
<SCRIPT>
function asd()
{
parent.document.title="FileLogWriter (AdventNet)";
}
</SCRIPT>
<BODY BGCOLOR="white" onload="asd();">

<!-- ========== START OF NAVBAR ========== -->
<A NAME="navbar_top"><!-- --></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0">
<TR>
<TD COLSPAN=3 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../../com/adventnet/afp/log/DefaultLogger.html"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../../com/adventnet/afp/log/FileUtil.html"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../index.html" TARGET="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="FileLogWriter.html" TARGET="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;
<SCRIPT>
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
<A HREF="../../../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>
</NOSCRIPT>
</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#fields_inherited_from_class_com.adventnet.afp.log.AbstractLogWriter">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<!-- =========== END OF NAVBAR =========== -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
<FONT SIZE="-1">
com.adventnet.afp.log</FONT>
<BR>
Class  FileLogWriter</H2>
<PRE>
java.lang.Object
  |
  +--<A HREF="../../../../com/adventnet/afp/log/AbstractLogWriter.html">com.adventnet.afp.log.AbstractLogWriter</A>
        |
        +--<B>com.adventnet.afp.log.FileLogWriter</B>
</PRE>
<DL>
<DT><B>All Implemented Interfaces:</B> <DD><A HREF="../../../../com/adventnet/afp/log/LogWriter.html">LogWriter</A></DD>
</DL>
<HR>
<DL>
<DT>public class <B>FileLogWriter</B><DT>extends <A HREF="../../../../com/adventnet/afp/log/AbstractLogWriter.html">AbstractLogWriter</A></DL>

<P>
FilelogWriter is a default implementation of the LogWriter provided
by the Logging&nbsp; Framework. As the name implies, the FilelogWriter
redirects all the log out and log error messages to the corresponding files.
When the number of lines in the file in
<br>current use reaches the maximum number specified in the configuration,
the FilelogWriter automatically opens a new file and all further log messages
will be written into it and so on.
<p>By default, the FilelogWriter prescribes names for the file in current
use and for all further files. The file in current use will be named always
as serverout.txt or servererr.txt. The name for the previous files, will
be in incremented order. For example, supposing the FilelogWriter has created
5 files and the 6th one is the current file, then, the fifth file will
bear the name serverout1.txt, the fourth file will have the name serverout2.txt
and so on.
<p>All the new files will have the label "LOG_STARTED_STR" on their top.
If a new file is the continuation of the previous one, it will bear the
label "LOG_CONTINUED_STR" on its top.
<p>Whenever the number of files reaches the maximum prescribed limit in
the configuration , the oldest file (in other words, the first generated
file) is moved to the Archives. For example, the default value for the
parameter MaxFileCount is set as 10. Upon
<br>reaching this maximum count, when the 11th file is created, the first
one is moved to the Archives. When there arises a need to refer to the
first file, you may visit the Archives and pick that file.
<p>Buffering can be done in two modes - Auto or Manual. The custom properties
are file name, maximum line count, maximum
<br>file count , Buffer size,Flush mode, Logs directory, Archive directory
and; Archive status.&nbsp; The key names for all the Custom properties
are FileName,MaxLineCount,MaxFileCount,BufferSize,FlushMode, LogsDirectory,ArchiveDirectory
and ArchiveStatus. The user can give their own property under the Property
tag similar to the properties mentioned&nbsp; above.(FileName,MaxLineCount
etc) which are considered to be as custom properties.
<P>

<P>
<HR>

<P>
<!-- ======== NESTED CLASS SUMMARY ======== -->


<!-- =========== FIELD SUMMARY =========== -->

<A NAME="field_summary"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Field Summary</B></FONT></TD>
</TR>
</TABLE>
&nbsp;<A NAME="fields_inherited_from_class_com.adventnet.afp.log.AbstractLogWriter"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TD><B>Fields inherited from class com.adventnet.afp.log.<A HREF="../../../../com/adventnet/afp/log/AbstractLogWriter.html">AbstractLogWriter</A></B></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="../../../../com/adventnet/afp/log/AbstractLogWriter.html#listeners">listeners</A></CODE></TD>
</TR>
</TABLE>
&nbsp;
<!-- ======== CONSTRUCTOR SUMMARY ======== -->

<A NAME="constructor_summary"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Constructor Summary</B></FONT></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../../../com/adventnet/afp/log/FileLogWriter.html#FileLogWriter()">FileLogWriter</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a new <code>FileLogWriter</code> instance.</TD>
</TR>
</TABLE>
&nbsp;
<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Method Summary</B></FONT></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/afp/log/FileLogWriter.html#archiveFile(java.lang.String, java.lang.String)">archiveFile</A></B>(java.lang.String&nbsp;sourceZipFile,
            java.lang.String&nbsp;fileName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The file before getting deleted from the logs directory, is moved to Archive.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/afp/log/FileLogWriter.html#close()">close</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method will close the stream that are opened and releases any resources that are 
 associated with the stream.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/afp/log/FileLogWriter.html#err(java.lang.String, java.lang.Throwable)">err</A></B>(java.lang.String&nbsp;message,
    java.lang.Throwable&nbsp;exception)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Prints this <B><I> Throwable</i></b> exception and its error message to the 
 log file.When the error messages and the Throwable is passed to this method,
 the messages and stack trace belonging to it will be printed into the file.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/afp/log/FileLogWriter.html#flush()">flush</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method transfers the logout and logerror messages from memory in to the file
 and cleans the memory area.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/afp/log/FileLogWriter.html#getArchiveDirectory()">getArchiveDirectory</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This will return the Archive directory.The Archive directory mentioned
  in the logging configuration file will be returned.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/afp/log/FileLogWriter.html#getArchiveStatus()">getArchiveStatus</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This will return the Archive status.The current Archive status will be retreived.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/afp/log/FileLogWriter.html#getBufferSize()">getBufferSize</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The buffer size is retreived.Since the buffer size can be changed at runtime, this method 
  returns the currently modified size of the buffer.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/afp/log/FileLogWriter.html#getFileName()">getFileName</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This will return the log file name .</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/afp/log/FileLogWriter.html#getFlushMode()">getFlushMode</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Used to get the flush mode on which this instance is operating.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/afp/log/FileLogWriter.html#getLogDirectory()">getLogDirectory</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This will return the log directory.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/afp/log/FileLogWriter.html#getMaxFileCount()">getMaxFileCount</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This will return the maximum file count.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/afp/log/FileLogWriter.html#getMaxLineCount()">getMaxLineCount</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This will return the maximum lines .The maximum number of lines per file that is 
  used currently can be retreived using this method.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/afp/log/FileLogWriter.html#init(com.adventnet.afp.log.LogWriterProperties)">init</A></B>(<A HREF="../../../../com/adventnet/afp/log/LogWriterProperties.html">LogWriterProperties</A>&nbsp;prop)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;For initializing implementation class with required properties.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/afp/log/FileLogWriter.html#out(java.lang.String)">out</A></B>(java.lang.String&nbsp;message)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method writes the log messages to the current file.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/afp/log/FileLogWriter.html#setArchiveStatus(boolean)">setArchiveStatus</A></B>(boolean&nbsp;archiveStatus)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This will Set the archive status at runtime.If the status is true , then deleted file will
  be moved to the archive else it will not be moved to archive.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/afp/log/FileLogWriter.html#setBufferSize(int)">setBufferSize</A></B>(int&nbsp;size)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The buffer size is set for the corresponding buffer type .</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/afp/log/FileLogWriter.html#setFlushMode(java.lang.String)">setFlushMode</A></B>(java.lang.String&nbsp;type)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This will set the flush mode at runtime.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/afp/log/FileLogWriter.html#setMaxFileCount(int)">setMaxFileCount</A></B>(int&nbsp;no)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This will Set the maximum file count at runtime.The maximum number of files of same type under
  the logs directory mentioned in the logging configuration file can be changed at 
  runtime by setting the number of lines using this method.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/afp/log/FileLogWriter.html#setMaxLineCount(int)">setMaxLineCount</A></B>(int&nbsp;no)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This will Set the maximum line count at runtime.The maximum number of lines per file mentioned in 
  the logging configuration file can be changed at runtime by setting the number of lines
  using this method.</TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_com.adventnet.afp.log.AbstractLogWriter"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TD><B>Methods inherited from class com.adventnet.afp.log.<A HREF="../../../../com/adventnet/afp/log/AbstractLogWriter.html">AbstractLogWriter</A></B></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="../../../../com/adventnet/afp/log/AbstractLogWriter.html#addPropertyChangeListener(java.beans.PropertyChangeListener)">addPropertyChangeListener</A>, <A HREF="../../../../com/adventnet/afp/log/AbstractLogWriter.html#getInstanceName()">getInstanceName</A>, <A HREF="../../../../com/adventnet/afp/log/AbstractLogWriter.html#removePropertyChangeListener(java.beans.PropertyChangeListener)">removePropertyChangeListener</A></CODE></TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TD><B>Methods inherited from class java.lang.Object</B></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</CODE></TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ============ FIELD DETAIL =========== -->


<!-- ========= CONSTRUCTOR DETAIL ======== -->

<A NAME="constructor_detail"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=1><FONT SIZE="+2">
<B>Constructor Detail</B></FONT></TD>
</TR>
</TABLE>

<A NAME="FileLogWriter()"><!-- --></A><H3>
FileLogWriter</H3>
<PRE>
public <B>FileLogWriter</B>()</PRE>
<DL>
<DD>Creates a new <code>FileLogWriter</code> instance.
<P>
</DL>

<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=1><FONT SIZE="+2">
<B>Method Detail</B></FONT></TD>
</TR>
</TABLE>

<A NAME="init(com.adventnet.afp.log.LogWriterProperties)"><!-- --></A><H3>
init</H3>
<PRE>
public void <B>init</B>(<A HREF="../../../../com/adventnet/afp/log/LogWriterProperties.html">LogWriterProperties</A>&nbsp;prop)
          throws <A HREF="../../../../com/adventnet/afp/log/LogException.html">LogException</A></PRE>
<DL>
<DD>For initializing implementation class with required properties. The Properties are
 taken from the logging configuration file. If the properties are null, then the default
  properties will be taken for the Logging operation.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../com/adventnet/afp/log/LogWriter.html#init(com.adventnet.afp.log.LogWriterProperties)">init</A></CODE> in interface <CODE><A HREF="../../../../com/adventnet/afp/log/LogWriter.html">LogWriter</A></CODE><DT><B>Overrides:</B><DD><CODE><A HREF="../../../../com/adventnet/afp/log/AbstractLogWriter.html#init(com.adventnet.afp.log.LogWriterProperties)">init</A></CODE> in class <CODE><A HREF="../../../../com/adventnet/afp/log/AbstractLogWriter.html">AbstractLogWriter</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>prop</CODE> - Properties containing information  read from the logging configuration file.
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../com/adventnet/afp/log/LogException.html">LogException</A></CODE> - if an error occurs during initialization</DL>
</DD>
</DL>
<HR>

<A NAME="archiveFile(java.lang.String, java.lang.String)"><!-- --></A><H3>
archiveFile</H3>
<PRE>
public boolean <B>archiveFile</B>(java.lang.String&nbsp;sourceZipFile,
                           java.lang.String&nbsp;fileName)</PRE>
<DL>
<DD>The file before getting deleted from the logs directory, is moved to Archive.
  When the Maximum file count is reached, the older files gets deleted. In order to
  keep track of all the log files,the file is moved to the Archive  before getting deleted.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sourceZipFile</CODE> - The zip file where the files are stored.<DD><CODE>fileName</CODE> - The file which will be moved to Archive before getting deleted.
<DT><B>Returns:</B><DD>Return True when the files are moved to Archive else false.</DL>
</DD>
</DL>
<HR>

<A NAME="out(java.lang.String)"><!-- --></A><H3>
out</H3>
<PRE>
public void <B>out</B>(java.lang.String&nbsp;message)</PRE>
<DL>
<DD>This method writes the log messages to the current file.
 If buffering is enabled ( when bufferSize>0 ), the log messages are 
 stored in the memory. Upon reaching the maximum number of lines ( which
 is specified in the logging configuration file <B><I> flush()</i></b>
 method is called .
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>message</CODE> - A string to be logged.</DL>
</DD>
</DL>
<HR>

<A NAME="err(java.lang.String, java.lang.Throwable)"><!-- --></A><H3>
err</H3>
<PRE>
public void <B>err</B>(java.lang.String&nbsp;message,
                java.lang.Throwable&nbsp;exception)</PRE>
<DL>
<DD>Prints this <B><I> Throwable</i></b> exception and its error message to the 
 log file.When the error messages and the Throwable is passed to this method,
 the messages and stack trace belonging to it will be printed into the file. The buffering 
 is enabled(i.e.when bufferSize>0) for the error messages also. Thus the Line count is 
 maintained in the file.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>exception</CODE> - Throwable<DD><CODE>message</CODE> - Error message to be logged.</DL>
</DD>
</DL>
<HR>

<A NAME="flush()"><!-- --></A><H3>
flush</H3>
<PRE>
public void <B>flush</B>()
           throws <A HREF="../../../../com/adventnet/afp/log/LogException.html">LogException</A></PRE>
<DL>
<DD>This method transfers the logout and logerror messages from memory in to the file
 and cleans the memory area. The maximum number of lines that can be stored 
 in the memory can be specified in the logging configuration file
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../com/adventnet/afp/log/LogException.html">LogException</A></CODE> - if an error occurs while flushing the contents of the writer</DL>
</DD>
</DL>
<HR>

<A NAME="close()"><!-- --></A><H3>
close</H3>
<PRE>
public void <B>close</B>()
           throws <A HREF="../../../../com/adventnet/afp/log/LogException.html">LogException</A></PRE>
<DL>
<DD>This method will close the stream that are opened and releases any resources that are 
 associated with the stream.
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../com/adventnet/afp/log/LogException.html">LogException</A></CODE> - if an error occurs while closing the writer</DL>
</DD>
</DL>
<HR>

<A NAME="setFlushMode(java.lang.String)"><!-- --></A><H3>
setFlushMode</H3>
<PRE>
public void <B>setFlushMode</B>(java.lang.String&nbsp;type)</PRE>
<DL>
<DD>This will set the flush mode at runtime. Depending upon the mode, the flushing
  operation differs. It can be either Auto or Manual. When this method is invoked with the 
  argument as invalid or some value other than Auto or Manual , then the FlushMode is taken as Auto.  
  In this mode,the messages will be collected in the buffer and when it reaches
  the buffer size, all the messages in the buffer will be flushed into their respective files.
  Another option is Manual where the messages will be collected in the buffer until the
  flush method is invoked by the user. When the messages in the buffer reaches the buffer size
  the old messages will be overwritten. Thus in this buffering, the messages will not
  exceed the buffersize.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>type</CODE> - Type of buffering either "Auto" or "Manual"</DL>
</DD>
</DL>
<HR>

<A NAME="getFlushMode()"><!-- --></A><H3>
getFlushMode</H3>
<PRE>
public java.lang.String <B>getFlushMode</B>()</PRE>
<DL>
<DD>Used to get the flush mode on which this instance is operating. Possible return values are "Auto" and "Manual"
<P>
<DD><DL>

<DT><B>Returns:</B><DD>Returns the flush mode as a String</DL>
</DD>
</DL>
<HR>

<A NAME="setBufferSize(int)"><!-- --></A><H3>
setBufferSize</H3>
<PRE>
public void <B>setBufferSize</B>(int&nbsp;size)</PRE>
<DL>
<DD>The buffer size is set for the corresponding buffer type . If the BufferSize is greater
  than 0, the buffering is enabled.The size of the buffer can be changed at runtime with this method.
  By default the buffer size is given as 0. Whatever be the type of buffering , when the buffer size 
  exceeds the value 0, the buffering operation is performed.Depending upon the buffer size,
  the buffering operation differs for the buffer type.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>size</CODE> - The buffer size for the corresponding buffer type.</DL>
</DD>
</DL>
<HR>

<A NAME="getBufferSize()"><!-- --></A><H3>
getBufferSize</H3>
<PRE>
public int <B>getBufferSize</B>()</PRE>
<DL>
<DD>The buffer size is retreived.Since the buffer size can be changed at runtime, this method 
  returns the currently modified size of the buffer. When the buffer size is not changed 
  at runtime, then the value of buffer size is retreived from the logging configuration file.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>Returns the buffer size specified for logging.</DL>
</DD>
</DL>
<HR>

<A NAME="getFileName()"><!-- --></A><H3>
getFileName</H3>
<PRE>
public java.lang.String <B>getFileName</B>()</PRE>
<DL>
<DD>This will return the log file name . The log file name which was mentioned in
  the logging configuration file will be returned.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>Returns the log file name.</DL>
</DD>
</DL>
<HR>

<A NAME="getLogDirectory()"><!-- --></A><H3>
getLogDirectory</H3>
<PRE>
public java.lang.String <B>getLogDirectory</B>()</PRE>
<DL>
<DD>This will return the log directory. The logs directory which was mentioned
  in the logging configuration file will be returned.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>Returns the log directory name.</DL>
</DD>
</DL>
<HR>

<A NAME="getArchiveDirectory()"><!-- --></A><H3>
getArchiveDirectory</H3>
<PRE>
public java.lang.String <B>getArchiveDirectory</B>()</PRE>
<DL>
<DD>This will return the Archive directory.The Archive directory mentioned
  in the logging configuration file will be returned.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>Returns the Archive directory name.</DL>
</DD>
</DL>
<HR>

<A NAME="setMaxLineCount(int)"><!-- --></A><H3>
setMaxLineCount</H3>
<PRE>
public void <B>setMaxLineCount</B>(int&nbsp;no)</PRE>
<DL>
<DD>This will Set the maximum line count at runtime.The maximum number of lines per file mentioned in 
  the logging configuration file can be changed at runtime by setting the number of lines
  using this method.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>no</CODE> - The size of the maximum line count.</DL>
</DD>
</DL>
<HR>

<A NAME="getMaxLineCount()"><!-- --></A><H3>
getMaxLineCount</H3>
<PRE>
public int <B>getMaxLineCount</B>()</PRE>
<DL>
<DD>This will return the maximum lines .The maximum number of lines per file that is 
  used currently can be retreived using this method.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>Returns the maximum number of lines that can be used in the log file.</DL>
</DD>
</DL>
<HR>

<A NAME="setMaxFileCount(int)"><!-- --></A><H3>
setMaxFileCount</H3>
<PRE>
public void <B>setMaxFileCount</B>(int&nbsp;no)</PRE>
<DL>
<DD>This will Set the maximum file count at runtime.The maximum number of files of same type under
  the logs directory mentioned in the logging configuration file can be changed at 
  runtime by setting the number of lines using this method.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>no</CODE> - The size of the maximum file count.</DL>
</DD>
</DL>
<HR>

<A NAME="getMaxFileCount()"><!-- --></A><H3>
getMaxFileCount</H3>
<PRE>
public int <B>getMaxFileCount</B>()</PRE>
<DL>
<DD>This will return the maximum file count. The maximum number of files that can be used currently 
  of same type under logs directory can be retreived  using this method.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>Returns the maximum number of files of the same type under the log directory.</DL>
</DD>
</DL>
<HR>

<A NAME="setArchiveStatus(boolean)"><!-- --></A><H3>
setArchiveStatus</H3>
<PRE>
public void <B>setArchiveStatus</B>(boolean&nbsp;archiveStatus)</PRE>
<DL>
<DD>This will Set the archive status at runtime.If the status is true , then deleted file will
  be moved to the archive else it will not be moved to archive. The status can be changed at
  runtime.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>archiveStatus</CODE> - The status of the Archive which is passed as boolean.</DL>
</DD>
</DL>
<HR>

<A NAME="getArchiveStatus()"><!-- --></A><H3>
getArchiveStatus</H3>
<PRE>
public boolean <B>getArchiveStatus</B>()</PRE>
<DL>
<DD>This will return the Archive status.The current Archive status will be retreived.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>Returns the Status of the Archive.</DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>

<!-- ========== START OF NAVBAR ========== -->
<A NAME="navbar_bottom"><!-- --></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0">
<TR>
<TD COLSPAN=3 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../../com/adventnet/afp/log/DefaultLogger.html"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../../com/adventnet/afp/log/FileUtil.html"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../index.html" TARGET="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="FileLogWriter.html" TARGET="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;
<SCRIPT>
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
<A HREF="../../../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>
</NOSCRIPT>
</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#fields_inherited_from_class_com.adventnet.afp.log.AbstractLogWriter">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<!-- =========== END OF NAVBAR =========== -->

<HR>
Copyright (c)AdventNet Inc., 1996-2006
</BODY>
</HTML>
