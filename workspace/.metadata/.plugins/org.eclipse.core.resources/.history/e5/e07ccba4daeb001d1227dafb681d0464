package OcsSNMPv1;


/**
* OcsSNMPv1/SnmpServicePOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from OcsSNMPv1.idl
* Saturday, January 24, 2009 2:18:39 o'clock PM EST
*/

public abstract class SnmpServicePOA extends org.omg.PortableServer.Servant
 implements OcsSNMPv1.SnmpServiceOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("placeInspectionOrder", new java.lang.Integer (0));
    _methods.put ("placeModificationOrder", new java.lang.Integer (1));
    _methods.put ("addTrapListenerProfile", new java.lang.Integer (2));
    _methods.put ("removeTrapListenerProfile", new java.lang.Integer (3));
    _methods.put ("listTrapListenerProfiles", new java.lang.Integer (4));
    _methods.put ("removeTrapListener", new java.lang.Integer (5));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // OcsSNMPv1/SnmpService/placeInspectionOrder
       {
         String host = in.read_string ();
         int port = in.read_ulong ();
         int retries = in.read_ulong ();
         int timeout = in.read_ulong ();
         int cacheThreshold = in.read_ulong ();
         OcsSNMPv1.RequestType type = OcsSNMPv1.RequestTypeHelper.read (in);
         String readCommunity = in.read_string ();
         String oids[] = OcsSNMPv1.StringSeqHelper.read (in);
         OcsSNMPv1.SnmpCustomer customer = OcsSNMPv1.SnmpCustomerHelper.read (in);
         int orderNumStart = in.read_long ();
         this.placeInspectionOrder (host, port, retries, timeout, cacheThreshold, type, readCommunity, oids, customer, orderNumStart);
         out = $rh.createReply();
         break;
       }

       case 1:  // OcsSNMPv1/SnmpService/placeModificationOrder
       {
         String host = in.read_string ();
         int port = in.read_ulong ();
         int retries = in.read_ulong ();
         int timeout = in.read_ulong ();
         String writeCommunity = in.read_string ();
         boolean atomic = in.read_boolean ();
         OcsSNMPv1.SnmpVarBind varbinds[] = OcsSNMPv1.SnmpVarBindSeqHelper.read (in);
         OcsSNMPv1.SnmpCustomer customer = OcsSNMPv1.SnmpCustomerHelper.read (in);
         int orderNumStart = in.read_long ();
         this.placeModificationOrder (host, port, retries, timeout, writeCommunity, atomic, varbinds, customer, orderNumStart);
         out = $rh.createReply();
         break;
       }

       case 2:  // OcsSNMPv1/SnmpService/addTrapListenerProfile
       {
         try {
           OcsSNMPv1.SnmpTrapListener listener = OcsSNMPv1.SnmpTrapListenerHelper.read (in);
           OcsSNMPv1.SnmpTrapProfile profile = OcsSNMPv1.SnmpTrapProfileHelper.read (in);
           boolean $result = false;
           $result = this.addTrapListenerProfile (listener, profile);
           out = $rh.createReply();
           out.write_boolean ($result);
         } catch (OcsSNMPv1.SocketProblem $ex) {
           out = $rh.createExceptionReply ();
           OcsSNMPv1.SocketProblemHelper.write (out, $ex);
         }
         break;
       }

       case 3:  // OcsSNMPv1/SnmpService/removeTrapListenerProfile
       {
         try {
           OcsSNMPv1.SnmpTrapListener listener = OcsSNMPv1.SnmpTrapListenerHelper.read (in);
           OcsSNMPv1.SnmpTrapProfile profile = OcsSNMPv1.SnmpTrapProfileHelper.read (in);
           boolean $result = false;
           $result = this.removeTrapListenerProfile (listener, profile);
           out = $rh.createReply();
           out.write_boolean ($result);
         } catch (OcsSNMPv1.NoSuchElement $ex) {
           out = $rh.createExceptionReply ();
           OcsSNMPv1.NoSuchElementHelper.write (out, $ex);
         }
         break;
       }

       case 4:  // OcsSNMPv1/SnmpService/listTrapListenerProfiles
       {
         try {
           OcsSNMPv1.SnmpTrapListener listener = OcsSNMPv1.SnmpTrapListenerHelper.read (in);
           OcsSNMPv1.SnmpTrapProfile $result[] = null;
           $result = this.listTrapListenerProfiles (listener);
           out = $rh.createReply();
           OcsSNMPv1.SnmpTrapProfileSeqHelper.write (out, $result);
         } catch (OcsSNMPv1.NoSuchElement $ex) {
           out = $rh.createExceptionReply ();
           OcsSNMPv1.NoSuchElementHelper.write (out, $ex);
         }
         break;
       }

       case 5:  // OcsSNMPv1/SnmpService/removeTrapListener
       {
         try {
           OcsSNMPv1.SnmpTrapListener listener = OcsSNMPv1.SnmpTrapListenerHelper.read (in);
           this.removeTrapListener (listener);
           out = $rh.createReply();
         } catch (OcsSNMPv1.NoSuchElement $ex) {
           out = $rh.createExceptionReply ();
           OcsSNMPv1.NoSuchElementHelper.write (out, $ex);
         }
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:OcsSNMPv1/SnmpService:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public SnmpService _this() 
  {
    return SnmpServiceHelper.narrow(
    super._this_object());
  }

  public SnmpService _this(org.omg.CORBA.ORB orb) 
  {
    return SnmpServiceHelper.narrow(
    super._this_object(orb));
  }


} // class SnmpServicePOA
