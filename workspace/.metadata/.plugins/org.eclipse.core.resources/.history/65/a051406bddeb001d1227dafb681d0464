<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN""http://www.w3.org/TR/REC-html40/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc on Tue Nov 07 19:59:02 IST 2006 -->
<TITLE>
SnmpPDU (AdventNet)
</TITLE>
<LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../stylesheet.css" TITLE="Style">
</HEAD>
<SCRIPT>
function asd()
{
parent.document.title="SnmpPDU (AdventNet)";
}
</SCRIPT>
<BODY BGCOLOR="white" onload="asd();">

<!-- ========== START OF NAVBAR ========== -->
<A NAME="navbar_top"><!-- --></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0">
<TR>
<TD COLSPAN=3 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpOpaque.html"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../index.html" TARGET="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="SnmpPDU.html" TARGET="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;
<SCRIPT>
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
<A HREF="../../../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>
</NOSCRIPT>
</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<!-- =========== END OF NAVBAR =========== -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
<FONT SIZE="-1">
com.adventnet.snmp.snmp2</FONT>
<BR>
Class  SnmpPDU</H2>
<PRE>
java.lang.Object
  |
  +--<B>com.adventnet.snmp.snmp2.SnmpPDU</B>
</PRE>
<DL>
<DT><B>All Implemented Interfaces:</B> <DD>java.io.Serializable</DD>
</DL>
<HR>
<DL>
<DT>public class <B>SnmpPDU</B><DT>extends java.lang.Object<DT>implements java.io.Serializable</DL>

<P>
The SnmpPDU class represents the SNMP PDU used in protocol operations.
 <p>
 Any SNMP operation can be performed using this class.
 <p>
 The following should be set on it before performing any SNMP operation:
 <br>
 1. The SNMP command. It may be SnmpAPI.GET_REQ_MSG or
 SnmpAPI.SET_REQ_MSG or SnmpAPI.GETNEXT_REQ_MSG
 <br>
 2. The SnmpVarBinds that should be present in this PDU.
 <br>
 3. The network communication variables such as remoteHost and remotePort
 ( in case of UDP ). This is not needed if it is already present in
 SnmpSession. But it is always good to set it on pdu rather than on
 SnmpSession.
 <p>
 The following code snippet will give a clear idea of how to do a 
 SNMP operation using this class:
 <br>
 This code snippet does a simple SNMP GET request for the oid
 ".1.3.6.1.2.1.1.1.0", to the host "remoteHost" and port "remotePort".
 <p>
 <i>
 SnmpPDU pdu = new SnmpPDU();
 <br>
 pdu.setCommand(SnmpAPI.GET_REQ_MSG);
 <br>
 pdu.addNull(new SnmpOID(".1.3.6.1.2.1.1.1.0"));
 <p>
 </i>
 If the under lying protocol that is used is UDP, then
 an instance of UDPProtocolOptions should be instantiated
 to set the remotePort and remoteHost variables.
 <br>
 Note: By default AdventNet SNMP Stack uses UDP as the 
 underlying protocol.
 <br>
 If SAS is used for communications, then an instance of 
 SASProtocolOptions should be instantiated to set the
 remotePort and remoteHost.
 <p>
 <i>
 UDPProtocolOptions opt = new UDPProtocolOptions();
 <br>
 opt.setRemoteHost(remoteHost);
 <br>
 opt.setRemotePort(remotePort);
 <br>
 pdu.setProtocolOptions(opt);
 <br>
 <br>
 SnmpPDU response_pdu = session.syncSend(pdu);
 <br>
 </i>
 <p>
 When a PDU is re-used, ensure the reqid field is set properly.
 If reqid is set non-zero, the API leaves it as it is.  If it is 0,
 then the API assigns a unique reqid, to ensure no conflict with other
 requests. So, if you do not want to manage the reqids yourself,
 set it to 0 before each request. With SnmpSession.syncSend() you
 don't need to store the value for later reference.
 With SnmpSession.send(), the reqid assigned is returned, and
 you will need it later to check up on the response.
 <p>
 The SnmpPDU is encapsulated in a message, where the message could be
 SNMPv1, SNMPv2c or an SNMPv3 message. Applications do not have to be 
 aware of the message classes Snmp3Message and SnmpMessage and they 
 can work with the SnmpPDU alone, to be able to interact with peers.
 The SnmpPDU provides a getMsg( ) method to access the SnmpMessage 
 associated with it. Similarly when a SnmpPDU is instantiated, it 
 instantiates the appropriate message object along with it. Applications 
 must not instantiate Snmp3Message and SnmpMessage objects and should 
 always use SnmpPDU.
 <p>
 The SnmpPDU provides most of the communication parameters' related 
 methods that are available with the SnmpSession. Wherever the value 
 of the parameter is set in the pdu, it overrides the value in the session.
<P>

<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../../serialized-form.html" TARGET="com.adventnet.snmp.snmp2.SnmpPDU">Serialized Form</A></DL>
<HR>

<P>
<!-- ======== NESTED CLASS SUMMARY ======== -->


<!-- =========== FIELD SUMMARY =========== -->


<!-- ======== CONSTRUCTOR SUMMARY ======== -->

<A NAME="constructor_summary"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Constructor Summary</B></FONT></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#SnmpPDU()">SnmpPDU</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a new SnmpPDU instance.</TD>
</TR>
</TABLE>
&nbsp;
<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Method Summary</B></FONT></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#addNull(com.adventnet.snmp.snmp2.SnmpOID)">addNull</A></B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpOID.html">SnmpOID</A>&nbsp;oid)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method will add a vairable binding which contains
 this SnmpOID and a placeholder ( NULL ) as the value.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#addVariableBinding(int, com.adventnet.snmp.snmp2.SnmpVarBind)">addVariableBinding</A></B>(int&nbsp;index,
                   <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpVarBind.html">SnmpVarBind</A>&nbsp;varbind)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Adds SNMP variable at specified index in PDUs list of 
 variable bindings.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#addVariableBinding(com.adventnet.snmp.snmp2.SnmpVarBind)">addVariableBinding</A></B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpVarBind.html">SnmpVarBind</A>&nbsp;varbind)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Adds SNMP variable at the end of PDU's list of variable bindings.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html">SnmpPDU</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#copy()">copy</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Makes a copy of entire SnmpPDU including the SnmpMessage it encapsulates.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html">SnmpPDU</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#copyWithoutVarbinds()">copyWithoutVarbinds</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#decode()">decode</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Decodes the remainder of the PDU.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#fix()">fix</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Fixes PDU to eliminate erred variable binding, determined by errindex</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.net.InetAddress</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#getAddress()">getAddress</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>Deprecated.</B>&nbsp;<I>use the following instead.
 <i>
 <p>
 UDPProtocolOptions opt = (UDPProtocolOptions)SnmpPDU.getProtocolOptions();
 <br>
 InetAddress address = opt.getRemoteAddress();
 </i></I></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#getAgentAddr()">getAgentAddr</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the address of object generating trap in String foramt.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.net.InetAddress</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#getAgentAddress()">getAgentAddress</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets address of object generating trap.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#getClientID()">getClientID</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method will return the id for the source which sent this pdu</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;byte</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#getCommand()">getCommand</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets command type of this PDU.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#getCommunity()">getCommunity</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets community string received/sent.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;byte[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#getContextID()">getContextID</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets context ID sent/received with this PDU.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;byte[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#getContextName()">getContextName</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the context name sent/received with this PDU.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;byte[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#getData()">getData</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets encoded data to be sent, or received.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#getEncodedLength(com.adventnet.snmp.snmp2.SnmpSession)">getEncodedLength</A></B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html">SnmpSession</A>&nbsp;session)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the length of the encoded pdu.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;byte[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#getEngineID()">getEngineID</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method returns the engineID that is previously specified or null.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpOID.html">SnmpOID</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#getEnterprise()">getEnterprise</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the enterprise OID.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#getErrindex()">getErrindex</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets error index of this PDU.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#getError()">getError</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets error information as a String, with offending varbind if any.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#getErrstat()">getErrstat</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets error status of this PDU.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#getMaxRepetitions()">getMaxRepetitions</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GetsMax-Repetitions value of this PDU.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpMessage.html">SnmpMessage</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#getMsg()">getMsg</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the SnmpMessage instance for this pdu.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#getNonRepeaters()">getNonRepeaters</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets Non-Repeaters value of this PDU.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpOID.html">SnmpOID</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#getObjectID(int)">getObjectID</A></B>(int&nbsp;index)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the specified SNMP ObjectID from PDUs list of variable bindings.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../com/adventnet/snmp/snmp2/ProtocolOptions.html">ProtocolOptions</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#getProtocolOptions()">getProtocolOptions</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method will return the transport mechanism's protocol options</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#getRemoteHost()">getRemoteHost</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>Deprecated.</B>&nbsp;<I>use the following instead.
 <i>
 <p>
 UDPProtocolOptions opt = (UDPProtocolOptions)SnmpPDU.getProtocolOptions();
 <br>
 String remoteHost = opt.getRemoteHost();
 </i></I></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#getRemotePort()">getRemotePort</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>Deprecated.</B>&nbsp;<I>use the following instead.
 <i>
 <p>
 UDPProtocolOptions opt = (UDPProtocolOptions)SnmpPDU.getProtocolOptions();
 <br>
 int remotePort = opt.getRemotePort();
 </i></I></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#getReqid()">getReqid</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets request id of this PDU.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#getRetries()">getRetries</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets number of retries for this PDU before timeout.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;long</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#getRoundTripDelay()">getRoundTripDelay</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns round-trip delay if received response PDU</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#getSecurityModel()">getSecurityModel</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the securityModel associated with this PDU.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#getSpecificType()">getSpecificType</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets specific trap type.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#getTimeout()">getTimeout</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the timeout value.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpOID.html">SnmpOID</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#getTrapOID()">getTrapOID</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method returns the trap-oid for this SNMPv2 trap-pdu.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#getTrapType()">getTrapType</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the generic type of the trap.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;long</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#getUpTime()">getUpTime</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the timeStamp of the object which has generated the trap.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;byte[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#getUserName()">getUserName</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the principal on whose behalf SNMPv3 requests are made.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpVar.html">SnmpVar</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#getVariable(int)">getVariable</A></B>(int&nbsp;index)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets specified SNMP variable from PDUs list of variables.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpVar.html">SnmpVar</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#getVariable(com.adventnet.snmp.snmp2.SnmpOID)">getVariable</A></B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpOID.html">SnmpOID</A>&nbsp;oid)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets specified SNMP variable from PDUs list of variables.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpVarBind.html">SnmpVarBind</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#getVariableBinding(int)">getVariableBinding</A></B>(int&nbsp;index)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets specified variable binding from PDUs list of variable bindings.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.util.Vector</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#getVariableBindings()">getVariableBindings</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets list of SnmpVarBind objects as a vector.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#getVersion()">getVersion</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets snmp Version number in PDU.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#getWriteCommunity()">getWriteCommunity</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets writeCommunity string received/sent.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#isBroadCastEnabled()">isBroadCastEnabled</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method says whether this pdu is a broadCastpdu or not.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#printVarBinds()">printVarBinds</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns String of all variable bindings with Tags, e.g.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#removeVariableBinding(int)">removeVariableBinding</A></B>(int&nbsp;index)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Removes SNMP variable binding at specified index in PDUs
 list of variable bindings.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#removeVariableBinding(com.adventnet.snmp.snmp2.SnmpVarBind)">removeVariableBinding</A></B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpVarBind.html">SnmpVarBind</A>&nbsp;varbind)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Removes specified SNMP variable binding from PDUs
 list of variable bindings.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#setAddress(java.net.InetAddress)">setAddress</A></B>(java.net.InetAddress&nbsp;address)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>Deprecated.</B>&nbsp;<I>use the following instead.
 <i>
 <p>
 UDPProtocolOptions opt = (UDPProtocolOptions)SnmpPDU.getProtocolOptions();
 <br>
 opt.setRemoteAddress(address);
 </i></I></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#setAgentAddr(java.lang.String)">setAgentAddr</A></B>(java.lang.String&nbsp;agentaddr)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sets the agent address as a string.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#setAgentAddress(java.net.InetAddress)">setAgentAddress</A></B>(java.net.InetAddress&nbsp;addr)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets Address of object generating trap.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#setBroadCastEnable(boolean)">setBroadCastEnable</A></B>(boolean&nbsp;bool)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Calling this method with a "true" value will indicate that
 this pdu is a broadcast pdu.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#setClientID(int)">setClientID</A></B>(int&nbsp;id)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method will indicate the id for source which sent this pdu</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#setCommand(byte)">setCommand</A></B>(byte&nbsp;type)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets command type of this PDU.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#setCommunity(java.lang.String)">setCommunity</A></B>(java.lang.String&nbsp;t)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets community string received/sent.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#setCommunityEncoding(java.lang.String)">setCommunityEncoding</A></B>(java.lang.String&nbsp;enc)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the encoding to use for community string.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#setContextID(byte[])">setContextID</A></B>(byte[]&nbsp;id)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets context ID associated with the PDU.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#setContextName(byte[])">setContextName</A></B>(byte[]&nbsp;name)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the context name associated with the PDU</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#setData(byte[])">setData</A></B>(byte[]&nbsp;b)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets encoded data to be sent, or received.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#setDebug(boolean)">setDebug</A></B>(boolean&nbsp;debug)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Defines whether debugging output should be generated for this PDU.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#setDNSLookup(boolean)">setDNSLookup</A></B>(boolean&nbsp;lookup)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>Deprecated.</B>&nbsp;<I>since no lookup will be done unnecessarily.</I></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#setEngineID(byte[])">setEngineID</A></B>(byte[]&nbsp;eid)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the engineID of the remote SNMPv3 agent.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#setEnterprise(com.adventnet.snmp.snmp2.SnmpOID)">setEnterprise</A></B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpOID.html">SnmpOID</A>&nbsp;oid)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the enterprise OID.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#setErrindex(int)">setErrindex</A></B>(int&nbsp;index)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets Error index for this PDU.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#setErrstat(int)">setErrstat</A></B>(int&nbsp;stat)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set Error status for this PDU.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#setMaxRepetitions(int)">setMaxRepetitions</A></B>(int&nbsp;max_rep)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets Max-Repetitions value for this PDU.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#setNonRepeaters(int)">setNonRepeaters</A></B>(int&nbsp;non_rep)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets Non-Repeaters value for this PDU.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#setProtocolOptions(com.adventnet.snmp.snmp2.ProtocolOptions)">setProtocolOptions</A></B>(<A HREF="../../../../com/adventnet/snmp/snmp2/ProtocolOptions.html">ProtocolOptions</A>&nbsp;tParam)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This sets the transport mechanism's protocol options.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#setReEncode(boolean)">setReEncode</A></B>(boolean&nbsp;reEncode)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Controls ASN.1 encoding (default true).</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#setRemoteHost(java.lang.String)">setRemoteHost</A></B>(java.lang.String&nbsp;host)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>Deprecated.</B>&nbsp;<I>use the following instead.
 <i>
 <p>
 UDPProtocolOptions opt = (UDPProtocolOptions)SnmpPDU.getProtocolOptions();
 <br>
 opt.setRemoteHost(host);
 </i></I></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#setRemotePort(int)">setRemotePort</A></B>(int&nbsp;port)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>Deprecated.</B>&nbsp;<I>use the following instead.
 <i>
 <p>
 UDPProtocolOptions opt = (UDPProtocolOptions)SnmpPDU.getProtocolOptions();
 <br>
 opt.setRemotePort(port);
 </i></I></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#setReqid(int)">setReqid</A></B>(int&nbsp;id)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets Request id for this PDU.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#setRetries(int)">setRetries</A></B>(int&nbsp;N)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets number of retries for this PDU before timeout.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#setSecurityModel(int)">setSecurityModel</A></B>(int&nbsp;model)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the securityModel to be associated with the PDU.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#setSpecificType(int)">setSpecificType</A></B>(int&nbsp;type)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets Specific trap type.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#setTimeout(int)">setTimeout</A></B>(int&nbsp;t)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the timeout value.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#setTrapType(int)">setTrapType</A></B>(int&nbsp;type)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the generic type of the Trap.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#setUpTime(long)">setUpTime</A></B>(long&nbsp;uptime)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the timeStamp of the object which has to generate the trap.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#setUserName(byte[])">setUserName</A></B>(byte[]&nbsp;name)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the principal on whose behalf SNMPv3 requests are to be made.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#setVariable(int, com.adventnet.snmp.snmp2.SnmpVar)">setVariable</A></B>(int&nbsp;index,
            <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpVar.html">SnmpVar</A>&nbsp;var)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets SNMP variable at specified index in PDUs list of variables,
 to value var.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#setVersion(int)">setVersion</A></B>(int&nbsp;v)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets snmp Version number in PDU.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#setWriteCommunity(java.lang.String)">setWriteCommunity</A></B>(java.lang.String&nbsp;t)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets writeCommunity string received/sent.</TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TD><B>Methods inherited from class java.lang.Object</B></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</CODE></TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ============ FIELD DETAIL =========== -->


<!-- ========= CONSTRUCTOR DETAIL ======== -->

<A NAME="constructor_detail"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=1><FONT SIZE="+2">
<B>Constructor Detail</B></FONT></TD>
</TR>
</TABLE>

<A NAME="SnmpPDU()"><!-- --></A><H3>
SnmpPDU</H3>
<PRE>
public <B>SnmpPDU</B>()</PRE>
<DL>
<DD>Creates a new SnmpPDU instance. It also instantiates the SnmpMessage
 it encapsulates.
<P>
</DL>

<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=1><FONT SIZE="+2">
<B>Method Detail</B></FONT></TD>
</TR>
</TABLE>

<A NAME="isBroadCastEnabled()"><!-- --></A><H3>
isBroadCastEnabled</H3>
<PRE>
public boolean <B>isBroadCastEnabled</B>()</PRE>
<DL>
<DD>This method says whether this pdu is a broadCastpdu or not.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the boolean which says whether this pdu
 is a broadCastpdu or not.</DL>
</DD>
</DL>
<HR>

<A NAME="setBroadCastEnable(boolean)"><!-- --></A><H3>
setBroadCastEnable</H3>
<PRE>
public void <B>setBroadCastEnable</B>(boolean&nbsp;bool)</PRE>
<DL>
<DD>Calling this method with a "true" value will indicate that
 this pdu is a broadcast pdu.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>bool</CODE> - the boolean value which says, whether this pdu 
 is a broadCast pdu or not.</DL>
</DD>
</DL>
<HR>

<A NAME="getMsg()"><!-- --></A><H3>
getMsg</H3>
<PRE>
public <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpMessage.html">SnmpMessage</A> <B>getMsg</B>()</PRE>
<DL>
<DD>Returns the SnmpMessage instance for this pdu.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setAddress(java.net.InetAddress)"><!-- --></A><H3>
setAddress</H3>
<PRE>
public void <B>setAddress</B>(java.net.InetAddress&nbsp;address)</PRE>
<DL>
<DD><B>Deprecated.</B>&nbsp;<I>use the following instead.
 <i>
 <p>
 UDPProtocolOptions opt = (UDPProtocolOptions)SnmpPDU.getProtocolOptions();
 <br>
 opt.setRemoteAddress(address);
 </i></I>
<P>
<DD>Sets InetAddress of SNMP peer
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>address</CODE> - the inetaddress to which this pdu should be
 sent.</DL>
</DD>
</DL>
<HR>

<A NAME="getEngineID()"><!-- --></A><H3>
getEngineID</H3>
<PRE>
public byte[] <B>getEngineID</B>()</PRE>
<DL>
<DD>This method returns the engineID that is previously specified or null.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The engineID of the remote SNMPv3 agent.<DT><B>Since:</B><DD>AdventNet SNMP API 4 SP2 ( Release 4.0.2 )</DD>
</DD>
<DT><B>See Also:</B><DD><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#setEngineID(byte[])"><CODE>setEngineID(byte[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setEngineID(byte[])"><!-- --></A><H3>
setEngineID</H3>
<PRE>
public void <B>setEngineID</B>(byte[]&nbsp;eid)</PRE>
<DL>
<DD>Sets the engineID of the remote SNMPv3 agent. When the engineID is set,
 then the api will directly take the usm details from USMUserTable
 without looking at the SnmpEngineTable for engineID, engineTime and
 engineBoots.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>eid</CODE> - The engineID of the remote SNMPv3 agent.<DT><B>Since:</B><DD>AdventNet SNMP API 4 SP2 ( Release 4.0.2 )</DD>
</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="getAddress()"><!-- --></A><H3>
getAddress</H3>
<PRE>
public java.net.InetAddress <B>getAddress</B>()</PRE>
<DL>
<DD><B>Deprecated.</B>&nbsp;<I>use the following instead.
 <i>
 <p>
 UDPProtocolOptions opt = (UDPProtocolOptions)SnmpPDU.getProtocolOptions();
 <br>
 InetAddress address = opt.getRemoteAddress();
 </i></I>
<P>
<DD>Returns the InetAddress corresponding to the host.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the Inet address corresponding to the remote host.
 null if not specified or is not an InetAddress.</DL>
</DD>
</DL>
<HR>

<A NAME="getRemoteHost()"><!-- --></A><H3>
getRemoteHost</H3>
<PRE>
public java.lang.String <B>getRemoteHost</B>()</PRE>
<DL>
<DD><B>Deprecated.</B>&nbsp;<I>use the following instead.
 <i>
 <p>
 UDPProtocolOptions opt = (UDPProtocolOptions)SnmpPDU.getProtocolOptions();
 <br>
 String remoteHost = opt.getRemoteHost();
 </i></I>
<P>
<DD>Gets name of SNMP peer - needed for Applets that cannot resolve hosts.
 The remoteHost attribute of SnmpPDU overrides the peername
 in SnmpSession. This means, when remoteHost is null in SnmpPDU,
 messages are sent to the host, peername,  in session. When
 remoteHost is not null in SnmpPDU, messages are sent to the
 remoteHost in SnmpPDU.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The name of the SNMP peer to which requests are sent.</DL>
</DD>
</DL>
<HR>

<A NAME="setRemoteHost(java.lang.String)"><!-- --></A><H3>
setRemoteHost</H3>
<PRE>
public void <B>setRemoteHost</B>(java.lang.String&nbsp;host)</PRE>
<DL>
<DD><B>Deprecated.</B>&nbsp;<I>use the following instead.
 <i>
 <p>
 UDPProtocolOptions opt = (UDPProtocolOptions)SnmpPDU.getProtocolOptions();
 <br>
 opt.setRemoteHost(host);
 </i></I>
<P>
<DD>Sets name of SNMP peer - needed for Applets that cannot resolve hosts.
 The remoteHost attribute of SnmpPDU overrides the peername
 in SnmpSession. This means, when remoteHost is null in SnmpPDU,
 messages are sent to the host, peername,  in session. When
 remoteHost is not null in SnmpPDU, messages are sent to the
 remoteHost in SnmpPDU.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>host</CODE> - The name of the SNMP peer to which requests should
 be sent.</DL>
</DD>
</DL>
<HR>

<A NAME="getRemotePort()"><!-- --></A><H3>
getRemotePort</H3>
<PRE>
public int <B>getRemotePort</B>()</PRE>
<DL>
<DD><B>Deprecated.</B>&nbsp;<I>use the following instead.
 <i>
 <p>
 UDPProtocolOptions opt = (UDPProtocolOptions)SnmpPDU.getProtocolOptions();
 <br>
 int remotePort = opt.getRemotePort();
 </i></I>
<P>
<DD>Gets the Remote port of SNMP peer. 
 The remotePort parameter in SnmpPDU overrides the one in session.
 When remotePort in SnmpPDU is 0, the message is sent to remotePort
 specified in the session.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The remotePort of the SNMP peer to which requests are sent.</DL>
</DD>
</DL>
<HR>

<A NAME="setRemotePort(int)"><!-- --></A><H3>
setRemotePort</H3>
<PRE>
public void <B>setRemotePort</B>(int&nbsp;port)</PRE>
<DL>
<DD><B>Deprecated.</B>&nbsp;<I>use the following instead.
 <i>
 <p>
 UDPProtocolOptions opt = (UDPProtocolOptions)SnmpPDU.getProtocolOptions();
 <br>
 opt.setRemotePort(port);
 </i></I>
<P>
<DD>Sets the Remote port of SNMP peer. 
 The remotePort parameter in SnmpPDU overrides the one in session.
 When remotePort in SnmpPDU is 0, the message is sent to remotePort
 specified in the session.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>port</CODE> - The port of the SNMP peer to which requests should
 be sent.
 <p>
 This method accepts port values such that * port >= 0 and < 65536</DL>
</DD>
</DL>
<HR>

<A NAME="getCommand()"><!-- --></A><H3>
getCommand</H3>
<PRE>
public byte <B>getCommand</B>()</PRE>
<DL>
<DD>Gets command type of this PDU. The command type is one of the 
 constants defined in the SnmpAPI.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the command type of the PDU.</DL>
</DD>
</DL>
<HR>

<A NAME="setCommand(byte)"><!-- --></A><H3>
setCommand</H3>
<PRE>
public void <B>setCommand</B>(byte&nbsp;type)</PRE>
<DL>
<DD>Sets command type of this PDU.  The command type is one of the 
 constants defined in the SnmpAPI.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>type</CODE> - The command type to be set for this PDU.
 <p>
 The various command types that can be passed as argument
 to this method are:
 <br>
 SnmpAPI.GET_REQ_MSG, SnmpAPI.GETNEXT_REQ_MSG,
 SnmpAPI.SET_REQ_MSG, SnmpAPI.TRP_REQ_MSG,
 SnmpAPI.GET_RSP_MSG,
 SnmpAPI.TRP2_REQ_MSG, SnmpAPI.GETBULK_REQ_MSG,
 SnmpAPI.INFORM_REQ_MSG and SnmpAPI.REPORT_MSG
 <p>
 This method will not accept values other than the one mentioned above.</DL>
</DD>
</DL>
<HR>

<A NAME="getReqid()"><!-- --></A><H3>
getReqid</H3>
<PRE>
public int <B>getReqid</B>()</PRE>
<DL>
<DD>Gets request id of this PDU.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The requestID of this PDU.</DL>
</DD>
</DL>
<HR>

<A NAME="setReqid(int)"><!-- --></A><H3>
setReqid</H3>
<PRE>
public void <B>setReqid</B>(int&nbsp;id)</PRE>
<DL>
<DD>Sets Request id for this PDU.
 If requestID is set nonzero, the API leaves it alone.  If it's 
 0 the API assigns a unique requestID, to ensure no conflict with other
 requests.  So, if you do not want to manage the request ids yourself,
 it should be 0. The default value is 0. If you are reusing the PDU
 and do not want to manage the requestID yourself, set it to 0 
 each time.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>id</CODE> - The requestID for this PDU.
 The valid values ranges from -2147483648 to 2147483647(both inclusive).</DL>
</DD>
</DL>
<HR>

<A NAME="getErrstat()"><!-- --></A><H3>
getErrstat</H3>
<PRE>
public int <B>getErrstat</B>()</PRE>
<DL>
<DD>Gets error status of this PDU.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The error status of this PDU.</DL>
</DD>
</DL>
<HR>

<A NAME="getError()"><!-- --></A><H3>
getError</H3>
<PRE>
public java.lang.String <B>getError</B>()</PRE>
<DL>
<DD>Gets error information as a String, with offending varbind if any.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The error information in the PDU as a String with offending
 varbind if any.</DL>
</DD>
</DL>
<HR>

<A NAME="setErrstat(int)"><!-- --></A><H3>
setErrstat</H3>
<PRE>
public void <B>setErrstat</B>(int&nbsp;stat)</PRE>
<DL>
<DD>Set Error status for this PDU.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>stat</CODE> - The error status to be set for this PDU.
 The error status values that can be set using this method are
 <br>
 SnmpAPI.SNMP_ERR_NOERROR, SnmpAPI.SNMP_ERR_TOOBIG,
 SnmpAPI.SNMP_ERR_NOSUCHNAME, SnmpAPI.SNMP_ERR_BADVALUE,
 SnmpAPI.SNMP_ERR_READONLY, SnmpAPI.SNMP_ERR_GENERR,
 SnmpAPI.SNMP_ERR_NOACCESS, SnmpAPI.SNMP_ERR_WRONGTYPE,
 SnmpAPI.SNMP_ERR_WRONGLENGTH, SnmpAPI.SNMP_ERR_WRONGENCODING,
 SnmpAPI.SNMP_ERR_WRONGVALUE, SnmpAPI.SNMP_ERR_NOCREATION,
 SnmpAPI.SNMP_ERR_INCONSISTENTVALUE,
 SnmpAPI.SNMP_ERR_RESOURCEUNAVAILABLE,
 SnmpAPI.SNMP_ERR_COMMITFAILED, SnmpAPI.SNMP_ERR_UNDOFAILED,
 SnmpAPI.SNMP_ERR_AUTHORIZATIONERROR,
 SnmpAPI.SNMP_ERR_NOTWRITABLE and
 SnmpAPI.SNMP_ERR_INCONSISTENTNAME
 <p>
 This method will not accept values other than the one mentioned above.</DL>
</DD>
</DL>
<HR>

<A NAME="getErrindex()"><!-- --></A><H3>
getErrindex</H3>
<PRE>
public int <B>getErrindex</B>()</PRE>
<DL>
<DD>Gets error index of this PDU.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The error index of this PDU.</DL>
</DD>
</DL>
<HR>

<A NAME="setErrindex(int)"><!-- --></A><H3>
setErrindex</H3>
<PRE>
public void <B>setErrindex</B>(int&nbsp;index)</PRE>
<DL>
<DD>Sets Error index for this PDU.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>index</CODE> - The error index to be set for this PDU.
 Only values >= zero will be accepted by this method.</DL>
</DD>
</DL>
<HR>

<A NAME="getNonRepeaters()"><!-- --></A><H3>
getNonRepeaters</H3>
<PRE>
public int <B>getNonRepeaters</B>()</PRE>
<DL>
<DD>Gets Non-Repeaters value of this PDU.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the Non-Repeaters value for this PDU.</DL>
</DD>
</DL>
<HR>

<A NAME="setNonRepeaters(int)"><!-- --></A><H3>
setNonRepeaters</H3>
<PRE>
public void <B>setNonRepeaters</B>(int&nbsp;non_rep)</PRE>
<DL>
<DD>Sets Non-Repeaters value for this PDU.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>non_rep</CODE> - The Non-Repeaters value for this PDU.</DL>
</DD>
</DL>
<HR>

<A NAME="getMaxRepetitions()"><!-- --></A><H3>
getMaxRepetitions</H3>
<PRE>
public int <B>getMaxRepetitions</B>()</PRE>
<DL>
<DD>GetsMax-Repetitions value of this PDU.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The Max-Repetitions value of this PDU.</DL>
</DD>
</DL>
<HR>

<A NAME="setMaxRepetitions(int)"><!-- --></A><H3>
setMaxRepetitions</H3>
<PRE>
public void <B>setMaxRepetitions</B>(int&nbsp;max_rep)</PRE>
<DL>
<DD>Sets Max-Repetitions value for this PDU.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>max_rep</CODE> - The Max-Repetitions value for this PDU.
 The valid values ranges from 0 to 65535(both inclusive).</DL>
</DD>
</DL>
<HR>

<A NAME="getEnterprise()"><!-- --></A><H3>
getEnterprise</H3>
<PRE>
public <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpOID.html">SnmpOID</A> <B>getEnterprise</B>()</PRE>
<DL>
<DD>Gets the enterprise OID. i.e get the enterprise field of the trap PDU 
 which is of type SnmpOID.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The enterprise field of the PDU.</DL>
</DD>
</DL>
<HR>

<A NAME="setEnterprise(com.adventnet.snmp.snmp2.SnmpOID)"><!-- --></A><H3>
setEnterprise</H3>
<PRE>
public void <B>setEnterprise</B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpOID.html">SnmpOID</A>&nbsp;oid)</PRE>
<DL>
<DD>Sets the enterprise OID. i.e set the enterprise field of the trap
 PDU which is of type SnmpOID.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>oid</CODE> - The SnmpOID representing the entriprise field of PDU to
 be set.</DL>
</DD>
</DL>
<HR>

<A NAME="getAgentAddress()"><!-- --></A><H3>
getAgentAddress</H3>
<PRE>
public java.net.InetAddress <B>getAgentAddress</B>()</PRE>
<DL>
<DD>Gets address of object generating trap.
 In the case of SNMPv2 TRAP PDU if  one of the 
 varbind contains the snmpTrapAddress.0 oid
 the corresponding value is returned as 
 the agent address.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The address of object generating trap.</DL>
</DD>
</DL>
<HR>

<A NAME="setAgentAddress(java.net.InetAddress)"><!-- --></A><H3>
setAgentAddress</H3>
<PRE>
public void <B>setAgentAddress</B>(java.net.InetAddress&nbsp;addr)</PRE>
<DL>
<DD>Sets Address of object generating trap.
 In the case of SNMPv2c TRAP PDU an additional varbind is added,
 if its not already present in the varbind list. The varbind contains
 the snmpTrapAddress.0 (defined in RFC2576) as the oid and the value (SnmpVar) 
 will be the agent address. There is no need to add this varbind explicitly.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>addr</CODE> - The address of object generating trap.</DL>
</DD>
</DL>
<HR>

<A NAME="getAgentAddr()"><!-- --></A><H3>
getAgentAddr</H3>
<PRE>
public java.lang.String <B>getAgentAddr</B>()</PRE>
<DL>
<DD>Gets the address of object generating trap in String foramt.
 In the case of SNMPv2 TRAP PDU if one of the
 varbind contains the snmpTrapAddress.0 oid
 the corresponding value is returned as
 the agent address.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The address of object generating trap as a String.</DL>
</DD>
</DL>
<HR>

<A NAME="setAgentAddr(java.lang.String)"><!-- --></A><H3>
setAgentAddr</H3>
<PRE>
public void <B>setAgentAddr</B>(java.lang.String&nbsp;agentaddr)</PRE>
<DL>
<DD>sets the agent address as a string. If the agentaddr is invalid, then value is set as "0.0.0.0".
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>agentaddr</CODE> - the agent address as a string. This can be
 hostname or an address in the dotted form.</DL>
</DD>
</DL>
<HR>

<A NAME="getTrapType()"><!-- --></A><H3>
getTrapType</H3>
<PRE>
public int <B>getTrapType</B>()</PRE>
<DL>
<DD>Gets the generic type of the trap.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The generic type of the trap of this PDU.</DL>
</DD>
</DL>
<HR>

<A NAME="setTrapType(int)"><!-- --></A><H3>
setTrapType</H3>
<PRE>
public void <B>setTrapType</B>(int&nbsp;type)</PRE>
<DL>
<DD>Sets the generic type of the Trap.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>type</CODE> - The generic type of the trap for this PDU.
 This method will accept values only from 0 to
 6(both inclusive).</DL>
</DD>
</DL>
<HR>

<A NAME="getSpecificType()"><!-- --></A><H3>
getSpecificType</H3>
<PRE>
public int <B>getSpecificType</B>()</PRE>
<DL>
<DD>Gets specific trap type.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The specific type of this PDU.</DL>
</DD>
</DL>
<HR>

<A NAME="setSpecificType(int)"><!-- --></A><H3>
setSpecificType</H3>
<PRE>
public void <B>setSpecificType</B>(int&nbsp;type)</PRE>
<DL>
<DD>Sets Specific trap type.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>type</CODE> - The Specific trap type for this PDU.</DL>
</DD>
</DL>
<HR>

<A NAME="getUpTime()"><!-- --></A><H3>
getUpTime</H3>
<PRE>
public long <B>getUpTime</B>()</PRE>
<DL>
<DD>Gets the timeStamp of the object which has generated the trap.
 The timeStamp value is in milliseconds.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The timeStamp of the object which has generated the trap.
 This will return the value that is present in the time-stamp field
 present in a SNMPv1 trap-pdu.
 In case of a SNMPv2 trap-pdu, this method will return the sysUpTime
 value that is present in the first varbind. If this PDU is not a 
 trap PDU, then this method will return '0'.</DL>
</DD>
</DL>
<HR>

<A NAME="getTrapOID()"><!-- --></A><H3>
getTrapOID</H3>
<PRE>
public <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpOID.html">SnmpOID</A> <B>getTrapOID</B>()</PRE>
<DL>
<DD>This method returns the trap-oid for this SNMPv2 trap-pdu.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>returns the trap oid that will be present in the
 second variable binding of a SNMPv2 trap-pdu. If this is
 not a SNMPv2 trap-pdu, then the method will return null.</DL>
</DD>
</DL>
<HR>

<A NAME="setUpTime(long)"><!-- --></A><H3>
setUpTime</H3>
<PRE>
public void <B>setUpTime</B>(long&nbsp;uptime)</PRE>
<DL>
<DD>Sets the timeStamp of the object which has to generate the trap.
 The timeStamp value is in milliseconds.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>uptime</CODE> - The timeStamp for the object which has to 
 generate the trap.
 <p>
 This method will accept values such that
 uptime >= 0 and uptime < 4294967296L</DL>
</DD>
</DL>
<HR>

<A NAME="getVariableBindings()"><!-- --></A><H3>
getVariableBindings</H3>
<PRE>
public java.util.Vector <B>getVariableBindings</B>()</PRE>
<DL>
<DD>Gets list of SnmpVarBind objects as a vector.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>A vector of SnmpVarBind objects associated with this PDU.</DL>
</DD>
</DL>
<HR>

<A NAME="getVariableBinding(int)"><!-- --></A><H3>
getVariableBinding</H3>
<PRE>
public <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpVarBind.html">SnmpVarBind</A> <B>getVariableBinding</B>(int&nbsp;index)</PRE>
<DL>
<DD>Gets specified variable binding from PDUs list of variable bindings.
 Indexes start at 0, so subtract one when using errindex.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>index</CODE> - The index of the SnmpVarBind which should be returned
 from the PDU's list of variable bindings.
<DT><B>Returns:</B><DD>The SnmpVarBind corresponding to the index in the PDU's
 list of variable bindings.</DL>
</DD>
</DL>
<HR>

<A NAME="getVariable(int)"><!-- --></A><H3>
getVariable</H3>
<PRE>
public <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpVar.html">SnmpVar</A> <B>getVariable</B>(int&nbsp;index)</PRE>
<DL>
<DD>Gets specified SNMP variable from PDUs list of variables.
 Indexes start at 0, so subtract one when using errindex.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>index</CODE> - The index of the SnmpVarBind from the PDU's list
 of variable bindings.
<DT><B>Returns:</B><DD>The SnmpVar of the SnmpVarBind corresponding to the index
 in the PDU's list of variable bindings.</DL>
</DD>
</DL>
<HR>

<A NAME="setVariable(int, com.adventnet.snmp.snmp2.SnmpVar)"><!-- --></A><H3>
setVariable</H3>
<PRE>
public void <B>setVariable</B>(int&nbsp;index,
                        <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpVar.html">SnmpVar</A>&nbsp;var)</PRE>
<DL>
<DD>Sets SNMP variable at specified index in PDUs list of variables,
 to value var.  Indexes start at 0.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>index</CODE> - The index for the PDU's list of varaible bindings
 for which the SnmpVar has to be set.<DD><CODE>var</CODE> - The SnmpVar which has to be set in the PDU's list
 of variable binding into the index specified by the index parameter.</DL>
</DD>
</DL>
<HR>

<A NAME="addVariableBinding(int, com.adventnet.snmp.snmp2.SnmpVarBind)"><!-- --></A><H3>
addVariableBinding</H3>
<PRE>
public void <B>addVariableBinding</B>(int&nbsp;index,
                               <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpVarBind.html">SnmpVarBind</A>&nbsp;varbind)</PRE>
<DL>
<DD>Adds SNMP variable at specified index in PDUs list of 
 variable bindings.  Indexes start at 0.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>index</CODE> - The index for the PDU's list of variable bindings
 for which the SnmpVarBind has to be added.<DD><CODE>varbind</CODE> - The SnmpVarBind which has to be added in the 
 specified position specified by the index in the PDU's list
 of variable bindings.
 <p>
 The varbind will not be added to the list of variable bindings
 if any one of the following condition is true:
 <br>
 1. The varbind object is null
 <br>
 2. The index specified is invalid, that is, if the index is
 less than 0 or greater than the variable bindings size.
 <br>
 3. The SnmpOID in the SnmpVarBind is invalid or null.</DL>
</DD>
</DL>
<HR>

<A NAME="addVariableBinding(com.adventnet.snmp.snmp2.SnmpVarBind)"><!-- --></A><H3>
addVariableBinding</H3>
<PRE>
public void <B>addVariableBinding</B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpVarBind.html">SnmpVarBind</A>&nbsp;varbind)</PRE>
<DL>
<DD>Adds SNMP variable at the end of PDU's list of variable bindings.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>varbind</CODE> - The SnmpVarBind to be added at the end of PDU's
 list of variable bindings.
 <p>
 The varbind will not be added to the list of variable bindings
 if any one of the following condition is true:
 <br>
 1. The varbind object is null
 <br>
 2. The SnmpOID in the SnmpVarBind is invalid or null.</DL>
</DD>
</DL>
<HR>

<A NAME="removeVariableBinding(int)"><!-- --></A><H3>
removeVariableBinding</H3>
<PRE>
public void <B>removeVariableBinding</B>(int&nbsp;index)</PRE>
<DL>
<DD>Removes SNMP variable binding at specified index in PDUs
 list of variable bindings.  Indexes start at 0.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>index</CODE> - The index value in the PDU's list of variable
 bindings for which the SnmpVarBind has to be removed.</DL>
</DD>
</DL>
<HR>

<A NAME="removeVariableBinding(com.adventnet.snmp.snmp2.SnmpVarBind)"><!-- --></A><H3>
removeVariableBinding</H3>
<PRE>
public void <B>removeVariableBinding</B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpVarBind.html">SnmpVarBind</A>&nbsp;varbind)</PRE>
<DL>
<DD>Removes specified SNMP variable binding from PDUs
 list of variable bindings.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>varbind</CODE> - The SnmpVarbind which has to be removed from the 
 PDU's list of variable bindings.</DL>
</DD>
</DL>
<HR>

<A NAME="getObjectID(int)"><!-- --></A><H3>
getObjectID</H3>
<PRE>
public <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpOID.html">SnmpOID</A> <B>getObjectID</B>(int&nbsp;index)</PRE>
<DL>
<DD>Gets the specified SNMP ObjectID from PDUs list of variable bindings.
 Indexes start at 0, so subtract one when using errindex.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>index</CODE> - The index value in the PDU's list of variable
 bindings for which the SnmpOID is to be retrived.
<DT><B>Returns:</B><DD>the SnmpOID which is present in the specified index.</DL>
</DD>
</DL>
<HR>

<A NAME="getCommunity()"><!-- --></A><H3>
getCommunity</H3>
<PRE>
public java.lang.String <B>getCommunity</B>()</PRE>
<DL>
<DD>Gets community string received/sent.
 The community string in the pdu overrides the community set 
 in session. This means, only when the community string in the 
 pdu is null, the one in session is used.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the community of this PDU.</DL>
</DD>
</DL>
<HR>

<A NAME="setCommunity(java.lang.String)"><!-- --></A><H3>
setCommunity</H3>
<PRE>
public void <B>setCommunity</B>(java.lang.String&nbsp;t)</PRE>
<DL>
<DD>Sets community string received/sent.
 The community string in the pdu overrides the community set 
 in session. This means, only when the community string in the 
 pdu is null, the one in session is used.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>t</CODE> - The community to be set for this PDU.</DL>
</DD>
</DL>
<HR>

<A NAME="getWriteCommunity()"><!-- --></A><H3>
getWriteCommunity</H3>
<PRE>
public java.lang.String <B>getWriteCommunity</B>()</PRE>
<DL>
<DD>Gets writeCommunity string received/sent. This is used
 in SET operations only. The writeCommunity string in the 
 pdu overrides the writeCommunity in session. This means, only when 
 the writeCommunity string in the pdu is null, the one in session 
 is used. If the writeCommunity is not specified, then value in 
 community field is used.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The writeCommunity of this PDU.</DL>
</DD>
</DL>
<HR>

<A NAME="setWriteCommunity(java.lang.String)"><!-- --></A><H3>
setWriteCommunity</H3>
<PRE>
public void <B>setWriteCommunity</B>(java.lang.String&nbsp;t)</PRE>
<DL>
<DD>Sets writeCommunity string received/sent. This is used
 in SET operations only. The writeCommunity string in the 
 pdu overrides the writeCommunity in session. This means, only when 
 the writeCommunity string in the pdu is null, the one in session 
 is used. If the writeCommunity is not specified, then value in 
 community field is used.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>t</CODE> - The writeCommunity to be set for this PDU.</DL>
</DD>
</DL>
<HR>

<A NAME="getTimeout()"><!-- --></A><H3>
getTimeout</H3>
<PRE>
public int <B>getTimeout</B>()</PRE>
<DL>
<DD>Gets the timeout value. The timeout is the time to wait for the 
 first response in milli-seconds, before attempting a retransmission.
 The timeout value grows exponentially, after the first 
 retransmission. For example, if the timeout is set to 5000 
 (meaning 5 seconds) and retries is set to 3,  the first 
 retransmission will happen after 5 seconds, the second after 
 15 seconds etc. The timeout in the 
 pdu overrides the timeout value in session. This means, only when 
 the timeout in the pdu is 0, the session timeout value is used. 
 The default value of timeout is 0 milliseconds.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The timeout value of this PDU.</DL>
</DD>
</DL>
<HR>

<A NAME="setTimeout(int)"><!-- --></A><H3>
setTimeout</H3>
<PRE>
public void <B>setTimeout</B>(int&nbsp;t)</PRE>
<DL>
<DD>Sets the timeout value. The timeout is the time to wait for the 
 first response in milli-seconds, before attempting a retransmission.
 The timeout value grows exponentially, after the first 
 retransmission. For example, if the timeout is set to 5000 
 (meaning 5 seconds) and retries is set to 3,  the first 
 retransmission will happen after 5 seconds, the second after 
 15 seconds etc. The timeout in the 
 pdu overrides the timeout value in session. This means, only when 
 the timeout in the pdu is 0, the session timeout value is used. 
 The default value of timeout is 0 milliseconds.
 The timeout value to be set should be in milliseconds.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>t</CODE> - The timeout value for this PDU.
 This method accepts values which are greater than zero.</DL>
</DD>
</DL>
<HR>

<A NAME="getRetries()"><!-- --></A><H3>
getRetries</H3>
<PRE>
public int <B>getRetries</B>()</PRE>
<DL>
<DD>Gets number of retries for this PDU before timeout. The retries in the 
 pdu overrides the retries value in session. This means, only when 
 the retries in the pdu is 0, the session value is used. 
 The default value of retries is 0.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The retries value of this PDU.</DL>
</DD>
</DL>
<HR>

<A NAME="setRetries(int)"><!-- --></A><H3>
setRetries</H3>
<PRE>
public void <B>setRetries</B>(int&nbsp;N)</PRE>
<DL>
<DD>Sets number of retries for this PDU before timeout. The retries in the 
 pdu overrides the retries value in session. This means, only when 
 the retries in the pdu is 0, the session value is used. 
 The default value of retries is 0.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>N</CODE> - The retries value for this PDU.
 This method accepts value such that N >= 0.</DL>
</DD>
</DL>
<HR>

<A NAME="getData()"><!-- --></A><H3>
getData</H3>
<PRE>
public byte[] <B>getData</B>()</PRE>
<DL>
<DD>Gets encoded data to be sent, or received.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The encoded data to be sent, or received.
 In case of SNMPv3 auth-priv packet, this method will
 return the encrypted data.</DL>
</DD>
</DL>
<HR>

<A NAME="setData(byte[])"><!-- --></A><H3>
setData</H3>
<PRE>
public void <B>setData</B>(byte[]&nbsp;b)</PRE>
<DL>
<DD>Sets encoded data to be sent, or received.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>b</CODE> - The encoded data to be sent, or received.</DL>
</DD>
</DL>
<HR>

<A NAME="getVersion()"><!-- --></A><H3>
getVersion</H3>
<PRE>
public int <B>getVersion</B>()</PRE>
<DL>
<DD>Gets snmp Version number in PDU. 
 When using this SNMPv3 API to build applications, all the 
 SNMPv1, SNMPv2c and SNMPv3 messages can be sent and received 
 using the same session, irrespective of the version set in the 
 session object. The version set in SnmpPDU overrides the version
 in the session.
 For example, if a session version is set 
 to SnmpAPI.SNMP_VERSION_3, and a pdu is sent without setting its 
 version explicitly (the pdu will have the default version of
 SnmpAPI.SNMP_VERSION_1), then an SNMPv3 message is sent to the 
 peer SNMP entity. On the other hand, if the pdu version is set 
 explicitly to SnmpAPI.SNMP_VERSION_2C, an SNMPv2c message will be 
 sent to the peer entity. 
<p>
 It is to be noted that when an application sends an SNMPv1 pdu 
 using a session whose version is set to SNMP_VERSION_3, an SNMPv3
 message is sent to the peer. This problem arises because the
 API uses SNMP_VERSION_1 as the default  pdu version and it could 
 not distinguish between applications leaving the version in pdu 
 to default and setting it explicitly to SNMP_VERSION_1.  
 To circumvent this problem, applications should set session 
 version to SNMP_VERSION_1 and set the pdu version explicitly 
 to SNMP_VERSION_2C or SNMP_VERSION_3 while communicating with 
 v2c and v3 peers.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The version of outgoing SNMP requests.</DL>
</DD>
</DL>
<HR>

<A NAME="setVersion(int)"><!-- --></A><H3>
setVersion</H3>
<PRE>
public void <B>setVersion</B>(int&nbsp;v)</PRE>
<DL>
<DD>Sets snmp Version number in PDU. 
 When using this SNMPv3 API to build applications, all the 
 SNMPv1, SNMPv2c and SNMPv3 messages can be sent and received 
 using the same session, irrespective of the version set in the 
 session object. The version set in SnmpPDU overrides the version
 in the session.
 For example, if a session version is set 
 to SnmpAPI.SNMP_VERSION_3, and a pdu is sent without setting its 
 version explicitly (the pdu will have the default version of
 SnmpAPI.SNMP_VERSION_1), then an SNMPv3 message is sent to the 
 peer SNMP entity. On the other hand, if the pdu version is set 
 explicitly to SnmpAPI.SNMP_VERSION_2C, an SNMPv2c message will be 
 sent to the peer entity. 
<p>
 It is to be noted that when an application sends an SNMPv1 pdu 
 using a session whose version is set to SNMP_VERSION_3, an SNMPv3
 message is sent to the peer. This problem arises because the
 API uses SNMP_VERSION_1 as the default  pdu version and it could 
 not distinguish between applications leaving the version in pdu 
 to default and setting it explicitly to SNMP_VERSION_1.  
 To circumvent this problem, applications should set session 
 version to SNMP_VERSION_1 and set the pdu version explicitly 
 to SNMP_VERSION_2C or SNMP_VERSION_3 while communicating with 
 v2c and v3 peers.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>v</CODE> - The version for outgoing SNMP requests.
 This method will accept the value only when the value is 
 SnmpAPI.SNMP_VERSION_1 or SnmpAPI.SNMP_VERSION2C or
 SnmpAPI.SNMP_VERSION_3</DL>
</DD>
</DL>
<HR>

<A NAME="setUserName(byte[])"><!-- --></A><H3>
setUserName</H3>
<PRE>
public void <B>setUserName</B>(byte[]&nbsp;name)</PRE>
<DL>
<DD>Sets the principal on whose behalf SNMPv3 requests are to be made.
 While sending an SNMPv3 request this userName has to be set.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - The principal on whose behalf, SNMPv3 requests
 are to be sent.</DL>
</DD>
</DL>
<HR>

<A NAME="getUserName()"><!-- --></A><H3>
getUserName</H3>
<PRE>
public byte[] <B>getUserName</B>()</PRE>
<DL>
<DD>Gets the principal on whose behalf SNMPv3 requests are made.
 While sending an SNMPv3 request this userName has to be set.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The principal on whose behalf, SNMPv3 requests are sent.</DL>
</DD>
</DL>
<HR>

<A NAME="setContextID(byte[])"><!-- --></A><H3>
setContextID</H3>
<PRE>
public void <B>setContextID</B>(byte[]&nbsp;id)</PRE>
<DL>
<DD>Sets context ID associated with the PDU.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>id</CODE> - The context ID associated with the PDU.</DL>
</DD>
</DL>
<HR>

<A NAME="getContextID()"><!-- --></A><H3>
getContextID</H3>
<PRE>
public byte[] <B>getContextID</B>()</PRE>
<DL>
<DD>Gets context ID sent/received with this PDU.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The context ID associated with the PDU.</DL>
</DD>
</DL>
<HR>

<A NAME="setContextName(byte[])"><!-- --></A><H3>
setContextName</H3>
<PRE>
public void <B>setContextName</B>(byte[]&nbsp;name)</PRE>
<DL>
<DD>Sets the context name associated with the PDU
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - The contextName to be sent with the PDU.</DL>
</DD>
</DL>
<HR>

<A NAME="getContextName()"><!-- --></A><H3>
getContextName</H3>
<PRE>
public byte[] <B>getContextName</B>()</PRE>
<DL>
<DD>Gets the context name sent/received with this PDU.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The context name sent/received with this PDU.</DL>
</DD>
</DL>
<HR>

<A NAME="setSecurityModel(int)"><!-- --></A><H3>
setSecurityModel</H3>
<PRE>
public void <B>setSecurityModel</B>(int&nbsp;model)</PRE>
<DL>
<DD>Sets the securityModel to be associated with the PDU.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>model</CODE> - The securityModel to be sent with the PDU.
 The valid values ranges from 1 to 2147483647(both inclusive).</DL>
</DD>
</DL>
<HR>

<A NAME="getSecurityModel()"><!-- --></A><H3>
getSecurityModel</H3>
<PRE>
public int <B>getSecurityModel</B>()</PRE>
<DL>
<DD>Gets the securityModel associated with this PDU.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The securityModel sent/received with this PDU.</DL>
</DD>
</DL>
<HR>

<A NAME="setReEncode(boolean)"><!-- --></A><H3>
setReEncode</H3>
<PRE>
public void <B>setReEncode</B>(boolean&nbsp;reEncode)</PRE>
<DL>
<DD>Controls ASN.1 encoding (default true).
  Normally a PDU is ASN.1 encoded during every send process.
  If you have a PDU that has been sent already, you can
  save time on subsequent resends by setting this to false.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>reEncode</CODE> - The boolean value which specifies if the PDU is
  to be encoded each time for a send request.</DL>
</DD>
</DL>
<HR>

<A NAME="setCommunityEncoding(java.lang.String)"><!-- --></A><H3>
setCommunityEncoding</H3>
<PRE>
public void <B>setCommunityEncoding</B>(java.lang.String&nbsp;enc)</PRE>
<DL>
<DD>Sets the encoding to use for community string. Default is UTF8
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>enc</CODE> - A character-encoding name
 This method will set the string only when enc is a
 non-null valid encoding string.</DL>
</DD>
</DL>
<HR>

<A NAME="setDebug(boolean)"><!-- --></A><H3>
setDebug</H3>
<PRE>
public void <B>setDebug</B>(boolean&nbsp;debug)</PRE>
<DL>
<DD>Defines whether debugging output should be generated for this PDU.
 In the debug mode, the PDU data is printed in hex format.
 If you want to enable the debug option for all snmp communications
 that happens through the SnmpAPI, you can use the method setDebug 
 in SnmpAPI.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>debug</CODE> - boolean value. If set to true, the debugging output 
				will be generated for this PDU.<DT><B>See Also:</B><DD><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpAPI.html#getDebug()"><CODE>SnmpAPI.getDebug()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="copy()"><!-- --></A><H3>
copy</H3>
<PRE>
public <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html">SnmpPDU</A> <B>copy</B>()</PRE>
<DL>
<DD>Makes a copy of entire SnmpPDU including the SnmpMessage it encapsulates.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The copy of PDU</DL>
</DD>
</DL>
<HR>

<A NAME="copyWithoutVarbinds()"><!-- --></A><H3>
copyWithoutVarbinds</H3>
<PRE>
public <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html">SnmpPDU</A> <B>copyWithoutVarbinds</B>()</PRE>
<DL>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="addNull(com.adventnet.snmp.snmp2.SnmpOID)"><!-- --></A><H3>
addNull</H3>
<PRE>
public void <B>addNull</B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpOID.html">SnmpOID</A>&nbsp;oid)</PRE>
<DL>
<DD>This method will add a vairable binding which contains
 this SnmpOID and a placeholder ( NULL ) as the value.
 <br>
 Only non-null, valid SnmpOID will be added to the list of
 variable bindings.
 This method is used while doing a GET or GETNEXT request.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>oid</CODE> - the SnmpOID object to add to the VarBind list<DT><B>See Also:</B><DD><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html#getVariableBindings()"><CODE>getVariableBindings()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="fix()"><!-- --></A><H3>
fix</H3>
<PRE>
public void <B>fix</B>()</PRE>
<DL>
<DD>Fixes PDU to eliminate erred variable binding, determined by errindex
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getRoundTripDelay()"><!-- --></A><H3>
getRoundTripDelay</H3>
<PRE>
public long <B>getRoundTripDelay</B>()</PRE>
<DL>
<DD>Returns round-trip delay if received response PDU
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="printVarBinds()"><!-- --></A><H3>
printVarBinds</H3>
<PRE>
public java.lang.String <B>printVarBinds</B>()</PRE>
<DL>
<DD>Returns String of all variable bindings with Tags, e.g. STRING:...
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getEncodedLength(com.adventnet.snmp.snmp2.SnmpSession)"><!-- --></A><H3>
getEncodedLength</H3>
<PRE>
public int <B>getEncodedLength</B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html">SnmpSession</A>&nbsp;session)</PRE>
<DL>
<DD>Returns the length of the encoded pdu.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The length of the encoded pdu.</DL>
</DD>
</DL>
<HR>

<A NAME="decode()"><!-- --></A><H3>
decode</H3>
<PRE>
public boolean <B>decode</B>()
               throws <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpException.html">SnmpException</A></PRE>
<DL>
<DD>Decodes the remainder of the PDU. Decodes the PDU stating from the
 error status value. The constructor already decodes down
 to the request ID.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpException.html">SnmpException</A></CODE> - is thrown upon decode errors.</DL>
</DD>
</DL>
<HR>

<A NAME="setProtocolOptions(com.adventnet.snmp.snmp2.ProtocolOptions)"><!-- --></A><H3>
setProtocolOptions</H3>
<PRE>
public void <B>setProtocolOptions</B>(<A HREF="../../../../com/adventnet/snmp/snmp2/ProtocolOptions.html">ProtocolOptions</A>&nbsp;tParam)</PRE>
<DL>
<DD>This sets the transport mechanism's protocol options.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>tParam</CODE> - protocol options to be set.</DL>
</DD>
</DL>
<HR>

<A NAME="getProtocolOptions()"><!-- --></A><H3>
getProtocolOptions</H3>
<PRE>
public <A HREF="../../../../com/adventnet/snmp/snmp2/ProtocolOptions.html">ProtocolOptions</A> <B>getProtocolOptions</B>()</PRE>
<DL>
<DD>This method will return the transport mechanism's protocol options
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the protocol options corresponding to this pdu.</DL>
</DD>
</DL>
<HR>

<A NAME="setClientID(int)"><!-- --></A><H3>
setClientID</H3>
<PRE>
public void <B>setClientID</B>(int&nbsp;id)</PRE>
<DL>
<DD>This method will indicate the id for source which sent this pdu
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getClientID()"><!-- --></A><H3>
getClientID</H3>
<PRE>
public int <B>getClientID</B>()</PRE>
<DL>
<DD>This method will return the id for the source which sent this pdu
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setDNSLookup(boolean)"><!-- --></A><H3>
setDNSLookup</H3>
<PRE>
public void <B>setDNSLookup</B>(boolean&nbsp;lookup)</PRE>
<DL>
<DD><B>Deprecated.</B>&nbsp;<I>since no lookup will be done unnecessarily.</I>
<P>
<DD>This method will set the DNS Lookup flag. 
 If this flag is set to false, DNS lookup will not be done only
 when remoteHost is being set on this SnmpPDU instance.
 By default the flag is set to true (ie) DNS lookup will be done.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>lookup</CODE> - The DNS lookup flag to be set.
 WARNING : This flag can be set to false while doing non-SNMP operations if
 the user wants to just set the remoteHost field with no DNS lookup done.</DL>
</DD>
</DL>
<HR>

<A NAME="getVariable(com.adventnet.snmp.snmp2.SnmpOID)"><!-- --></A><H3>
getVariable</H3>
<PRE>
public <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpVar.html">SnmpVar</A> <B>getVariable</B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpOID.html">SnmpOID</A>&nbsp;oid)</PRE>
<DL>
<DD>Gets specified SNMP variable from PDUs list of variables.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>oid</CODE> - The SnmpOID of the SnmpVarBind from the PDU's list
 of variable bindings.
<DT><B>Returns:</B><DD>The SnmpVar of the SnmpVarBind corresponding to the SnmpOID
 in the PDU's list of variable bindings.<DT><B>Since:</B><DD>AdventNet SNMP API 4 SP2 ( Release 4.0.2 )</DD>
</DD>
</DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>

<!-- ========== START OF NAVBAR ========== -->
<A NAME="navbar_bottom"><!-- --></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0">
<TR>
<TD COLSPAN=3 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpOpaque.html"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../index.html" TARGET="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="SnmpPDU.html" TARGET="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;
<SCRIPT>
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
<A HREF="../../../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>
</NOSCRIPT>
</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<!-- =========== END OF NAVBAR =========== -->

<HR>
Copyright (c)AdventNet Inc., 1996-2006
</BODY>
</HTML>
