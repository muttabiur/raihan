<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN""http://www.w3.org/TR/REC-html40/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc on Tue Nov 07 19:59:03 IST 2006 -->
<TITLE>
UDPProtocolOptions (AdventNet)
</TITLE>
<LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../stylesheet.css" TITLE="Style">
</HEAD>
<SCRIPT>
function asd()
{
parent.document.title="UDPProtocolOptions (AdventNet)";
}
</SCRIPT>
<BODY BGCOLOR="white" onload="asd();">

<!-- ========== START OF NAVBAR ========== -->
<A NAME="navbar_top"><!-- --></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0">
<TR>
<TD COLSPAN=3 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../../com/adventnet/snmp/snmp2/TimeoutPolicy.html"><B>PREV CLASS</B></A>&nbsp;
&nbsp;NEXT CLASS</FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../index.html" TARGET="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="UDPProtocolOptions.html" TARGET="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;
<SCRIPT>
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
<A HREF="../../../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>
</NOSCRIPT>
</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<!-- =========== END OF NAVBAR =========== -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
<FONT SIZE="-1">
com.adventnet.snmp.snmp2</FONT>
<BR>
Class  UDPProtocolOptions</H2>
<PRE>
java.lang.Object
  |
  +--<B>com.adventnet.snmp.snmp2.UDPProtocolOptions</B>
</PRE>
<DL>
<DT><B>All Implemented Interfaces:</B> <DD><A HREF="../../../../com/adventnet/snmp/snmp2/ProtocolOptions.html">ProtocolOptions</A>, java.io.Serializable</DD>
</DL>
<HR>
<DL>
<DT>public class <B>UDPProtocolOptions</B><DT>extends java.lang.Object<DT>implements <A HREF="../../../../com/adventnet/snmp/snmp2/ProtocolOptions.html">ProtocolOptions</A>, java.io.Serializable</DL>

<P>
This is an implementation of ProtocolOptions class.
 The default protocol that is used for SNMP communications
 is UDP.
 <br>
 Now every packet that is sent through SnmpSession will go
 through the UDP implementation of SnmpTransportProvider and
 parameters that is needed for such operations should be
 given through this UDPProtocolOptions.
 <p>
 The UDPProtocolOptions that should be constructed before
 opening a SnmpSession should look like the following:
 <i>
 <p>
 UDPProtocolOptions options = new UDPProtocolOptions();
 <br>
 <br>
 // If the session should be opened on a particular port.
 <br>
 options.setLocalPort(localPort);
 <br>
 // If the session should be opened on particular local_address.
 <br>
 options.setLocalAddress(local_address);
 <p>
 SnmpSession session = new SnmpSession(api);
 <br>
 session.setProtocolOptions(options);
 <br>
 session.open();
 </i>
 <p>
 Once SnmpSession is opened for SNMP communication, the default values
 such as remoteHost, remotePort can be set on this UDPProtocolOptions
 object. If the remoteHost and remotePort is not specified in the
 SnmpPDU object then the API will take it from the SnmpSession.
 <p>
 For setting the remoteHost and remotePort, the following should be done:
 <i>
 <br>
 UDPProtocolOptions options = (UDPProtocolOptions)session.getProtocolOptions();
 <br>
 options.setRemoteHost(remoteHost);
 <br>
 options.setRemotePort(remotePort);
 <br>
 </i>
<P>

<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../../serialized-form.html" TARGET="com.adventnet.snmp.snmp2.UDPProtocolOptions">Serialized Form</A></DL>
<HR>

<P>
<!-- ======== NESTED CLASS SUMMARY ======== -->


<!-- =========== FIELD SUMMARY =========== -->


<!-- ======== CONSTRUCTOR SUMMARY ======== -->

<A NAME="constructor_summary"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Constructor Summary</B></FONT></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/UDPProtocolOptions.html#UDPProtocolOptions()">UDPProtocolOptions</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The default constructor which will assign default values to
 all the variables in this class.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/UDPProtocolOptions.html#UDPProtocolOptions(java.net.InetAddress)">UDPProtocolOptions</A></B>(java.net.InetAddress&nbsp;remoteAddress)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Constructs a new <code>UDPProtocolOptions</code> object with
 <code>remoteAddress</code> as target address and 161 as the target port.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/UDPProtocolOptions.html#UDPProtocolOptions(java.net.InetAddress, int)">UDPProtocolOptions</A></B>(java.net.InetAddress&nbsp;remoteAddress,
                   int&nbsp;remotePort)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Constructs a new <code>UDPProtocolOptions</code> object with
 <code>remoteAddress</code> and <code>remotePort</code> as
 target host and port.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/UDPProtocolOptions.html#UDPProtocolOptions(java.lang.String)">UDPProtocolOptions</A></B>(java.lang.String&nbsp;remoteHost)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Constructs a new <code>UDPProtocolOptions</code> object with
 <code>remoteHost</code> as target host and 161 as the target port.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/UDPProtocolOptions.html#UDPProtocolOptions(java.lang.String, int)">UDPProtocolOptions</A></B>(java.lang.String&nbsp;remoteHost,
                   int&nbsp;remotePort)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Constructs a new <code>UDPProtocolOptions</code> object with
 <code>remoteHost</code> and <code>remotePort</code> as
 target host and port.</TD>
</TR>
</TABLE>
&nbsp;
<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Method Summary</B></FONT></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/UDPProtocolOptions.html#getLocalAddresses()">getLocalAddresses</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method gets the local addresses for which the 
 session should bind with.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/UDPProtocolOptions.html#getLocalPort()">getLocalPort</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method returns the local port at which the session should be
 opened.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/UDPProtocolOptions.html#getReceiveBufferSize()">getReceiveBufferSize</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method returns the previously set buffer size
 or zero.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.net.InetAddress</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/UDPProtocolOptions.html#getRemoteAddress()">getRemoteAddress</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method gets the remoteAddress as an InetAddress object.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/UDPProtocolOptions.html#getRemoteAddressAsString()">getRemoteAddressAsString</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method gets the remoteAddress as a String.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/UDPProtocolOptions.html#getRemoteHost()">getRemoteHost</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method returns the remoteHost.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/UDPProtocolOptions.html#getRemotePort()">getRemotePort</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method gets the remotePort to which the SNMP packets should 
 be sent.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/UDPProtocolOptions.html#getSessionId()">getSessionId</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This is the method present in ProtocolOptions.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/UDPProtocolOptions.html#getTrafficClass()">getTrafficClass</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method returns the value of the previously set trafficClass  
 or the default value -1.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/UDPProtocolOptions.html#setLocalAddresses(java.lang.String[])">setLocalAddresses</A></B>(java.lang.String[]&nbsp;addrs)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method sets the list of local addresses for which
 the session should bind.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/UDPProtocolOptions.html#setLocalPort(int)">setLocalPort</A></B>(int&nbsp;port)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method sets the local port on which the session should be
 opened.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/UDPProtocolOptions.html#setReceiveBufferSize(int)">setReceiveBufferSize</A></B>(int&nbsp;size)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method sets the buffer size of this receiver when
 the receiver is ready for receiving the next packet.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/UDPProtocolOptions.html#setRemoteAddress(java.net.InetAddress)">setRemoteAddress</A></B>(java.net.InetAddress&nbsp;addr)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method sets the remoteAddress.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/UDPProtocolOptions.html#setRemoteHost(java.lang.String)">setRemoteHost</A></B>(java.lang.String&nbsp;host)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method sets the remoteHost to this UDPProtocolOptions object.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/UDPProtocolOptions.html#setRemotePort(int)">setRemotePort</A></B>(int&nbsp;port)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method sets the remotePort to which the SNMP packets should
 be sent.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/UDPProtocolOptions.html#setTrafficClass(int)">setTrafficClass</A></B>(int&nbsp;tc)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method sets traffic class or type-of-service octet in the IP datagram header for datagrams sent from the SnmpTransportProvider.</TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TD><B>Methods inherited from class java.lang.Object</B></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</CODE></TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ============ FIELD DETAIL =========== -->


<!-- ========= CONSTRUCTOR DETAIL ======== -->

<A NAME="constructor_detail"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=1><FONT SIZE="+2">
<B>Constructor Detail</B></FONT></TD>
</TR>
</TABLE>

<A NAME="UDPProtocolOptions()"><!-- --></A><H3>
UDPProtocolOptions</H3>
<PRE>
public <B>UDPProtocolOptions</B>()</PRE>
<DL>
<DD>The default constructor which will assign default values to
 all the variables in this class.
<P>
</DL>
<HR>

<A NAME="UDPProtocolOptions(java.lang.String, int)"><!-- --></A><H3>
UDPProtocolOptions</H3>
<PRE>
public <B>UDPProtocolOptions</B>(java.lang.String&nbsp;remoteHost,
                          int&nbsp;remotePort)</PRE>
<DL>
<DD>Constructs a new <code>UDPProtocolOptions</code> object with
 <code>remoteHost</code> and <code>remotePort</code> as
 target host and port.
<P>
<DT><B>Parameters:</B><DD><CODE>remoteHost</CODE> - the target host to which a SNMP request is
 to be sent.<DD><CODE>remotePort</CODE> - the target port to which a SNMP request is
 to be sent.
<DT><B>Throws:</B>
<DD><CODE>java.lang.IllegalArgumentException</CODE> - If <code>remoteHost</code>
 is null or an empty string.<br>
 If the <code>remotePort</code> is less than zero or greater
 than 65535.</DL>
<HR>

<A NAME="UDPProtocolOptions(java.net.InetAddress, int)"><!-- --></A><H3>
UDPProtocolOptions</H3>
<PRE>
public <B>UDPProtocolOptions</B>(java.net.InetAddress&nbsp;remoteAddress,
                          int&nbsp;remotePort)</PRE>
<DL>
<DD>Constructs a new <code>UDPProtocolOptions</code> object with
 <code>remoteAddress</code> and <code>remotePort</code> as
 target host and port.
<P>
<DT><B>Parameters:</B><DD><CODE>remoteAddress</CODE> - the target address to which a SNMP request is
 to be sent.<DD><CODE>remotePort</CODE> - the target port to which a SNMP request is
 to be sent.
<DT><B>Throws:</B>
<DD><CODE>java.lang.IllegalArgumentException</CODE> - If <code>remoteAddress</code>
 is null.<br>
 If the <code>remotePort</code> is less than zero or greater
 than 65535.</DL>
<HR>

<A NAME="UDPProtocolOptions(java.lang.String)"><!-- --></A><H3>
UDPProtocolOptions</H3>
<PRE>
public <B>UDPProtocolOptions</B>(java.lang.String&nbsp;remoteHost)</PRE>
<DL>
<DD>Constructs a new <code>UDPProtocolOptions</code> object with
 <code>remoteHost</code> as target host and 161 as the target port.
<P>
<DT><B>Parameters:</B><DD><CODE>remoteHost</CODE> - the target host to which a SNMP request is
 to be sent.
<DT><B>Throws:</B>
<DD><CODE>java.lang.IllegalArgumentException</CODE> - If remoteHost is null or
 an empty string.</DL>
<HR>

<A NAME="UDPProtocolOptions(java.net.InetAddress)"><!-- --></A><H3>
UDPProtocolOptions</H3>
<PRE>
public <B>UDPProtocolOptions</B>(java.net.InetAddress&nbsp;remoteAddress)</PRE>
<DL>
<DD>Constructs a new <code>UDPProtocolOptions</code> object with
 <code>remoteAddress</code> as target address and 161 as the target port.
<P>
<DT><B>Parameters:</B><DD><CODE>remoteAddress</CODE> - the target address to which a SNMP request is
 to be sent.
<DT><B>Throws:</B>
<DD><CODE>java.lang.IllegalArgumentException</CODE> - If remoteAddress is null.</DL>

<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=1><FONT SIZE="+2">
<B>Method Detail</B></FONT></TD>
</TR>
</TABLE>

<A NAME="getSessionId()"><!-- --></A><H3>
getSessionId</H3>
<PRE>
public java.lang.String <B>getSessionId</B>()</PRE>
<DL>
<DD>This is the method present in ProtocolOptions. This method
 will return the string of the form "remoteHostName:remotePort".
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../com/adventnet/snmp/snmp2/ProtocolOptions.html#getSessionId()">getSessionId</A></CODE> in interface <CODE><A HREF="../../../../com/adventnet/snmp/snmp2/ProtocolOptions.html">ProtocolOptions</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the string which is a combination of "hostname:port".</DL>
</DD>
</DL>
<HR>

<A NAME="getRemoteHost()"><!-- --></A><H3>
getRemoteHost</H3>
<PRE>
public java.lang.String <B>getRemoteHost</B>()</PRE>
<DL>
<DD>This method returns the remoteHost.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the remoteHost that is previously set or null.</DL>
</DD>
</DL>
<HR>

<A NAME="setRemoteHost(java.lang.String)"><!-- --></A><H3>
setRemoteHost</H3>
<PRE>
public void <B>setRemoteHost</B>(java.lang.String&nbsp;host)</PRE>
<DL>
<DD>This method sets the remoteHost to this UDPProtocolOptions object.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>host</CODE> - The remoteHost that is to be set.</DL>
</DD>
</DL>
<HR>

<A NAME="getRemoteAddress()"><!-- --></A><H3>
getRemoteAddress</H3>
<PRE>
public java.net.InetAddress <B>getRemoteAddress</B>()</PRE>
<DL>
<DD>This method gets the remoteAddress as an InetAddress object.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the remote address that is set previously.</DL>
</DD>
</DL>
<HR>

<A NAME="getRemoteAddressAsString()"><!-- --></A><H3>
getRemoteAddressAsString</H3>
<PRE>
public java.lang.String <B>getRemoteAddressAsString</B>()</PRE>
<DL>
<DD>This method gets the remoteAddress as a String.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the remote address that is set previously.<DT><B>Since:</B><DD>AdventNet SNMP API 4 SP3 ( Release 4.0.3 )</DD>
</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="setRemoteAddress(java.net.InetAddress)"><!-- --></A><H3>
setRemoteAddress</H3>
<PRE>
public void <B>setRemoteAddress</B>(java.net.InetAddress&nbsp;addr)</PRE>
<DL>
<DD>This method sets the remoteAddress.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>addr</CODE> - the remote inet address.</DL>
</DD>
</DL>
<HR>

<A NAME="getLocalPort()"><!-- --></A><H3>
getLocalPort</H3>
<PRE>
public int <B>getLocalPort</B>()</PRE>
<DL>
<DD>This method returns the local port at which the session should be
 opened. 
 This method will return the local port only for the 
 UDPProtocolOptions instance that is used to open the session.
 All other instances will return the value zero.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>returns the local port at which the session is opened.</DL>
</DD>
</DL>
<HR>

<A NAME="setLocalPort(int)"><!-- --></A><H3>
setLocalPort</H3>
<PRE>
public void <B>setLocalPort</B>(int&nbsp;port)</PRE>
<DL>
<DD>This method sets the local port on which the session should be
 opened. For a session to be opened in a particular port,
 then this local port should be specified and this 
 UDPProtocolOptions instance should be set on the session.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>port</CODE> - the port at which the session should be opened.
<DT><B>Throws:</B>
<DD><CODE>java.lang.IllegalArgumentException</CODE> - If the port is negative or
 greater than 65535.</DL>
</DD>
</DL>
<HR>

<A NAME="getLocalAddresses()"><!-- --></A><H3>
getLocalAddresses</H3>
<PRE>
public java.lang.String[] <B>getLocalAddresses</B>()</PRE>
<DL>
<DD>This method gets the local addresses for which the 
 session should bind with.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>a string array containing a list of addresses
 for which the session has tried to bind.</DL>
</DD>
</DL>
<HR>

<A NAME="setLocalAddresses(java.lang.String[])"><!-- --></A><H3>
setLocalAddresses</H3>
<PRE>
public void <B>setLocalAddresses</B>(java.lang.String[]&nbsp;addrs)</PRE>
<DL>
<DD>This method sets the list of local addresses for which
 the session should bind. The session will bind to the 
 first successfull address and will ignore the rest.
  If any of the string in this array is given as empty
 or null it is taken as localhost, since
 java.net.InetAddress.getByName("") or
 java.net.InetAddress.getByName(null)
 will return only localhost.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>addrs</CODE> - the list of addresses to which the session
 should try binding.</DL>
</DD>
</DL>
<HR>

<A NAME="getRemotePort()"><!-- --></A><H3>
getRemotePort</H3>
<PRE>
public int <B>getRemotePort</B>()</PRE>
<DL>
<DD>This method gets the remotePort to which the SNMP packets should 
 be sent.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the remote port to which the SNMP packet should be sent.</DL>
</DD>
</DL>
<HR>

<A NAME="setRemotePort(int)"><!-- --></A><H3>
setRemotePort</H3>
<PRE>
public void <B>setRemotePort</B>(int&nbsp;port)</PRE>
<DL>
<DD>This method sets the remotePort to which the SNMP packets should
 be sent.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>port</CODE> - the remote port to which the SNMP packet should be
 sent.
<DT><B>Throws:</B>
<DD><CODE>java.lang.IllegalArgumentException</CODE> - If the port is negative or
 greater than 65535.</DL>
</DD>
</DL>
<HR>

<A NAME="setReceiveBufferSize(int)"><!-- --></A><H3>
setReceiveBufferSize</H3>
<PRE>
public void <B>setReceiveBufferSize</B>(int&nbsp;size)</PRE>
<DL>
<DD>This method sets the buffer size of this receiver when
 the receiver is ready for receiving the next packet.
 It should be called before the "open()" of
 SnmpSession is called. If it is called after it, then
 this new value will come into effect only for the 
 next packet that is to be received.
 <p>
 The following should be done to set the receive buffer
 size in the SnmpTransportProvider.
 <br>
 <i>
 UDPProtocolOptions opt = (UDPProtocolOptions)session.getProtocolOptions();
 <br>
 if(opt != null)
 <br>
 {
 <br>
 opt.setReceiveBufferSize(size);
 <br>
 }
 <br>
 else
 <br>
 {
 <br>
 UDPProtocolOptions opt = new UDPProtocolOptions();
 <br>
 opt.setReceiveBufferSize(size);
 <br>
 session.setProtocolOptions(opt);
 <br>
 }
 <br>
 </i>
 Usaually the protocolOptions in the session will not be
 null, unless session.setProtocolOptions() is called with
 a null value.
 <p>
 This method will accept only values that are greater
 than zero. If the value is less than or equal to zero,
 then an IllegalArgumentException will be thrown. The validity
 of the value that is passed should be done by the user.
 Any invalid value that is passed will not be set on the
 SnmpTransportProvider.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>size</CODE> - the size of the buffer.
<DT><B>Throws:</B>
<DD><CODE>java.lang.IllegalArgumentException</CODE> - if the value is 0 or is
 negative.</DL>
</DD>
</DL>
<HR>

<A NAME="getReceiveBufferSize()"><!-- --></A><H3>
getReceiveBufferSize</H3>
<PRE>
public int <B>getReceiveBufferSize</B>()</PRE>
<DL>
<DD>This method returns the previously set buffer size
 or zero.
 <p>
 The UDPProtocolOptions object that is used to open the
 SnmpSession will return the present buffer size of
 the socket.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the buffer size of this receiver.</DL>
</DD>
</DL>
<HR>

<A NAME="setTrafficClass(int)"><!-- --></A><H3>
setTrafficClass</H3>
<PRE>
public void <B>setTrafficClass</B>(int&nbsp;tc)
                     throws <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpException.html">SnmpException</A></PRE>
<DL>
<DD>This method sets traffic class or type-of-service octet in the IP datagram header for datagrams sent from the SnmpTransportProvider.
<p>	
 Since Java supports this feature only from JDK1.4, to use this method the JDK 1.4 or later version
 should be needed.
          <p>
          The tc must be in the range 0 <= tc <= 255 or an IllegalArgumentException will be thrown.
          <p>
 The following should be done to set the traffic class  in the SnmpTransportProvider.
 <br>
 <i>
 UDPProtocolOptions opt = (UDPProtocolOptions)session.getProtocolOptions();
 <br>
 if(opt != null)
 <br>
 {
 <br>
 opt.setTrafficClass(tc);
 <br>
 }
 <br>
 else
 <br>
 {
 <br>
 UDPProtocolOptions opt = new UDPProtocolOptions();
 <br>
 opt.setTrafficClass(tc);
 <br>
 session.setProtocolOptions(opt);
 <br>
 }
 <br>
 </i>
 Usaually the protocolOptions in the session will not be
 null, unless session.setProtocolOptions() is called with
 a null value.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>tc</CODE> - an int value for the bitset.
<DT><B>Throws:</B>
<DD><CODE>java.lang.IllegalArgumentException</CODE> - if the value is not in range 0 -- 255
<DD><CODE><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpException.html">SnmpException</A></CODE> - if the method is not present in the JDK.</DL>
</DD>
</DL>
<HR>

<A NAME="getTrafficClass()"><!-- --></A><H3>
getTrafficClass</H3>
<PRE>
public int <B>getTrafficClass</B>()</PRE>
<DL>
<DD>This method returns the value of the previously set trafficClass  
 or the default value -1.
 <p>
 The UDPProtocolOptions object that is used to open the
 SnmpSession will return the present trafficClass set in  
 the SnmpTransportProvider.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the value of trafficClass.<DT><B>Since:</B><DD>AdventNet SNMP API 4 SP3 ( Release 4.0.3 )</DD>
</DD>
</DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>

<!-- ========== START OF NAVBAR ========== -->
<A NAME="navbar_bottom"><!-- --></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0">
<TR>
<TD COLSPAN=3 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../../com/adventnet/snmp/snmp2/TimeoutPolicy.html"><B>PREV CLASS</B></A>&nbsp;
&nbsp;NEXT CLASS</FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../index.html" TARGET="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="UDPProtocolOptions.html" TARGET="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;
<SCRIPT>
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
<A HREF="../../../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>
</NOSCRIPT>
</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<!-- =========== END OF NAVBAR =========== -->

<HR>
Copyright (c)AdventNet Inc., 1996-2006
</BODY>
</HTML>
