<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN""http://www.w3.org/TR/REC-html40/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc on Tue Nov 07 19:59:06 IST 2006 -->
<TITLE>
MibOperations (AdventNet)
</TITLE>
<LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../stylesheet.css" TITLE="Style">
</HEAD>
<SCRIPT>
function asd()
{
parent.document.title="MibOperations (AdventNet)";
}
</SCRIPT>
<BODY BGCOLOR="white" onload="asd();">

<!-- ========== START OF NAVBAR ========== -->
<A NAME="navbar_top"><!-- --></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0">
<TR>
<TD COLSPAN=3 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../../com/adventnet/snmp/mibs/MibNode.html"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../../com/adventnet/snmp/mibs/MibParserConstants.html"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../index.html" TARGET="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="MibOperations.html" TARGET="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;
<SCRIPT>
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
<A HREF="../../../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>
</NOSCRIPT>
</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<!-- =========== END OF NAVBAR =========== -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
<FONT SIZE="-1">
com.adventnet.snmp.mibs</FONT>
<BR>
Class  MibOperations</H2>
<PRE>
java.lang.Object
  |
  +--<B>com.adventnet.snmp.mibs.MibOperations</B>
</PRE>
<DL>
<DT><B>All Implemented Interfaces:</B> <DD>java.io.Serializable</DD>
</DL>
<HR>
<DL>
<DT>public class <B>MibOperations</B><DT>extends java.lang.Object<DT>implements java.io.Serializable</DL>

<P>
The MibOperations Class provides MIB support for the SNMP libraries.
  It enables the user to support SNMP operations by using the 
	information in the MIB Modules.
  <p>
  The MibOperations class is used for the following functionalities: 
  <ul>
  <li> Loading MIB files 
	<li> Unloading MIB files 
	<li> Retrieving MIB information 
	<li> Printing the datas 
  </ul>
  <p>
  The MibOperations class needs to be instantiated to parse and use MIBs.
  Instantiate this class to add dynamic MIB support to your SNMP
  applications.  
  <p>
  <p>
  For instance, to use in an application 
  <pre>
  
	 MibOperations mibOps = new MibOperations();
	 try 
	 {
	    mibOps.loadMibModules("RFC1213-MIB");
	 }
	 catch (Exception ex) 
	 { 
	    System.err.println("Error loading MIBs: " + ex);
	 }
    
  </pre>
  
	<p>
  We can get the  objects of MibModule, MibNode, LeafSyntax, MibTrap 
	from the methods present in the MibOperations class.
	<p>
  The method encodeInstanceString(Vector, Vector) can be used to encode 
  the given index value based on the syntax of the indexMibNodes.
  <p>
	We can also create varbind using the method createVariableBinding(String,String[],String)
	with the supplied parameters.
  <p>
  LeafSyntax instance can be obtained using the methods getLeafSyntax(SnmpOID) and
	getSyntaxByName(String).
	<p>
  The methods toByteString() and toString() can be used to print the datas.
  <p>
	Some methods like getMibNode() are present both in MibModule and in the MibOperations 
	class. If the method getMibNode() in MibOperations is used, then the node will be searched 
	in all the mibs loaded so far whereas if you use  the method getMibNode() in MibModule then
  the search is restricted to that particular Module.
	<p>
	To get a MibModule instance you can use the method getMibModule(String).
	This will return the MibModule. The argument for getMibModule is the module name. 
	The argument should be case sensitive,that is to say, the case of the argument
  should match with the case of the module name.
  To get the enumeration of all the modules loaded, use MibOperations.getMibModules().
	<p>
  In case the module is getting loaded from a http url location, there
  might be issues related to content-type handling. Specifically, unless
  the web-server is configured to handle MIB extensions cds and cmi, you
  can receive errors in loading the MIB. While plain MIB files are in ascii,
  configuration issues on web-server do not come into the picture. But , the 
  compiled MIB being binary type is affected if the content-type is
  indicated by the server as text/plain or text/html etc. 
      <p>
   Loading mibs directly is not thread safe whereas loading mibs in compiled mode is thread safe. Before loading  
   the mib in the compiled mode , the cmi and cds files of the correspoding mib file should be created.
<P>

<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../../serialized-form.html" TARGET="com.adventnet.snmp.mibs.MibOperations">Serialized Form</A></DL>
<HR>

<P>
<!-- ======== NESTED CLASS SUMMARY ======== -->


<!-- =========== FIELD SUMMARY =========== -->

<A NAME="field_summary"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Field Summary</B></FONT></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#ALL_MESSAGES">ALL_MESSAGES</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;For printing all the debug messages</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;byte</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#CRITICAL">CRITICAL</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;For setting the critical parsing level</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#CRITICAL_MESSAGES">CRITICAL_MESSAGES</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;For printing all the critical messages</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;byte</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#LENIENT">LENIENT</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;For setting flexible parsing level.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;byte</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#MYSQL">MYSQL</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;For setting the MySql database</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;byte</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#NORMAL">NORMAL</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;For setting normal parsing level.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;byte</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#ORACLE">ORACLE</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;For setting the Oracle database</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;byte</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#SERIOUS">SERIOUS</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;For setting the serious parsing level</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#SERIOUS_MESSAGES">SERIOUS_MESSAGES</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;For printing all the serious messages</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#WARNING_MESSAGES">WARNING_MESSAGES</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;For printing all the warning messages</TD>
</TR>
</TABLE>
&nbsp;
<!-- ======== CONSTRUCTOR SUMMARY ======== -->

<A NAME="constructor_summary"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Constructor Summary</B></FONT></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#MibOperations()">MibOperations</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This instantiates a new MibOperations instance for MIB operations.</TD>
</TR>
</TABLE>
&nbsp;
<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Method Summary</B></FONT></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#addChecks(byte[], byte)">addChecks</A></B>(byte[]&nbsp;checks,
          byte&nbsp;parsingLevel)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Used to add checks to the existing parsing level.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#addLabel(java.lang.String)">addLabel</A></B>(java.lang.String&nbsp;addLabel)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Used to add label which should not be treated as a reserved word by 
 the MIB parser.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#createCompiledMibs(java.lang.String)">createCompiledMibs</A></B>(java.lang.String&nbsp;mibs)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Used to create compiled mibs namely the cmi and cds files.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpVarBind.html">SnmpVarBind</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#createVariableBinding(java.lang.String, java.lang.String[], java.lang.String)">createVariableBinding</A></B>(java.lang.String&nbsp;varName,
                      java.lang.String[]&nbsp;indexes,
                      java.lang.String&nbsp;value)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates an SnmpVarBind instance with the supplied parameters.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#enableDisplayHint(boolean)">enableDisplayHint</A></B>(boolean&nbsp;flag)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Used to set the displayHint flag.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#encodeInstanceString(java.util.Vector, java.util.Vector)">encodeInstanceString</A></B>(java.util.Vector&nbsp;indexValue,
                     java.util.Vector&nbsp;indexMibNodes)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Encodes an instance string based on the Snmp Type of the indexMibNode.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;byte[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#getChecks(byte)">getChecks</A></B>(byte&nbsp;parsingLevel)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Used to get the checks available for a particular parsingLevel.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;byte</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#getDatabaseName()">getDatabaseName</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the name of the Database.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.util.Vector</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#getErrorMessages(java.lang.String)">getErrorMessages</A></B>(java.lang.String&nbsp;module)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns Vector of MibErrorMessages object for the module specified.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.util.Vector</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#getErrorModuleNames()">getErrorModuleNames</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the names of modules which are having parsing errors.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#getErrorString(com.adventnet.snmp.snmp2.SnmpPDU)">getErrorString</A></B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html">SnmpPDU</A>&nbsp;pdu)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gives a detailed error information on the PDU using information from the loaded MIBs.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#getIgnoreSpecificControlCodes()">getIgnoreSpecificControlCodes</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Used to get the value determining whether the new-line characters, 
 tabs and carriage returns are printed or their hex values</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;byte</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#getImportsParsingLevel()">getImportsParsingLevel</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the parsingLevel for the dependency MIB files.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#getInstanceString(com.adventnet.snmp.snmp2.SnmpOID)">getInstanceString</A></B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpOID.html">SnmpOID</A>&nbsp;oid)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the Instance portion of OID as a String.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#getInstanceString(com.adventnet.snmp.snmp2.SnmpOID, com.adventnet.snmp.mibs.MibNode)">getInstanceString</A></B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpOID.html">SnmpOID</A>&nbsp;oid,
                  <A HREF="../../../../com/adventnet/snmp/mibs/MibNode.html">MibNode</A>&nbsp;node)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the Instance portion of OID as a String.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../com/adventnet/snmp/mibs/LeafSyntax.html">LeafSyntax</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#getLeafSyntax(com.adventnet.snmp.snmp2.SnmpOID)">getLeafSyntax</A></B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpOID.html">SnmpOID</A>&nbsp;oid)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the syntax for the node corresponding to this oid.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../com/adventnet/snmp/mibs/MibModule.html">MibModule</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#getMibModule(com.adventnet.snmp.mibs.MibNode)">getMibModule</A></B>(<A HREF="../../../../com/adventnet/snmp/mibs/MibNode.html">MibNode</A>&nbsp;node)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the MIB Module that contains the specified MibNode.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../com/adventnet/snmp/mibs/MibModule.html">MibModule</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#getMibModule(java.lang.String)">getMibModule</A></B>(java.lang.String&nbsp;name)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the MIB Module from list of already loaded MIBs.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.util.Enumeration</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#getMibModuleNames()">getMibModuleNames</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the names of the Mib modules loaded.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.util.Enumeration</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#getMibModules()">getMibModules</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets all the MIB modules loaded in this MibOperations instance.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../com/adventnet/snmp/mibs/MibNode.html">MibNode</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#getMibNode(com.adventnet.snmp.snmp2.SnmpOID)">getMibNode</A></B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpOID.html">SnmpOID</A>&nbsp;oid)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the MibNode for this SnmpOID instance by searching all the MIB modules.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../com/adventnet/snmp/mibs/MibNode.html">MibNode</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#getMibNode(java.lang.String)">getMibNode</A></B>(java.lang.String&nbsp;oidString)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the node corresponding to this label.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../com/adventnet/snmp/mibs/MibNode.html">MibNode</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#getMibNode(java.lang.String, java.lang.String)">getMibNode</A></B>(java.lang.String&nbsp;nodeLabel,
           java.lang.String&nbsp;mib)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the node correspoding to the label in this mib.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../com/adventnet/snmp/mibs/MibNode.html">MibNode</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#getMibNode(java.util.Vector)">getMibNode</A></B>(java.util.Vector&nbsp;oid)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gives the MibNode per the Vector of Strings OID argument.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#getMibPath()">getMibPath</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the search Path in which the MIB files are searched.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../com/adventnet/snmp/mibs/MibTrap.html">MibTrap</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#getMibTrap(com.adventnet.snmp.snmp2.SnmpOID, int, int)">getMibTrap</A></B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpOID.html">SnmpOID</A>&nbsp;enterprise,
           int&nbsp;genericType,
           int&nbsp;specificType)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the trap definition matching the given enterprise, generic type
 and specific type values.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#getModuleNameDefinition(java.lang.String)">getModuleNameDefinition</A></B>(java.lang.String&nbsp;file)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Lets you know the module name contained in this MIB file.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#getModuleNameDefinitions(java.lang.String)">getModuleNameDefinitions</A></B>(java.lang.String&nbsp;fileName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gives all the module names contained in this mib file.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#getModuleSize()">getModuleSize</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the number of modules loaded in this MibOperations instance.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#getMultipleRevision()">getMultipleRevision</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the multiple revisions availabe for the MIB.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../com/adventnet/snmp/mibs/MibNode.html">MibNode</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#getNearestNode(com.adventnet.snmp.snmp2.SnmpOID)">getNearestNode</A></B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpOID.html">SnmpOID</A>&nbsp;oid)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the node corresponding to the oid which is nearest to this SnmpOID instance.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.util.Vector</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#getNodesFromNames(java.util.Vector)">getNodesFromNames</A></B>(java.util.Vector&nbsp;nodes)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the MibNodes corresponding to the names in the Vector.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.util.Vector</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#getNodesFromString(java.lang.String)">getNodesFromString</A></B>(java.lang.String&nbsp;nodeList)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the MibNodes corresponding to the node names in the nodelist.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../com/adventnet/snmp/mibs/NotificationType.html">NotificationType</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#getNotificationType(com.adventnet.snmp.snmp2.SnmpOID)">getNotificationType</A></B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpOID.html">SnmpOID</A>&nbsp;trapoid)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the NotificationType object of the given trap oid</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#getOverwriteCMI()">getOverwriteCMI</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>Deprecated.</B>&nbsp;<I>since 4.0, replaced by <A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#isOverwriteCMI()"><CODE>isOverwriteCMI()</CODE></A></I></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;byte</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#getParsingLevel()">getParsingLevel</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the parsingLevel.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#getSerializedMibFileName()">getSerializedMibFileName</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Retrieves the Serialized MIB file name.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpOID.html">SnmpOID</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#getSnmpOID(java.lang.String)">getSnmpOID</A></B>(java.lang.String&nbsp;s)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates an SnmpOID instance based on the loaded MIBs.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../com/adventnet/snmp/mibs/LeafSyntax.html">LeafSyntax</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#getSyntaxByName(java.lang.String)">getSyntaxByName</A></B>(java.lang.String&nbsp;name)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the syntax for the node represented by the String argument.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.util.Vector</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#getTCList(com.adventnet.snmp.snmp2.SnmpOID)">getTCList</A></B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpOID.html">SnmpOID</A>&nbsp;oid)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method returns the vector of Textual Conventions for the given SnmpOID drill down till to the base
 syntax level.This method requires the relavent mib(s) should be loaded into the miboperations before
 invoking the getTCList(snmpoid).</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#getThrowFileNotFound()">getThrowFileNotFound</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>Deprecated.</B>&nbsp;<I></I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#initJdbcParams(java.lang.String, java.lang.String, java.lang.String, java.lang.String)">initJdbcParams</A></B>(java.lang.String&nbsp;driverName,
               java.lang.String&nbsp;URL,
               java.lang.String&nbsp;userName,
               java.lang.String&nbsp;passWord)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;If you need to use database support, you have to invoke this method to initialize 
 the Jdbc Parameters.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#isDBConnected()">isDBConnected</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Used to know whether the Database connection is alive or not.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#isDisplayHintEnabled()">isDisplayHintEnabled</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Used to know whether the displayHint flag is enabled or not.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#isLoadFromCompiledMibs()">isLoadFromCompiledMibs</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Used to know whether the MIB is loaded from the compiled mibs.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#isLoadFromDatabase()">isLoadFromDatabase</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Used to know whether the MIB is loaded from the DataBase.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#isLoadFromSerializedMibs()">isLoadFromSerializedMibs</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Used to know whether the MIB is loaded from serialized mibs.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#isMultipleRevision()">isMultipleRevision</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Used to know whether the multiple revision is set or not.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#isOverwriteCMI()">isOverwriteCMI</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Used to know whether the compiled mib files are overwritten.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#isOverwriteDatabase()">isOverwriteDatabase</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the overwriteDataBase boolean.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#isOverwriteSerializedMibs()">isOverwriteSerializedMibs</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Used to know whether the serialized mib files are overwritten.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#isReadDesc()">isReadDesc</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Used to know whether reading the descriptions from compiled modules is enabled.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#isSerializeMibs()">isSerializeMibs</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the serializeMibs boolean</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#isShowImportedIndex()">isShowImportedIndex</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Used to know whether the external indices are shown in the Mib tree.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../com/adventnet/snmp/mibs/MibModule.html">MibModule</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#loadMibModule(java.applet.Applet, java.net.URL)">loadMibModule</A></B>(java.applet.Applet&nbsp;applet,
              java.net.URL&nbsp;url)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Load a MIB Module from an applet using the URL.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../com/adventnet/snmp/mibs/MibModule.html">MibModule</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#loadMibModule(java.lang.String)">loadMibModule</A></B>(java.lang.String&nbsp;fileName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Load a MIB Module from this file.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#loadMibModules(java.applet.Applet, java.lang.String)">loadMibModules</A></B>(java.applet.Applet&nbsp;applet,
               java.lang.String&nbsp;mibs)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Load a set of MIB Modules from an applet using the string URLs.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#loadMibModules(java.lang.String)">loadMibModules</A></B>(java.lang.String&nbsp;mibs)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Load a set of MIB Modules from files.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#registerParsingLevel(byte, byte[])">registerParsingLevel</A></B>(byte&nbsp;parsingLevel,
                     byte[]&nbsp;checks)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Used to create an used defined parsing level.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#removeChecks(byte[], byte)">removeChecks</A></B>(byte[]&nbsp;checks,
             byte&nbsp;parsingLevel)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Used to remove checks from the existing parsing level.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#setDatabaseName(byte)">setDatabaseName</A></B>(byte&nbsp;type)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Used to set the database.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#setDebug(boolean)">setDebug</A></B>(boolean&nbsp;debug)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Defines whether debugging output should be generated to stdout.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#setDebugMessageLevel(int)">setDebugMessageLevel</A></B>(int&nbsp;level)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the debug message level.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#setIgnoreSpecificControlCodes(boolean)">setIgnoreSpecificControlCodes</A></B>(boolean&nbsp;specConCode)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Used to set the value determining whether the new-line characters, 
 tabs and carriage returns are printed as they are or their hex values.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#setImportsParsingLevel(byte)">setImportsParsingLevel</A></B>(byte&nbsp;parsingLevel)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Used to set the level of parsing for the dependency MIB files.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#setLoadFromCompiledMibs(boolean)">setLoadFromCompiledMibs</A></B>(boolean&nbsp;flag)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Defines whether to load mib from compiled MIBs.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#setLoadFromDatabase(boolean)">setLoadFromDatabase</A></B>(boolean&nbsp;flag)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Defines whether to load the MIB from DataBase.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#setLoadFromSerializedMibs(boolean)">setLoadFromSerializedMibs</A></B>(boolean&nbsp;flag)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Defines whether to load mib from serialized MIB file.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#setMibFileExtension(java.lang.String)">setMibFileExtension</A></B>(java.lang.String&nbsp;extension)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Registers the extensions with which the MIB file is to be searched.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#setMibPath(java.lang.String)">setMibPath</A></B>(java.lang.String&nbsp;path)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the search Path in which the Mib Parser will search for the
 MIB modules.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#setMultipleRevision(java.lang.String)">setMultipleRevision</A></B>(java.lang.String&nbsp;revisionFileName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the Multiple revision for the MIB.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#setOverwriteCMI(boolean)">setOverwriteCMI</A></B>(boolean&nbsp;overWrite)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Defines whether to overwrite the existing compiled files.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#setOverwriteDatabase(boolean)">setOverwriteDatabase</A></B>(boolean&nbsp;overWrite)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Defines whether to overwrite the existing database files.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#setOverwriteSerializedMibs(boolean)">setOverwriteSerializedMibs</A></B>(boolean&nbsp;flag)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Defines whether to overwrite the existing serialized MIB files.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#setParsingLevel(byte)">setParsingLevel</A></B>(byte&nbsp;parsingLevel)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Used to set the level of parsing.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#setReadDesc(boolean)">setReadDesc</A></B>(boolean&nbsp;readFlag)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the flag for reading the descriptions from compiled mib modules.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#setSerializedMibFileName(java.lang.String)">setSerializedMibFileName</A></B>(java.lang.String&nbsp;fileName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Defines the name with which the serialized MIB file is to be stored.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#setSerializeMibs(boolean)">setSerializeMibs</A></B>(boolean&nbsp;flag)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Defines whether to serialize the MibModule.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#setShowImportedIndex(boolean)">setShowImportedIndex</A></B>(boolean&nbsp;flag)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the showImportedIndex boolean value.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#setThrowFileNotFound(boolean)">setThrowFileNotFound</A></B>(boolean&nbsp;value)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>Deprecated.</B>&nbsp;<I></I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#toByteString(com.adventnet.snmp.snmp2.SnmpPDU)">toByteString</A></B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html">SnmpPDU</A>&nbsp;pdu)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the byte representation of the SnmpPDU using the MIB information.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#toByteString(com.adventnet.snmp.snmp2.SnmpVarBind)">toByteString</A></B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpVarBind.html">SnmpVarBind</A>&nbsp;varBind)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the byte representation of SnmpVarbind using the MIB information.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#toByteString(com.adventnet.snmp.snmp2.SnmpVar, com.adventnet.snmp.snmp2.SnmpOID)">toByteString</A></B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpVar.html">SnmpVar</A>&nbsp;var,
             <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpOID.html">SnmpOID</A>&nbsp;oid)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gives a translated value for the SnmpVar instance using the MIB information.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#toShortString(com.adventnet.snmp.snmp2.SnmpOID)">toShortString</A></B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpOID.html">SnmpOID</A>&nbsp;oid)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Provides the short translated name representation for the SnmpOID instance.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#toString(com.adventnet.snmp.snmp2.SnmpOID)">toString</A></B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpOID.html">SnmpOID</A>&nbsp;oid)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Provides the translated name representation for the
 SnmpOID instance if found in loaded Mibs.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#toString(com.adventnet.snmp.snmp2.SnmpPDU)">toString</A></B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html">SnmpPDU</A>&nbsp;pdu)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the string value of the pdu using the MIB information</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#toString(com.adventnet.snmp.snmp2.SnmpVarBind)">toString</A></B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpVarBind.html">SnmpVarBind</A>&nbsp;varbind)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Provides a translated value for an SNMP variable binding using information from the loaded MIBs.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#toString(com.adventnet.snmp.snmp2.SnmpVar, com.adventnet.snmp.snmp2.SnmpOID)">toString</A></B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpVar.html">SnmpVar</A>&nbsp;var,
         <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpOID.html">SnmpOID</A>&nbsp;oid)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Provides a translated value for an SNMP variable using information from the loaded MIBs.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#toTagString(com.adventnet.snmp.snmp2.SnmpVarBind)">toTagString</A></B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpVarBind.html">SnmpVarBind</A>&nbsp;varbind)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Provides a translated value for an SNMP variable binding using information from the loaded MIBs.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#unloadAllMibModules()">unloadAllMibModules</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Unload all the loaded MibModules.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#unloadMibModule(com.adventnet.snmp.mibs.MibModule)">unloadMibModule</A></B>(<A HREF="../../../../com/adventnet/snmp/mibs/MibModule.html">MibModule</A>&nbsp;module)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Unloads the MibModule from the modules table.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../com/adventnet/snmp/mibs/MibModule.html">MibModule</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#unloadMibModule(java.lang.String)">unloadMibModule</A></B>(java.lang.String&nbsp;name)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Unloads the MibModule from the MibModules loaded in this instance.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#varBindsToString(com.adventnet.snmp.snmp2.SnmpPDU)">varBindsToString</A></B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html">SnmpPDU</A>&nbsp;pdu)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets variable bindings in the PDU, using the information from loaded MIBs.</TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TD><B>Methods inherited from class java.lang.Object</B></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</CODE></TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ============ FIELD DETAIL =========== -->

<A NAME="field_detail"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=1><FONT SIZE="+2">
<B>Field Detail</B></FONT></TD>
</TR>
</TABLE>

<A NAME="ALL_MESSAGES"><!-- --></A><H3>
ALL_MESSAGES</H3>
<PRE>
public static final int <B>ALL_MESSAGES</B></PRE>
<DL>
<DD>For printing all the debug messages
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.adventnet.snmp.mibs.MibOperations.ALL_MESSAGES">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="WARNING_MESSAGES"><!-- --></A><H3>
WARNING_MESSAGES</H3>
<PRE>
public static final int <B>WARNING_MESSAGES</B></PRE>
<DL>
<DD>For printing all the warning messages
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.adventnet.snmp.mibs.MibOperations.WARNING_MESSAGES">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="SERIOUS_MESSAGES"><!-- --></A><H3>
SERIOUS_MESSAGES</H3>
<PRE>
public static final int <B>SERIOUS_MESSAGES</B></PRE>
<DL>
<DD>For printing all the serious messages
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.adventnet.snmp.mibs.MibOperations.SERIOUS_MESSAGES">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="CRITICAL_MESSAGES"><!-- --></A><H3>
CRITICAL_MESSAGES</H3>
<PRE>
public static final int <B>CRITICAL_MESSAGES</B></PRE>
<DL>
<DD>For printing all the critical messages
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.adventnet.snmp.mibs.MibOperations.CRITICAL_MESSAGES">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="MYSQL"><!-- --></A><H3>
MYSQL</H3>
<PRE>
public static final byte <B>MYSQL</B></PRE>
<DL>
<DD>For setting the MySql database
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.adventnet.snmp.mibs.MibOperations.MYSQL">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="ORACLE"><!-- --></A><H3>
ORACLE</H3>
<PRE>
public static final byte <B>ORACLE</B></PRE>
<DL>
<DD>For setting the Oracle database
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.adventnet.snmp.mibs.MibOperations.ORACLE">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="LENIENT"><!-- --></A><H3>
LENIENT</H3>
<PRE>
public static final byte <B>LENIENT</B></PRE>
<DL>
<DD>For setting flexible parsing level. This is the default parsing level.
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.adventnet.snmp.mibs.MibOperations.LENIENT">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="NORMAL"><!-- --></A><H3>
NORMAL</H3>
<PRE>
public static final byte <B>NORMAL</B></PRE>
<DL>
<DD>For setting normal parsing level.
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.adventnet.snmp.mibs.MibOperations.NORMAL">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="SERIOUS"><!-- --></A><H3>
SERIOUS</H3>
<PRE>
public static final byte <B>SERIOUS</B></PRE>
<DL>
<DD>For setting the serious parsing level
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.adventnet.snmp.mibs.MibOperations.SERIOUS">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="CRITICAL"><!-- --></A><H3>
CRITICAL</H3>
<PRE>
public static final byte <B>CRITICAL</B></PRE>
<DL>
<DD>For setting the critical parsing level
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.adventnet.snmp.mibs.MibOperations.CRITICAL">Constant Field Values</A></DL>
</DL>

<!-- ========= CONSTRUCTOR DETAIL ======== -->

<A NAME="constructor_detail"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=1><FONT SIZE="+2">
<B>Constructor Detail</B></FONT></TD>
</TR>
</TABLE>

<A NAME="MibOperations()"><!-- --></A><H3>
MibOperations</H3>
<PRE>
public <B>MibOperations</B>()</PRE>
<DL>
<DD>This instantiates a new MibOperations instance for MIB operations.
 Also sets up basic syntax elements for the ASN Types for use.
 This also initializes the standard nodes like org, dod, etc.
<P>
</DL>

<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=1><FONT SIZE="+2">
<B>Method Detail</B></FONT></TD>
</TR>
</TABLE>

<A NAME="setMibFileExtension(java.lang.String)"><!-- --></A><H3>
setMibFileExtension</H3>
<PRE>
public void <B>setMibFileExtension</B>(java.lang.String&nbsp;extension)</PRE>
<DL>
<DD>Registers the extensions with which the MIB file is to be searched.
 This method is useful only in case of loading mibs in applets and from 
 the jar file. 
 Multiple extensions can be given which is comma or space separated.
 The default extensions set are .mib,.txt,.my and the extension name should
 not be .cmi or .cds, since these are our proprietary extensions for 
 the compiled MIBs. This extension will be added to the default extensions 
 set.<br>
 <p>
 The file will be searched with the name of the module with this extension.
 So the MIB filename should be same as the modulename with this extension.<br>
 <p>
 for example,
 <pre>
	   MibOperations mibOps = new MibOperations();
	   mibOps.setMibFileExtension("mi2,abc");
	   mibOps.loadMibModule("RFC1213-MIB");
 </pre>
 The file will be searched in the following sequence
 <p>
 <ul>
 <li>
 Without the extension.
 <li>
 With the extension which we set.
 <li>
 With the default extensions.
 </ul>
 <p>
 In this case, it searches for the file in the following order
 RFC1213-MIB, RFC1213-MIB.mi2, RFC1213-MIB.abc, RFC1213-MIB.mib, 
 RFC1213-MIB.txt, RFC1213-MIB.my
 <p>
 In case of applications, it also searches for the MIB module in all the files,
 present in that directory.
 </p>
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>extension</CODE> - Extension of the MIB file.<br></DL>
</DD>
</DL>
<HR>

<A NAME="setThrowFileNotFound(boolean)"><!-- --></A><H3>
setThrowFileNotFound</H3>
<PRE>
public void <B>setThrowFileNotFound</B>(boolean&nbsp;value)</PRE>
<DL>
<DD><B>Deprecated.</B>&nbsp;<I></I>&nbsp;
<P>
<DD>Throws a file not found exception if the corresponding import module 
 is not found in the search path.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>value</CODE> - the boolean value</DL>
</DD>
</DL>
<HR>

<A NAME="getThrowFileNotFound()"><!-- --></A><H3>
getThrowFileNotFound</H3>
<PRE>
public boolean <B>getThrowFileNotFound</B>()</PRE>
<DL>
<DD><B>Deprecated.</B>&nbsp;<I></I>&nbsp;
<P>
<DD>Returns the status of the import exception for files that are not found.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>true if the boolean value in setThrowFileNotFound(boolean) method is set.<br>
		   false if the boolean is not set or if set to false.</DL>
</DD>
</DL>
<HR>

<A NAME="setDebug(boolean)"><!-- --></A><H3>
setDebug</H3>
<PRE>
public void <B>setDebug</B>(boolean&nbsp;debug)</PRE>
<DL>
<DD>Defines whether debugging output should be generated to stdout.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>debug</CODE> - the boolean value.
 The debugging output is generated to stdout if the boolean is set to true.</DL>
</DD>
</DL>
<HR>

<A NAME="setSerializeMibs(boolean)"><!-- --></A><H3>
setSerializeMibs</H3>
<PRE>
public void <B>setSerializeMibs</B>(boolean&nbsp;flag)</PRE>
<DL>
<DD>Defines whether to serialize the MibModule. This flag should be 
 set before loading the MIBs.  If this is set to true it will 
 serialize the loaded MIBs. By default, this flag is set to false.
 <p>
 By default, the Serialized MIB file will be saved with this filename 
 with ".ser" as extension in the same directory from which the mib is 
 loaded. If the fileName contains any other extension, that extension 
 is removed and the serialized file will be created with ".ser" extension.
 <p>
 for example, if RMON2-MIB is loaded, it will serialize this module
 along with the Imported Modules viz ., RFC1271-MIB,RFC1213-MIB,
 and TOKEN-RING-RMON and saves it in a single file.
 <p>
 <pre>
 MibOperations mibOps = new MibOperations();
 mibOps.setSerializeMibs(true);
 try 
 {
 	mibOps.loadMibModules("RMON2-MIB.mib");
 }
 catch(Exception ex)
 {
 	System.out.println(ex);
 }
 </pre>
 <p>
 In this case, if the filename is RMON2-MIB.mib the serialized file will
 be saved as RMON2-MIB.ser.
 <p> 
 If you want to create the serialized file with any other name the method
 setSerializedMibFileName() can be used.
 <p>
 Serialization is not supported in applets.<br>
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>flag</CODE> - the boolean value<DT><B>See Also:</B><DD><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#setSerializedMibFileName(java.lang.String)"><CODE>setSerializedMibFileName(java.lang.String)</CODE></A>, 
<A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#setLoadFromSerializedMibs(boolean)"><CODE>setLoadFromSerializedMibs(boolean)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="isSerializeMibs()"><!-- --></A><H3>
isSerializeMibs</H3>
<PRE>
public boolean <B>isSerializeMibs</B>()</PRE>
<DL>
<DD>Gets the serializeMibs boolean
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>true, if the boolean in the method 
         setSerializeMibs(boolean flag) is set
		   to true.<br> false otherwise.<DT><B>See Also:</B><DD><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#setSerializeMibs(boolean)"><CODE>setSerializeMibs(boolean)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setLoadFromSerializedMibs(boolean)"><!-- --></A><H3>
setLoadFromSerializedMibs</H3>
<PRE>
public void <B>setLoadFromSerializedMibs</B>(boolean&nbsp;flag)</PRE>
<DL>
<DD>Defines whether to load mib from serialized MIB file.
 This flag should be set to true before loading the MIBs from 
 the serialized file.
 <p>
 If the serialized MIB file is already present, then the MIB will be 
 loaded from the serialized MIB file. Else, the serialized file will 
 be created and MIB will be loaded from the serialized MIB file.
 <p>
 The serialized MIB file will be created with the name of MIB file.<br>
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>flag</CODE> - the boolean value.<br> If set to true, the MIB files 
		  will be loaded from the serialized MIB file.<DT><B>See Also:</B><DD><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#setSerializeMibs(boolean)"><CODE>setSerializeMibs(boolean)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="isLoadFromSerializedMibs()"><!-- --></A><H3>
isLoadFromSerializedMibs</H3>
<PRE>
public boolean <B>isLoadFromSerializedMibs</B>()</PRE>
<DL>
<DD>Used to know whether the MIB is loaded from serialized mibs.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>true if the boolean value in the method 
		   setLoadFromSerializedMibs(boolean flag)is 
		   set to true.<br> false otherwise.<DT><B>See Also:</B><DD><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#setLoadFromSerializedMibs(boolean)"><CODE>setLoadFromSerializedMibs(boolean)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setSerializedMibFileName(java.lang.String)"><!-- --></A><H3>
setSerializedMibFileName</H3>
<PRE>
public void <B>setSerializedMibFileName</B>(java.lang.String&nbsp;fileName)</PRE>
<DL>
<DD>Defines the name with which the serialized MIB file is to be stored.
 By default, the Serialized MIB file will be saved with this filename 
 with ".ser" as extension in the same directory from which the mib is loaded. 
 <p>
 If the input argument is rfc1213, then the serialized MIB file will be 
 created with the name rfc1213.ser
 <p>
 NOTE : This applies only if setLoadFromSerializedMibs(boolean) or 
 setSerializeMibs(boolean) is set to true.<br>
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>fileName</CODE> - the name of the file in which the serialized file is to be stored.<DT><B>See Also:</B><DD><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#setLoadFromSerializedMibs(boolean)"><CODE>setLoadFromSerializedMibs(boolean)</CODE></A>, 
<A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#loadMibModule(java.lang.String)"><CODE>loadMibModule(String)</CODE></A>, 
<A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#loadMibModules(java.applet.Applet, java.lang.String)"><CODE>loadMibModules(Applet,String)</CODE></A>, 
<A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#loadMibModule(java.applet.Applet, java.net.URL)"><CODE>loadMibModule(Applet,URL)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getSerializedMibFileName()"><!-- --></A><H3>
getSerializedMibFileName</H3>
<PRE>
public java.lang.String <B>getSerializedMibFileName</B>()</PRE>
<DL>
<DD>Retrieves the Serialized MIB file name.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the filename set by the method setSerializedMibFileName(String fileName).<br>
         empty string, if the filename is not set.<DT><B>See Also:</B><DD><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#setSerializedMibFileName(java.lang.String)"><CODE>setSerializedMibFileName(java.lang.String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setOverwriteSerializedMibs(boolean)"><!-- --></A><H3>
setOverwriteSerializedMibs</H3>
<PRE>
public void <B>setOverwriteSerializedMibs</B>(boolean&nbsp;flag)</PRE>
<DL>
<DD>Defines whether to overwrite the existing serialized MIB files.
 By default the overwrite flag is set to false. If set to true, then the 
 serialized MIB files will be overwritten. 
 <p>
 After loading the MIB file as a serialized MIB file, if you do any changes in the MIB file 
 and load it again it will not get reflected in the loaded MIB file. So at that time, this 
 method has to be called, to overwrite the serialized MIB files and get the latest changes.
 <p>
 Setting this boolean to true is recommended only if you have changed the contents of the
 MIB file. Otherwise, this will unnecessarily increase the loading time of the MIB's.
 <br>
 NOTE: This applies only when the setLoadFromSerializedMibs is set to true.<br>
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="isOverwriteSerializedMibs()"><!-- --></A><H3>
isOverwriteSerializedMibs</H3>
<PRE>
public boolean <B>isOverwriteSerializedMibs</B>()</PRE>
<DL>
<DD>Used to know whether the serialized mib files are overwritten.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>true if the overwrite boolean in the method 
		   setOverwriteSerializedMibs(boolean flag) is 
		   set to true.<br> false if the boolean is not 
         set, or if the boolean is set to false.<DT><B>See Also:</B><DD><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#setOverwriteSerializedMibs(boolean)"><CODE>setOverwriteSerializedMibs(boolean)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setLoadFromCompiledMibs(boolean)"><!-- --></A><H3>
setLoadFromCompiledMibs</H3>
<PRE>
public void <B>setLoadFromCompiledMibs</B>(boolean&nbsp;flag)</PRE>
<DL>
<DD>Defines whether to load mib from compiled MIBs. This flag should 
 be set before loading the MIBs, if we want to load the MIB from 
 compiled mibs. By default it is set to false.
 <p>
 For example, RFC1213-MIB is loaded, it will automatically load 
 RFC1213-MIB.cmi if it exists. Otherwise it will create the compiled 
 files by parsing the MIB and then load from the compiled MIB file. 
 This is in case of application. 
 <p>
 In case of applets, due to the restriction imposed for writing
 the files, compiled MIB files cannot be created automatically.
 <p>
 So in case of applets, the MIBs can be loaded from compiled files 
 only if they are already present. We can create the compiled MIB 
 files using the method createCompiledMibs(String).<br>
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>flag</CODE> - the boolean value <br> If this flag is set to true, 
 the MIBs will be loaded from compiled files( i.e; .cmi and .cds files).<DT><B>See Also:</B><DD><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#createCompiledMibs(java.lang.String)"><CODE>createCompiledMibs(java.lang.String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="isLoadFromCompiledMibs()"><!-- --></A><H3>
isLoadFromCompiledMibs</H3>
<PRE>
public boolean <B>isLoadFromCompiledMibs</B>()</PRE>
<DL>
<DD>Used to know whether the MIB is loaded from the compiled mibs.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>true if the flag in setLoadFromCompiledMibs(boolean flag) 
		  is set to true.<br> false otherwise.<DT><B>See Also:</B><DD><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#setLoadFromCompiledMibs(boolean)"><CODE>setLoadFromCompiledMibs(boolean)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setOverwriteCMI(boolean)"><!-- --></A><H3>
setOverwriteCMI</H3>
<PRE>
public void <B>setOverwriteCMI</B>(boolean&nbsp;overWrite)</PRE>
<DL>
<DD>Defines whether to overwrite the existing compiled files.
 By default the overwrite flag is set to false. If set to true, 
 then the compiled MIB files will be overwritten. 
 <p>
 After loading the MIB file as a compiled MIB file, if you do 
 any changes in the MIB file and load it again it will not get 
 reflected in the loaded MIB file. So at that time, this method 
 has to be called, to overwrite the compiled MIB files and get 
 the latest changes.
 <p>
 Setting this boolean to true is recommended only if you have 
 changed the contents of the MIB file. Otherwise, this will 
 unnecessarily increase the loading time of the MIB's.
 <br>
 NOTE: This applies only when the setLoadFromCompiledMibs(boolean)
 is set to true.<br>
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>overWrite</CODE> - the boolean value<br>
		  If set to true, the compiled MIB files are overwritten.</DL>
</DD>
</DL>
<HR>

<A NAME="getOverwriteCMI()"><!-- --></A><H3>
getOverwriteCMI</H3>
<PRE>
public boolean <B>getOverwriteCMI</B>()</PRE>
<DL>
<DD><B>Deprecated.</B>&nbsp;<I>since 4.0, replaced by <A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#isOverwriteCMI()"><CODE>isOverwriteCMI()</CODE></A></I>
<P>
<DD>Gets the overwrite compiled mibs boolean.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>true if the overwrite boolean in the method 
		   setOverwriteCMI(boolean overWrite) is set to 
		   true.<br> false if the boolean is not set, 
		   or if the boolean is set to false.<DT><B>See Also:</B><DD><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#setOverwriteCMI(boolean)"><CODE>setOverwriteCMI(boolean)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="isOverwriteCMI()"><!-- --></A><H3>
isOverwriteCMI</H3>
<PRE>
public boolean <B>isOverwriteCMI</B>()</PRE>
<DL>
<DD>Used to know whether the compiled mib files are overwritten.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>true if the overwrite boolean in the method 
		   setOverwriteCMI(boolean overWrite) is set to 
		   true.<br> false if the boolean is not set, 
		   or if the boolean is set to false.<DT><B>See Also:</B><DD><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#setOverwriteCMI(boolean)"><CODE>setOverwriteCMI(boolean)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setMibPath(java.lang.String)"><!-- --></A><H3>
setMibPath</H3>
<PRE>
public void <B>setMibPath</B>(java.lang.String&nbsp;path)</PRE>
<DL>
<DD>Sets the search Path in which the Mib Parser will search for the
 MIB modules. Multiple paths can be specified using the pipe (|) 
 as a separator.
 <p>
 for example,
 If the primary MIB file IF-MIB is in the directory "../mibs" and 
 if the imported MIB file is in the directory "../examples"
 then the SearchPath can be set as follows
 <br>
 	mibOperations.setMibPath("../mibs | ../examples");
 <p>
 If the SearchPath is not set, then the MIB files are searched in the 
 current working directory, or in the directory from where the MIB file
 is loaded. 
 <p>
 If the search path is set, the MIB file will be searched in the directories
 specified using this method in addition to the current directory and the 
 directory from where the MIB file is loaded. The MIB files will be searched 
 in the order specified using this method.
 </p>
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getMibPath()"><!-- --></A><H3>
getMibPath</H3>
<PRE>
public java.lang.String <B>getMibPath</B>()</PRE>
<DL>
<DD>Gets the search Path in which the MIB files are searched.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>String containing the path which will be searched for the MIBs.<br>
 			null if the searchPath has not been set previously.<DT><B>See Also:</B><DD><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#setMibPath(java.lang.String)"><CODE>setMibPath(java.lang.String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="loadMibModules(java.lang.String)"><!-- --></A><H3>
loadMibModules</H3>
<PRE>
public void <B>loadMibModules</B>(java.lang.String&nbsp;mibs)
                    throws <A HREF="../../../../com/adventnet/snmp/mibs/MibException.html">MibException</A>,
                           java.io.IOException,
                           java.io.FileNotFoundException</PRE>
<DL>
<DD>Load a set of MIB Modules from files. The files can be seperated by a space,
 tab, new line, carriage return  and pipe symbol. 
 <br>	
 for example,
 		mibOps.loadMibModules("../mibs/RFC1213-MIB ../mibs/IF-MIB");
 <br>	
 MIBs can also be loaded from string URLs.
 <p>
 In case of loading the files from space seperated directories, the whole
 String should be given within the double quotes. <br>for example, if the
 MIB file is present in the directory 'Program Files',<br>
 mibOps.loadMibModules("\"../../mibs/Program Files/RFC1213-MIB\"")
 <p>
 The MIB file can be loaded in the following options,
 <ul>
 <li>Loading MIB's directly ( from a file, URL or a jar )
 <li>Loading from Serialized files
 <li>Loading Compiled MIB's 
 <li>Loading from Database 
 </ul>
 <p>
 If the mib file is present is different directories, the search path 
 can be set using the method setMibPath(). The mib file will be searched 
 in the order in which the path specified.
 <p> 
 The parsingLevel can be set using the method setParsingLevel(). 
 The default parsingLevel is LENIENT.
 <p>
 While loading a mib, imported modules also have to be loaded. So it 
 searches for the imported module with the fileName defined in the 
 IMPORTS section. If it could not find the file with the moduleName, 
 then it search all the file in the directory. If it finds the file 
 which contains the imported MIB module, then the imported module is 
 loaded. Otherwise, if the imported module doesnot exist, then
 IMPORTS failed Exception will be thrown.
 <p>
 The default extension of the file name may be .mib,.txt,.my. 
 In case of applications, the imported mib file can be present with 
 any extensions. But in case of loading the mib from jar, url, applet 
 if the extension is other than .mib,.txt,.my, then the method 
 setMibFileExtension() has to be used.
 <p>
 For loading the mibs from applets, the method loadMibModules(Applet, String)
 can be used.<br>
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>mibs</CODE> - list of file names seperated by a space,tab, new line, carriage return and pipe symbol.
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../com/adventnet/snmp/mibs/MibException.html">MibException</A></CODE> - is thrown upon parse errors.
<DD><CODE>java.io.IOException</CODE> - is thrown upon IO errors.
<DD><CODE>java.io.FileNotFoundException</CODE> - is thrown if the file is not found.<DT><B>See Also:</B><DD><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#setLoadFromSerializedMibs(boolean)"><CODE>setLoadFromSerializedMibs(boolean)</CODE></A>, 
<A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#setLoadFromCompiledMibs(boolean)"><CODE>setLoadFromCompiledMibs(boolean)</CODE></A>, 
<A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#setLoadFromDatabase(boolean)"><CODE>setLoadFromDatabase(boolean)</CODE></A>, 
<A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#setMibFileExtension(java.lang.String)"><CODE>setMibFileExtension(java.lang.String)</CODE></A>, 
<A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#loadMibModules(java.applet.Applet, java.lang.String)"><CODE>loadMibModules(Applet, String)</CODE></A>, 
<A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#setMibPath(java.lang.String)"><CODE>setMibPath(java.lang.String)</CODE></A>, 
<A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#setParsingLevel(byte)"><CODE>setParsingLevel(byte)</CODE></A>, 
<A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#setImportsParsingLevel(byte)"><CODE>setImportsParsingLevel(byte)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="loadMibModules(java.applet.Applet, java.lang.String)"><!-- --></A><H3>
loadMibModules</H3>
<PRE>
public void <B>loadMibModules</B>(java.applet.Applet&nbsp;applet,
                           java.lang.String&nbsp;mibs)
                    throws <A HREF="../../../../com/adventnet/snmp/mibs/MibException.html">MibException</A>,
                           java.io.IOException,
                           java.io.FileNotFoundException</PRE>
<DL>
<DD>Load a set of MIB Modules from an applet using the string URLs.
 The URLs are specified by a space  separated list of string URLs.
 The URLs can be absolute or relative to the applet document base.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>applet</CODE> - applet from which the mib is loaded.<DD><CODE>mibs</CODE> - space seperated list of mib files.
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../com/adventnet/snmp/mibs/MibException.html">MibException</A></CODE> - is thrown upon parse errors.
<DD><CODE>java.io.IOException</CODE> - is thrown upon IO errors.
<DD><CODE>java.io.FileNotFoundException</CODE> - is thrown if the file is not found.</DL>
</DD>
</DL>
<HR>

<A NAME="loadMibModule(java.applet.Applet, java.net.URL)"><!-- --></A><H3>
loadMibModule</H3>
<PRE>
public <A HREF="../../../../com/adventnet/snmp/mibs/MibModule.html">MibModule</A> <B>loadMibModule</B>(java.applet.Applet&nbsp;applet,
                               java.net.URL&nbsp;url)
                        throws <A HREF="../../../../com/adventnet/snmp/mibs/MibException.html">MibException</A>,
                               java.io.IOException,
                               java.io.FileNotFoundException</PRE>
<DL>
<DD>Load a MIB Module from an applet using the URL.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>applet</CODE> - applet from which the mib is loaded.<DD><CODE>url</CODE> - the name of the URL
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../com/adventnet/snmp/mibs/MibException.html">MibException</A></CODE> - is thrown upon parse errors.
<DD><CODE>java.io.IOException</CODE> - is thrown upon IO errors.
<DD><CODE>java.io.FileNotFoundException</CODE> - is thrown if the file is not found.</DL>
</DD>
</DL>
<HR>

<A NAME="loadMibModule(java.lang.String)"><!-- --></A><H3>
loadMibModule</H3>
<PRE>
public <A HREF="../../../../com/adventnet/snmp/mibs/MibModule.html">MibModule</A> <B>loadMibModule</B>(java.lang.String&nbsp;fileName)
                        throws <A HREF="../../../../com/adventnet/snmp/mibs/MibException.html">MibException</A>,
                               java.io.IOException,
                               java.io.FileNotFoundException</PRE>
<DL>
<DD>Load a MIB Module from this file.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>fileName</CODE> - the name of the mib file to be loaded.
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../com/adventnet/snmp/mibs/MibException.html">MibException</A></CODE> - is thrown upon parse errors.
<DD><CODE>java.io.IOException</CODE> - is thrown upon IO errors.
<DD><CODE>java.io.FileNotFoundException</CODE> - is thrown if the file is not found.</DL>
</DD>
</DL>
<HR>

<A NAME="createCompiledMibs(java.lang.String)"><!-- --></A><H3>
createCompiledMibs</H3>
<PRE>
public void <B>createCompiledMibs</B>(java.lang.String&nbsp;mibs)
                        throws <A HREF="../../../../com/adventnet/snmp/mibs/MibException.html">MibException</A>,
                               java.io.IOException,
                               java.io.FileNotFoundException</PRE>
<DL>
<DD>Used to create compiled mibs namely the cmi and cds files.
 Compiled mibs can be created for a single file or for a directory
 of mibs. When a file is being compiled, it tries to compile the 
 imported modules. In this process if it finds the cmi file existing 
 for the imported module, or if it could not find the imported module
 then it skips the compilation for that module. 
 <p>
 So before creating compiled mibs for a directory of mibs, you should 
 make sure that no compiled mibs (i.e; cmi and cds files) exist in that
 directory, inorder to recompile all the mibs in that directory.
 <p>
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>mibs</CODE> - the space seperated list of mib files for which the 
		  compiled mib files is to be generated.
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../com/adventnet/snmp/mibs/MibException.html">MibException</A></CODE> - is thrown upon parse errors.
<DD><CODE>java.io.IOException</CODE> - is thrown upon IO errors.
<DD><CODE>java.io.FileNotFoundException</CODE> - is thrown if the file is not found.</DL>
</DD>
</DL>
<HR>

<A NAME="getMibModule(java.lang.String)"><!-- --></A><H3>
getMibModule</H3>
<PRE>
public <A HREF="../../../../com/adventnet/snmp/mibs/MibModule.html">MibModule</A> <B>getMibModule</B>(java.lang.String&nbsp;name)</PRE>
<DL>
<DD>Gets the MIB Module from list of already loaded MIBs.
 While loading the MIB files, the MIB will be loaded with its dependent
 MibModules. The individual MibModule can be obtained using this method.
 If we want to get all the loaded MIB modules, the getMibModules() method
 can be used.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - the MibModule name defined in the DEFINITIONS clause of the 
 		  MIB. The name is not identified by the filename of the MIB.
<DT><B>Returns:</B><DD>MibModule object with the specified name.<br> 
         null if the MIB is not loaded.<DT><B>See Also:</B><DD><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#getMibModules()"><CODE>getMibModules()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getModuleNameDefinition(java.lang.String)"><!-- --></A><H3>
getModuleNameDefinition</H3>
<PRE>
public java.lang.String <B>getModuleNameDefinition</B>(java.lang.String&nbsp;file)
                                         throws <A HREF="../../../../com/adventnet/snmp/mibs/MibException.html">MibException</A>,
                                                java.io.IOException,
                                                java.io.FileNotFoundException</PRE>
<DL>
<DD>Lets you know the module name contained in this MIB file.
 It checks for syntactical semantics only upto the 
 the MIB module definiton and then stops parsing the MIB.
 <p>
 In most cases API users would not require this method as
 they would only need to load MIBs. This method is used to 
 get the module name of the MIB module present in the MIB file
 without loading the MIB file.
 
 This method will return the first module name present in 
 this MIB file. If the multiple MIB module, present in this
 MIB file, the getMibModuleDefintions(String) method can be 
 used to retrieve all the MIB modules present in this MIB file.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>file</CODE> - name of the file containing the MIB module.
<DT><B>Returns:</B><DD>MIB module label, null if no MIB file is present.
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../com/adventnet/snmp/mibs/MibException.html">MibException</A></CODE> - is thrown upon parse errors.
<DD><CODE>java.io.IOException</CODE> - is thrown upon IO errors.
<DD><CODE>java.io.FileNotFoundException</CODE> - is thrown if the file is not found.<DT><B>See Also:</B><DD><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#getModuleNameDefinitions(java.lang.String)"><CODE>getModuleNameDefinitions(java.lang.String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getMibModule(com.adventnet.snmp.mibs.MibNode)"><!-- --></A><H3>
getMibModule</H3>
<PRE>
public <A HREF="../../../../com/adventnet/snmp/mibs/MibModule.html">MibModule</A> <B>getMibModule</B>(<A HREF="../../../../com/adventnet/snmp/mibs/MibNode.html">MibNode</A>&nbsp;node)</PRE>
<DL>
<DD>Gets the MIB Module that contains the specified MibNode.
 If the node is imported from some other module, then this
 method will return the module which is loaded first.
 
 So in this case, the method getImportedModuleName() in the
 class MibNode  can be used, which will return the module 
 where the node is actually defined.<br>
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>node</CODE> - the node for which module is required.
<DT><B>Returns:</B><DD>MibModule in which the node is defined.<br>
		   null if the node is null or if the module in which the
		   node is defined is not loaded.<DT><B>See Also:</B><DD><A HREF="../../../../com/adventnet/snmp/mibs/MibNode.html#getImportedModuleName()"><CODE>MibNode.getImportedModuleName()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getMibModules()"><!-- --></A><H3>
getMibModules</H3>
<PRE>
public java.util.Enumeration <B>getMibModules</B>()</PRE>
<DL>
<DD>Gets all the MIB modules loaded in this MibOperations instance.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>Enumeration of loaded MibModules.
		   empty enumeration if no modules are loaded.<DT><B>See Also:</B><DD><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#getMibModule(java.lang.String)"><CODE>getMibModule(java.lang.String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setDebugMessageLevel(int)"><!-- --></A><H3>
setDebugMessageLevel</H3>
<PRE>
public static void <B>setDebugMessageLevel</B>(int&nbsp;level)</PRE>
<DL>
<DD>Sets the debug message level.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>level</CODE> - the various debug levels as mentioned below
 <br>The available debug levels are 
 <ul>
 <li>
		ALL_MESSAGES 
 <li>
		WARNING_MESSAGES 
 <li>
		SERIOUS_MESSAGES 
 <li>
		CRITICAL_MESSAGES 
 </ul>
 By default it is set to SERIOUS_MESSAGES.</DL>
</DD>
</DL>
<HR>

<A NAME="createVariableBinding(java.lang.String, java.lang.String[], java.lang.String)"><!-- --></A><H3>
createVariableBinding</H3>
<PRE>
public <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpVarBind.html">SnmpVarBind</A> <B>createVariableBinding</B>(java.lang.String&nbsp;varName,
                                         java.lang.String[]&nbsp;indexes,
                                         java.lang.String&nbsp;value)
                                  throws java.lang.IllegalArgumentException,
                                         <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpException.html">SnmpException</A></PRE>
<DL>
<DD>Creates an SnmpVarBind instance with the supplied parameters.
 Handy for creating SNMP Requests which need encoding of
 instance values for tables.
 <p>
 Supply the Snmp variable <i>value</i> when using for SNMP set.
 if <i>value</i> is null, SnmpNull is used as needed by get requests.
 <p>
 for example,  if you want to create the request for the columnar node 
 "atPhysAddress", defined in the module RFC1213-MIB,
 the varName is "atPhysAddress"
 <br>
 Let the String array indexes contain the values 1 and 192.168.1.100 
 and the String Value be "theAddress".
 <br>
 then the output varbind will be 
 .1.3.6.1.2.1.3.1.1.2.1.1.192.168.1.100: theAddress<br>
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>varName</CODE> - The name, or numeric object ID, of MIB variable
 		   for which this request is being created<DD><CODE>indexes</CODE> - The ordered list of index values String array of the index values.
					Parameter can be null for non-tabular columns.<DD><CODE>value</CODE> - The value to be used for sets. The value is null for gets.
<DT><B>Returns:</B><DD>SnmpVarBind instance for the given parameters.
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpException.html">SnmpException</A></CODE> - is thrown upon variable creation errors.
			  i.e. If the index values contradict with the syntax of the
			  indexMibNodes.
<DD><CODE>java.lang.IllegalArgumentException</CODE> - is thrown if the parameter indexes is null 
			  or if size of the String array indexes is not same as the number of
			  indexMibNodes.</DL>
</DD>
</DL>
<HR>

<A NAME="getSnmpOID(java.lang.String)"><!-- --></A><H3>
getSnmpOID</H3>
<PRE>
public <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpOID.html">SnmpOID</A> <B>getSnmpOID</B>(java.lang.String&nbsp;s)</PRE>
<DL>
<DD>Creates an SnmpOID instance based on the loaded MIBs.
 This does the search of all the loaded MIB modules and creates 
 the SnmpOID instance, if the node is found. Also supports 
 simple "label" or "label.N" strings to create OIDs, where label is 
 the label of a node in the MIB tree (and is a leaf node in the
 latter case).
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>s</CODE> - String OID of the form .N.N.N..., or N.N.N..., in which case 
 		  the static Standard_Prefix in the SnmpAPI class is used. 
 		  N can be a number or a name.
<DT><B>Returns:</B><DD>the SnmpOID instance for the given string oid, if the node is 
 		   found.<br> else return null.</DL>
</DD>
</DL>
<HR>

<A NAME="getTCList(com.adventnet.snmp.snmp2.SnmpOID)"><!-- --></A><H3>
getTCList</H3>
<PRE>
public java.util.Vector <B>getTCList</B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpOID.html">SnmpOID</A>&nbsp;oid)</PRE>
<DL>
<DD>This method returns the vector of Textual Conventions for the given SnmpOID drill down till to the base
 syntax level.This method requires the relavent mib(s) should be loaded into the miboperations before
 invoking the getTCList(snmpoid).
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>oid</CODE> - SnmpOID object.
<DT><B>Returns:</B><DD>the vector of Textual Convensions for the given SnmpOID, if the node is found,
 else return null.<DT><B>Since:</B><DD>AdventNet SNMP API 4 SP4 ( Release 4.0.4 )</DD>
</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="getLeafSyntax(com.adventnet.snmp.snmp2.SnmpOID)"><!-- --></A><H3>
getLeafSyntax</H3>
<PRE>
public <A HREF="../../../../com/adventnet/snmp/mibs/LeafSyntax.html">LeafSyntax</A> <B>getLeafSyntax</B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpOID.html">SnmpOID</A>&nbsp;oid)</PRE>
<DL>
<DD>Gets the syntax for the node corresponding to this oid. 
 This method used to get the syntax of the node corresponding to 
 this SnmpOID. We can also, get the syntax of this OID as follows:
 <p>
 <pre>
 		MibOperations mibOps = new MibOperations();
		mibOps.loadMibModule("RFC1213-MIB");
		MibNode node = mibOps.getMibNode(new SnmpOID(".1.3.6.1.2.1.1.1"));
		LeafSyntax leaf = node.getSyntax();
 </pre><br>
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>oid</CODE> - SnmpOID object.
<DT><B>Returns:</B><DD>LeafSyntax object for this SnmpOID instance if found<br>
 		   null if the node is not a leaf node or if the oid is 
		   invalid.</DL>
</DD>
</DL>
<HR>

<A NAME="getMibNode(java.util.Vector)"><!-- --></A><H3>
getMibNode</H3>
<PRE>
public <A HREF="../../../../com/adventnet/snmp/mibs/MibNode.html">MibNode</A> <B>getMibNode</B>(java.util.Vector&nbsp;oid)</PRE>
<DL>
<DD>Gives the MibNode per the Vector of Strings OID argument.
 If the Vector contains system and 1 it will return sysDescr and 
 if the vector contains sysDescr and nothing else, then it 
 will return the node for sysDescr.
 This method always tries to retrieve a leaf node. If it
 matches a non-leaf node, then that node is returned only if the 
 match of oid elements is exact( i.e. no undefined child components,
 so that system.1 will fail to return a Node if loaded MIB does
 not contain sysDescr node. But mib-2.1 will return system if the 
 system node is available). This searches the available mibs 
 successively and is not suited for large number of MIBs.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>oid</CODE> - Vector of String OIDs
<DT><B>Returns:</B><DD>MibNode per the Vector of Strings OID argument<br>
		   null if the node is not found.</DL>
</DD>
</DL>
<HR>

<A NAME="varBindsToString(com.adventnet.snmp.snmp2.SnmpPDU)"><!-- --></A><H3>
varBindsToString</H3>
<PRE>
public java.lang.String <B>varBindsToString</B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html">SnmpPDU</A>&nbsp;pdu)</PRE>
<DL>
<DD>Gets variable bindings in the PDU, using the information from loaded MIBs.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>pdu</CODE> - the SnmpPDU instance
<DT><B>Returns:</B><DD>String representation of the variable bindings.</DL>
</DD>
</DL>
<HR>

<A NAME="getErrorString(com.adventnet.snmp.snmp2.SnmpPDU)"><!-- --></A><H3>
getErrorString</H3>
<PRE>
public java.lang.String <B>getErrorString</B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html">SnmpPDU</A>&nbsp;pdu)</PRE>
<DL>
<DD>Gives a detailed error information on the PDU using information from the loaded MIBs.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>pdu</CODE> - the SnmpPDU instance
<DT><B>Returns:</B><DD>the error string containing the errored variable bindings</DL>
</DD>
</DL>
<HR>

<A NAME="toByteString(com.adventnet.snmp.snmp2.SnmpPDU)"><!-- --></A><H3>
toByteString</H3>
<PRE>
public java.lang.String <B>toByteString</B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html">SnmpPDU</A>&nbsp;pdu)</PRE>
<DL>
<DD>Returns the byte representation of the SnmpPDU using the MIB information. 
 Same as the toString(SnmpPDU pdu) method.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>pdu</CODE> - the SnmpPDU instance
<DT><B>Returns:</B><DD>the byte representation of the SnmpPDU instance value.<DT><B>See Also:</B><DD><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#toString(com.adventnet.snmp.snmp2.SnmpPDU)"><CODE>toString(SnmpPDU)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="toByteString(com.adventnet.snmp.snmp2.SnmpVarBind)"><!-- --></A><H3>
toByteString</H3>
<PRE>
public java.lang.String <B>toByteString</B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpVarBind.html">SnmpVarBind</A>&nbsp;varBind)</PRE>
<DL>
<DD>Returns the byte representation of SnmpVarbind using the MIB information.
 Same as the toString(SnmpVarBind varBind) method
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>varBind</CODE> - the SnmpVarBind instance
<DT><B>Returns:</B><DD>the byte representation of the SnmpVarBind<DT><B>See Also:</B><DD><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#toString(com.adventnet.snmp.snmp2.SnmpVarBind)"><CODE>toString(SnmpVarBind)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="toByteString(com.adventnet.snmp.snmp2.SnmpVar, com.adventnet.snmp.snmp2.SnmpOID)"><!-- --></A><H3>
toByteString</H3>
<PRE>
public java.lang.String <B>toByteString</B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpVar.html">SnmpVar</A>&nbsp;var,
                                     <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpOID.html">SnmpOID</A>&nbsp;oid)</PRE>
<DL>
<DD>Gives a translated value for the SnmpVar instance using the MIB information.  
 This method is same as the toString(SnmpVar var, SnmpOID oid) method
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the byte representation of the SnmpVar instance value<DT><B>See Also:</B><DD><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#toString(com.adventnet.snmp.snmp2.SnmpVar, com.adventnet.snmp.snmp2.SnmpOID)"><CODE>toString(SnmpVar,SnmpOID)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="toString(com.adventnet.snmp.snmp2.SnmpPDU)"><!-- --></A><H3>
toString</H3>
<PRE>
public java.lang.String <B>toString</B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html">SnmpPDU</A>&nbsp;pdu)</PRE>
<DL>
<DD>Returns the string value of the pdu using the MIB information
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>pdu</CODE> - the SnmpPDU instance
<DT><B>Returns:</B><DD>the string representation of the SnmpPDU instance.</DL>
</DD>
</DL>
<HR>

<A NAME="toString(com.adventnet.snmp.snmp2.SnmpVarBind)"><!-- --></A><H3>
toString</H3>
<PRE>
public java.lang.String <B>toString</B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpVarBind.html">SnmpVarBind</A>&nbsp;varbind)</PRE>
<DL>
<DD>Provides a translated value for an SNMP variable binding using information from the loaded MIBs.
 For e.g. if MIB-II is loaded, for the node ifType, this method will 
 return  "ethernet(2)" instead of the "2" returned by SnmpVar.toString().
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>varbind</CODE> - the SnmpVarBind instance
<DT><B>Returns:</B><DD>the string representation such as "sysDescr.0:Adv Snmp Agent".</DL>
</DD>
</DL>
<HR>

<A NAME="toTagString(com.adventnet.snmp.snmp2.SnmpVarBind)"><!-- --></A><H3>
toTagString</H3>
<PRE>
public java.lang.String <B>toTagString</B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpVarBind.html">SnmpVarBind</A>&nbsp;varbind)</PRE>
<DL>
<DD>Provides a translated value for an SNMP variable binding using information from the loaded MIBs.
 For e.g. if MIB-II is loaded, for the node ifType this method will
 return "ethernet(2)" instead of the "2" returned by SnmpVar.toString().
 The return values are tagged.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>varbind</CODE> - the SnmpVarBind instance
<DT><B>Returns:</B><DD>the detailed description of the SnmpVarBind instance as a string</DL>
</DD>
</DL>
<HR>

<A NAME="toString(com.adventnet.snmp.snmp2.SnmpVar, com.adventnet.snmp.snmp2.SnmpOID)"><!-- --></A><H3>
toString</H3>
<PRE>
public java.lang.String <B>toString</B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpVar.html">SnmpVar</A>&nbsp;var,
                                 <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpOID.html">SnmpOID</A>&nbsp;oid)</PRE>
<DL>
<DD>Provides a translated value for an SNMP variable using information from the loaded MIBs.
 For e.g. if MIB-II is loaded, for the node ifType this method will 
 return "ethernet(2)" instead of the "2" returned by  SnmpVar.toString().
 The two parameters will usually comprise a varbind.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>var</CODE> - the SnmpVar object for the oid.<DD><CODE>oid</CODE> - the oid whose value needs to be printed.
<DT><B>Returns:</B><DD>String representation for the SnmpOID instance value if 
         found in loaded Mibs.<br>If node is not found this method
         always returns a printable ascii string.</DL>
</DD>
</DL>
<HR>

<A NAME="toString(com.adventnet.snmp.snmp2.SnmpOID)"><!-- --></A><H3>
toString</H3>
<PRE>
public java.lang.String <B>toString</B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpOID.html">SnmpOID</A>&nbsp;oid)</PRE>
<DL>
<DD>Provides the translated name representation for the
 SnmpOID instance if found in loaded Mibs.
 For e.g. for the oid .1.3, this method will return .iso.org
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>oid</CODE> - the SnmpOID instance value
<DT><B>Returns:</B><DD>the numbered oid string</DL>
</DD>
</DL>
<HR>

<A NAME="toShortString(com.adventnet.snmp.snmp2.SnmpOID)"><!-- --></A><H3>
toShortString</H3>
<PRE>
public java.lang.String <B>toShortString</B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpOID.html">SnmpOID</A>&nbsp;oid)</PRE>
<DL>
<DD>Provides the short translated name representation for the SnmpOID instance.
  This does not perform stringification of index 
  components of columnar elements to their normal types.
  So if the oid corresponds to a columnar object "alpha" with 
  a string index component "beta", then the  output will be 
  alpha.98.101.116.97 (not alpha.beta)
  For simple scalar nodes this will return values as mentioned 
  earlier  i.e sysUpTime.0 for the oid 1.3.0
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>oid</CODE> - the SnmpOID instance
<DT><B>Returns:</B><DD>the short form of the node string corresponding to the oid.(node label only, e.g. sysDescr.0)<br>
          the numeric oid if no corresponding node found.</DL>
</DD>
</DL>
<HR>

<A NAME="getInstanceString(com.adventnet.snmp.snmp2.SnmpOID)"><!-- --></A><H3>
getInstanceString</H3>
<PRE>
public java.lang.String <B>getInstanceString</B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpOID.html">SnmpOID</A>&nbsp;oid)</PRE>
<DL>
<DD>Gets the Instance portion of OID as a String. e.g. ".0" for a scalar.
 The instance component is a .0 for scalar leaf nodes
 such as sysDescr,sysName etc. Instances of scalar objects
 are identified by the OID value of the object suffixed with the 
 number 0. Instances of columnar objects (table objects) are 
 identified by their OID values suffixed by their index components.
 The index component is formed from the encoding of the index 
 values in a predefined manner based on the types of the index 
 columns.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>oid</CODE> - the SnmpOID for which the instance component is required.
<DT><B>Returns:</B><DD>the instance component of the oid.<br>
         null, if the corresponding node is not found.<DT><B>See Also:</B><DD><A HREF="../../../../com/adventnet/snmp/mibs/LeafSyntax.html#decodeInstanceString(java.lang.String, java.util.Vector)"><CODE>LeafSyntax.decodeInstanceString(java.lang.String, java.util.Vector)</CODE></A>, 
<A HREF="../../../../com/adventnet/snmp/mibs/LeafSyntax.html#encodeInstanceString(java.util.Vector, java.util.Vector)"><CODE>LeafSyntax.encodeInstanceString(java.util.Vector, java.util.Vector)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getInstanceString(com.adventnet.snmp.snmp2.SnmpOID, com.adventnet.snmp.mibs.MibNode)"><!-- --></A><H3>
getInstanceString</H3>
<PRE>
public java.lang.String <B>getInstanceString</B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpOID.html">SnmpOID</A>&nbsp;oid,
                                          <A HREF="../../../../com/adventnet/snmp/mibs/MibNode.html">MibNode</A>&nbsp;node)</PRE>
<DL>
<DD>Gets the Instance portion of OID as a String. e.g. ".0" for a scalar. 
 This version avoids having to search for node if  already available.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>oid</CODE> - the SnmpOID instance<DD><CODE>node</CODE> - the MibNode object corresponding to the oid.
<DT><B>Returns:</B><DD>the instance string if the node is found and it is matched with the oid.<br>
			null if node and oid are mismatched. 
			<p>Please note that this verification 
		    is not comprehensive for sake of efficiency. So it is not ensured that a
		    null will be returned for a mismatched node.
          This returns the sub-string corresponding to the instance. For cases such
		    as MibNode being system and OID as sysDescr the return value will start with
          the sub-id of mib-2.
          The intersection of the node oid and the given oid are
          eliminated from the returned oid string.</DL>
</DD>
</DL>
<HR>

<A NAME="getMibNode(com.adventnet.snmp.snmp2.SnmpOID)"><!-- --></A><H3>
getMibNode</H3>
<PRE>
public <A HREF="../../../../com/adventnet/snmp/mibs/MibNode.html">MibNode</A> <B>getMibNode</B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpOID.html">SnmpOID</A>&nbsp;oid)</PRE>
<DL>
<DD>Gets the MibNode for this SnmpOID instance by searching all the MIB modules.
 If a node is not a leaf, then the oid should match exactly. 
 So MibNode for system will be returned if the exact oid
 for system is given. But for leaf nodes such as ifDescr,
 MibNode is returned even if the oid is ifDescr.1
 The instance component of the oid is not necessary for a match.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>oid</CODE> - the SnmpOID instance
<DT><B>Returns:</B><DD>the MibNode corresponding to the oid.</DL>
</DD>
</DL>
<HR>

<A NAME="getNearestNode(com.adventnet.snmp.snmp2.SnmpOID)"><!-- --></A><H3>
getNearestNode</H3>
<PRE>
public <A HREF="../../../../com/adventnet/snmp/mibs/MibNode.html">MibNode</A> <B>getNearestNode</B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpOID.html">SnmpOID</A>&nbsp;oid)</PRE>
<DL>
<DD>Gets the node corresponding to the oid which is nearest to this SnmpOID instance.
 This does a search of all MIB modules loaded in this MibOperations instance
 and returns the oid if found. The mib node need not be a leaf node.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>oid</CODE> - the SnmpOID instance
<DT><B>Returns:</B><DD>the node nearest to this oid.<br> 
         If there is no node successive to this oid, it returns the node corresponding to this oid.</DL>
</DD>
</DL>
<HR>

<A NAME="getMibTrap(com.adventnet.snmp.snmp2.SnmpOID, int, int)"><!-- --></A><H3>
getMibTrap</H3>
<PRE>
public <A HREF="../../../../com/adventnet/snmp/mibs/MibTrap.html">MibTrap</A> <B>getMibTrap</B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpOID.html">SnmpOID</A>&nbsp;enterprise,
                          int&nbsp;genericType,
                          int&nbsp;specificType)</PRE>
<DL>
<DD>Gets the trap definition matching the given enterprise, generic type
 and specific type values. If the enterprise value is `snmp' (.1.3.6.1.2.1.11), 
 the trap number is compared with the generic type. Else if the generic type 
 value is 6,	the specific type value is compared with the trap number.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>enterprise</CODE> - the enterprise value of the trap-type<DD><CODE>genericType</CODE> - the integer value<DD><CODE>specificType</CODE> - the integer value
<DT><B>Returns:</B><DD>the MibTrap object if the exact match is found.<br>
			 null otherwise.</DL>
</DD>
</DL>
<HR>

<A NAME="getNotificationType(com.adventnet.snmp.snmp2.SnmpOID)"><!-- --></A><H3>
getNotificationType</H3>
<PRE>
public <A HREF="../../../../com/adventnet/snmp/mibs/NotificationType.html">NotificationType</A> <B>getNotificationType</B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpOID.html">SnmpOID</A>&nbsp;trapoid)</PRE>
<DL>
<DD>Gets the NotificationType object of the given trap oid
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the NotificationType object if the exact match is found.<br>
			 null otherwise.<DT><B>Since:</B><DD>AdventNet SNMP API 4.0.3</DD>
</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="getMibNode(java.lang.String)"><!-- --></A><H3>
getMibNode</H3>
<PRE>
public <A HREF="../../../../com/adventnet/snmp/mibs/MibNode.html">MibNode</A> <B>getMibNode</B>(java.lang.String&nbsp;oidString)</PRE>
<DL>
<DD>Gets the node corresponding to this label.
 The node is searched in all the loaded modules.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>oidString</CODE> - the name of the node
<DT><B>Returns:</B><DD>MibNode Object corresponding to the node.<br>
  	   null if the node is not found.<DT><B>See Also:</B><DD><A HREF="../../../../com/adventnet/snmp/mibs/MibModule.html#getMibNode(java.lang.String)"><CODE>MibModule.getMibNode(String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getMibNode(java.lang.String, java.lang.String)"><!-- --></A><H3>
getMibNode</H3>
<PRE>
public <A HREF="../../../../com/adventnet/snmp/mibs/MibNode.html">MibNode</A> <B>getMibNode</B>(java.lang.String&nbsp;nodeLabel,
                          java.lang.String&nbsp;mib)</PRE>
<DL>
<DD>Gets the node correspoding to the label in this mib.
 This method searches for the node only in the specified mib.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>nodeLabel</CODE> - the name of the MibNode<DD><CODE>mib</CODE> - the MIB name in which the node is being searched.
<DT><B>Returns:</B><DD>the MibNode if the node is found in the mib specified.<br>
			null otherwise.</DL>
</DD>
</DL>
<HR>

<A NAME="getNodesFromNames(java.util.Vector)"><!-- --></A><H3>
getNodesFromNames</H3>
<PRE>
public java.util.Vector <B>getNodesFromNames</B>(java.util.Vector&nbsp;nodes)</PRE>
<DL>
<DD>Gets the MibNodes corresponding to the names in the Vector.
 This is useful for converting node lists stored as names.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>nodes</CODE> - Vector of the node names.
<DT><B>Returns:</B><DD>Vector of MibNodes.  
 The Vector element will be null if the particular MibNode is not found.</DL>
</DD>
</DL>
<HR>

<A NAME="getNodesFromString(java.lang.String)"><!-- --></A><H3>
getNodesFromString</H3>
<PRE>
public java.util.Vector <B>getNodesFromString</B>(java.lang.String&nbsp;nodeList)</PRE>
<DL>
<DD>Gets the MibNodes corresponding to the node names in the nodelist.
 This method searches for the specified MIB nodes given in the String argument.
 This is useful for converting index lists, object names lists, etc.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>nodeList</CODE> - list of the node names separated by space or comma.
<DT><B>Returns:</B><DD>Vector of MibNodes.
 The Vector element will be null if the particular MibNode is not found.</DL>
</DD>
</DL>
<HR>

<A NAME="getSyntaxByName(java.lang.String)"><!-- --></A><H3>
getSyntaxByName</H3>
<PRE>
public <A HREF="../../../../com/adventnet/snmp/mibs/LeafSyntax.html">LeafSyntax</A> <B>getSyntaxByName</B>(java.lang.String&nbsp;name)</PRE>
<DL>
<DD>Gets the syntax for the node represented by the String argument.
 <br>NOTE - For TCs , you can get the syntax only if the 
 corresponding MIB is loaded.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - the name of the syntax or TC
<DT><B>Returns:</B><DD>the LeafSyntax associated with this name.<br>
 		   null, if there is no syntax associated with the name.</DL>
</DD>
</DL>
<HR>

<A NAME="getModuleSize()"><!-- --></A><H3>
getModuleSize</H3>
<PRE>
public int <B>getModuleSize</B>()</PRE>
<DL>
<DD>Returns the number of modules loaded in this MibOperations instance.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="unloadMibModule(com.adventnet.snmp.mibs.MibModule)"><!-- --></A><H3>
unloadMibModule</H3>
<PRE>
public boolean <B>unloadMibModule</B>(<A HREF="../../../../com/adventnet/snmp/mibs/MibModule.html">MibModule</A>&nbsp;module)</PRE>
<DL>
<DD>Unloads the MibModule from the modules table.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>module</CODE> - the nstance of the MibModule to be unloaded.
<DT><B>Returns:</B><DD>true if module is unloaded, false otherwise.</DL>
</DD>
</DL>
<HR>

<A NAME="unloadMibModule(java.lang.String)"><!-- --></A><H3>
unloadMibModule</H3>
<PRE>
public <A HREF="../../../../com/adventnet/snmp/mibs/MibModule.html">MibModule</A> <B>unloadMibModule</B>(java.lang.String&nbsp;name)</PRE>
<DL>
<DD>Unloads the MibModule from the MibModules loaded in this instance.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - the name of the module to be unloaded.
<DT><B>Returns:</B><DD>the MibModule instance, if the module is unloaded.</DL>
</DD>
</DL>
<HR>

<A NAME="unloadAllMibModules()"><!-- --></A><H3>
unloadAllMibModules</H3>
<PRE>
public void <B>unloadAllMibModules</B>()</PRE>
<DL>
<DD>Unload all the loaded MibModules.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="addLabel(java.lang.String)"><!-- --></A><H3>
addLabel</H3>
<PRE>
public void <B>addLabel</B>(java.lang.String&nbsp;addLabel)</PRE>
<DL>
<DD>Used to add label which should not be treated as a reserved word by 
 the MIB parser.
 <p>
 So if a particular reserved word in MIB is to be used in a different
 manner, then the conflict can be resolved by using this method.
 The addLabel should be invoked before loading the MIB file.
 Some MIB modules contains the reserved word as the identifier. 
 <p>
 For example, suppose if a module contains a TC whose name is one of
 the reserved words, Unsigned32
 <pre>
 Unsigned32 ::= INTEGER(0 .. 2147483647)
 </pre>
 If you wish you do not want to treat Unsigned32 as a reserved word,
 then you can do the following
 <pre>
 	MibOperations mibOps = new MibOperations();
 	mibOps.addLabel("Unsigned32");
 	mibOps.loadMibModules("mibFile");
 </pre>
 The following are the RESERVED key words 
 <br>
 "ABSENT ACCESS AGENT-CAPABILITIES ANY APPLICATION AUGMENTS<br> 
  BEGIN BIT BITS BOOLEAN BY CHOICE COMPONENT COMPONENTS<br> 
  CONTACT-INFO CREATION-REQUIRES Counter32 Counter64 DEFAULT<br>
  DEFINED DEFINITIONS DEFVAL DESCRIPTION DISPLAY-HINT END<br> 
  ENUMERATED ENTERPRISE EXPLICIT EXPORTS EXTERNAL FALSE FROM<br> 
  GROUP Gauge32 IDENTIFIER IMPLICIT IMPLIED IMPORTS INCLUDES<br>
  INDEX INTEGER Integer32 IpAddress LAST-UPDATED MANDATORY-GROUPS<br>
  MAX MAX-ACCESS MIN MIN-ACCESS MINUS-INFINITY MODULE<br> 
  MODULE-COMPLIANCE MODULE-IDENTITY NOTIFICATION-GROUP<br> 
  NOTIFICATION-TYPE NOTIFICATIONS NULL OBJECT OBJECT-GROUP<br> 
  OBJECT-IDENTITY OBJECT-TYPE OBJECTS OCTET OF OPTIONAL<br> 
  ORGANIZATION Opaque PLUS-INFINITY PRESENT PRIVATE<br> 
  PRODUCT-RELEASE REAL REFERENCE REVISION SEQUENCE SET SIZE<br> 
  STATUS STRING SUPPORTS SYNTAX TAGS TEXTUAL-CONVENTION<br> 
  TRAP-TYPE TRUE TimeTicks UNITS UNIVERSAL Unsigned32 VARIABLES<br> 
  VARIATION WITH WRITE-SYNTAX"
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>addLabel</CODE> - the word which should not be treated as a reserved 
 		  word.</DL>
</DD>
</DL>
<HR>

<A NAME="getIgnoreSpecificControlCodes()"><!-- --></A><H3>
getIgnoreSpecificControlCodes</H3>
<PRE>
public boolean <B>getIgnoreSpecificControlCodes</B>()</PRE>
<DL>
<DD>Used to get the value determining whether the new-line characters, 
 tabs and carriage returns are printed or their hex values
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>true when the boolean in the method setIgnoreSpecificControlCodes(boolean specConCode) is set to true.<br> 
		   false when the boolean is not set, or if the boolean is set to false.<DT><B>See Also:</B><DD><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#setIgnoreSpecificControlCodes(boolean)"><CODE>setIgnoreSpecificControlCodes(boolean)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setIgnoreSpecificControlCodes(boolean)"><!-- --></A><H3>
setIgnoreSpecificControlCodes</H3>
<PRE>
public void <B>setIgnoreSpecificControlCodes</B>(boolean&nbsp;specConCode)</PRE>
<DL>
<DD>Used to set the value determining whether the new-line characters, 
 tabs and carriage returns are printed as they are or their hex values.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>specConCode</CODE> - the boolean value <br>
 Ifset to true then they are printed as they are, else their hex value is printed.</DL>
</DD>
</DL>
<HR>

<A NAME="setReadDesc(boolean)"><!-- --></A><H3>
setReadDesc</H3>
<PRE>
public void <B>setReadDesc</B>(boolean&nbsp;readFlag)</PRE>
<DL>
<DD>Sets the flag for reading the descriptions from compiled mib modules. 
 The .cds file contains the description, comments and reference of the
 node objects present in the MibModule. For the fast loading, or if we
 don't need the information like, description and reference we can omit
 the loading of this .cds file by setting this flag false.
 The default value is true.
 NOTE: This applies only when the setLoadFromCompiledMibs is set to true.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>readFlag</CODE> - the boolean value</DL>
</DD>
</DL>
<HR>

<A NAME="isReadDesc()"><!-- --></A><H3>
isReadDesc</H3>
<PRE>
public boolean <B>isReadDesc</B>()</PRE>
<DL>
<DD>Used to know whether reading the descriptions from compiled modules is enabled.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>false if the readFlag in the method setReadDesc(boolean readFlag) is set to false.<br>
         true if the boolean is not set or if the boolean is set to true.</DL>
</DD>
</DL>
<HR>

<A NAME="getMibModuleNames()"><!-- --></A><H3>
getMibModuleNames</H3>
<PRE>
public java.util.Enumeration <B>getMibModuleNames</B>()</PRE>
<DL>
<DD>Gets the names of the Mib modules loaded.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>Enumeration of loaded MibModules.<br>
         Enumeration object with zero entries if no MIB is loaded.</DL>
</DD>
</DL>
<HR>

<A NAME="encodeInstanceString(java.util.Vector, java.util.Vector)"><!-- --></A><H3>
encodeInstanceString</H3>
<PRE>
public java.lang.String <B>encodeInstanceString</B>(java.util.Vector&nbsp;indexValue,
                                             java.util.Vector&nbsp;indexMibNodes)
                                      throws java.lang.NumberFormatException</PRE>
<DL>
<DD>Encodes an instance string based on the Snmp Type of the indexMibNode.
 This encoded instance string should be concatenated to the
 node oid to get the complete oid.
 For example, in atTable(RFC1213-MIB) the indexMibNodes are atIfIndex and 
 atIfNetAddress. The encoded instance String for the atPhysAddress (.1.3.6.1.2.1.3.1.1.2) 
 can be obtained as follows.
 The indexValue ["1","192.168.1.1"] where "1" is for atIfIndex and "192.168.1.1"
 for atIfNetAddress respectively.
 It will return the encoded string value as "1.1.192.168.1.1". It should append
 with atIfPhysAddress oid to get the complete OID (.1.3.6.1.2.1.3.1.1.2.1.1.192.168.1.1).
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>indexValue</CODE> - Vector of String values.<DD><CODE>indexMibNodes</CODE> - Vector of indexMibNodes corresponding to the indexValue
<DT><B>Returns:</B><DD>String representation of the instance value.
<DD><CODE>java.lang.NumberFormatException</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="initJdbcParams(java.lang.String, java.lang.String, java.lang.String, java.lang.String)"><!-- --></A><H3>
initJdbcParams</H3>
<PRE>
public void <B>initJdbcParams</B>(java.lang.String&nbsp;driverName,
                           java.lang.String&nbsp;URL,
                           java.lang.String&nbsp;userName,
                           java.lang.String&nbsp;passWord)
                    throws <A HREF="../../../../com/adventnet/snmp/mibs/MibException.html">MibException</A></PRE>
<DL>
<DD>If you need to use database support, you have to invoke this method to initialize 
 the Jdbc Parameters. 
 This method used to instantiate the connection with the database.
 The setLoadFromDatabase should be invoked to use the database operations.
 The default database we used is MySQL. If we want to use some other database,
 the setDatabaseName(byte) will be used to select the database. Currently
 we are supporting the databases MySQL and Oracle.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>driverName</CODE> - Name of the DataBase driver.<DD><CODE>URL</CODE> - URL pointing to the DataBase file name<DD><CODE>userName</CODE> - userName<DD><CODE>passWord</CODE> - password
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../com/adventnet/snmp/mibs/MibException.html">MibException</A></CODE> - if any SQLException is thrown.</DL>
</DD>
</DL>
<HR>

<A NAME="setLoadFromDatabase(boolean)"><!-- --></A><H3>
setLoadFromDatabase</H3>
<PRE>
public void <B>setLoadFromDatabase</B>(boolean&nbsp;flag)</PRE>
<DL>
<DD>Defines whether to load the MIB from DataBase.
 If set to true the MIB is loaded from the Database. 
 The MIB can be loaded from the database as follows:

 	MibOperations mibOps = new MibOperations();
		mibOps.initJdbcParams("driverName",
										"URL","userName","passWord");
 	mibOps.setLoadFromDatabase(true);
 	mibOps.loadMibModules("mibFile");

 The initJdbcParams method should be used to get the database connection.
 The default database we support is MySQL. If you need to use
 other database, the setDatabaseName() method should  be used.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>flag</CODE> - the boolean value.<DT><B>See Also:</B><DD><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#initJdbcParams(java.lang.String, java.lang.String, java.lang.String, java.lang.String)"><CODE>initJdbcParams(java.lang.String, java.lang.String, java.lang.String, java.lang.String)</CODE></A>, 
<A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#setDatabaseName(byte)"><CODE>setDatabaseName(byte)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="isLoadFromDatabase()"><!-- --></A><H3>
isLoadFromDatabase</H3>
<PRE>
public boolean <B>isLoadFromDatabase</B>()</PRE>
<DL>
<DD>Used to know whether the MIB is loaded from the DataBase.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>true if the boolean in the method setLoadFromDatabase(boolean flag) is set to true.<br>
         false if the boolean is not set, or if the bolean is set to false.<DT><B>See Also:</B><DD><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#setLoadFromDatabase(boolean)"><CODE>setLoadFromDatabase(boolean flag)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setOverwriteDatabase(boolean)"><!-- --></A><H3>
setOverwriteDatabase</H3>
<PRE>
public void <B>setOverwriteDatabase</B>(boolean&nbsp;overWrite)</PRE>
<DL>
<DD>Defines whether to overwrite the existing database files.
 NOTE: This applies only when the setLoadFromDataBase is set to true.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>overWrite</CODE> - the boolean value<br>
		  If set to true the database is overwritten.</DL>
</DD>
</DL>
<HR>

<A NAME="isOverwriteDatabase()"><!-- --></A><H3>
isOverwriteDatabase</H3>
<PRE>
public boolean <B>isOverwriteDatabase</B>()</PRE>
<DL>
<DD>Gets the overwriteDataBase boolean.
 NOTE: This applies only when the setLoadFromDataBase is set to true.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>true if the overWrite boolean in the setOverwriteDatabase(boolean overWrite) is set to true.<br>
         false if the boolean is not set or if the boolean is set to false.<DT><B>See Also:</B><DD><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#setOverwriteDatabase(boolean)"><CODE>setOverwriteDatabase(boolean overWrite)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setDatabaseName(byte)"><!-- --></A><H3>
setDatabaseName</H3>
<PRE>
public void <B>setDatabaseName</B>(byte&nbsp;type)</PRE>
<DL>
<DD>Used to set the database. The default database ia mysql.
 <ul>
 <li>
	    Oracle - ORACLE
 <li>
		MySQL  - MYSQL
 </ul>
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>type</CODE> - the byte value (e.g. MibOperations.ORACLE )</DL>
</DD>
</DL>
<HR>

<A NAME="getDatabaseName()"><!-- --></A><H3>
getDatabaseName</H3>
<PRE>
public byte <B>getDatabaseName</B>()</PRE>
<DL>
<DD>Gets the name of the Database.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the database set by the method setDatabaseName(byte type).<br>
 		   If not set, returns the default value MibOperations.MYSQL<DT><B>See Also:</B><DD><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#setDatabaseName(byte)"><CODE>setDatabaseName(byte type)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setMultipleRevision(java.lang.String)"><!-- --></A><H3>
setMultipleRevision</H3>
<PRE>
public void <B>setMultipleRevision</B>(java.lang.String&nbsp;revisionFileName)</PRE>
<DL>
<DD>Sets the Multiple revision for the MIB.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>revisionFileName</CODE> - the name of the files containing different Revisions of the MibModule.
		  The file names can be seperated by space or pipe(|) symbol.</DL>
</DD>
</DL>
<HR>

<A NAME="getMultipleRevision()"><!-- --></A><H3>
getMultipleRevision</H3>
<PRE>
public java.lang.String <B>getMultipleRevision</B>()</PRE>
<DL>
<DD>Gets the multiple revisions availabe for the MIB.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the multiple revision set by the method setMultipleRevision.<br>
 		   If not set, returns empty string.</DL>
</DD>
</DL>
<HR>

<A NAME="isMultipleRevision()"><!-- --></A><H3>
isMultipleRevision</H3>
<PRE>
public boolean <B>isMultipleRevision</B>()</PRE>
<DL>
<DD>Used to know whether the multiple revision is set or not.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>true if the  Multiple revision is set. false otherwise.</DL>
</DD>
</DL>
<HR>

<A NAME="setShowImportedIndex(boolean)"><!-- --></A><H3>
setShowImportedIndex</H3>
<PRE>
public void <B>setShowImportedIndex</B>(boolean&nbsp;flag)</PRE>
<DL>
<DD>Sets the showImportedIndex boolean value.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>flag</CODE> - the boolean value. <br>
 If set to true,the imported index nodes will appear in the Mibtree.
 By default, the value is set to false.</DL>
</DD>
</DL>
<HR>

<A NAME="isShowImportedIndex()"><!-- --></A><H3>
isShowImportedIndex</H3>
<PRE>
public boolean <B>isShowImportedIndex</B>()</PRE>
<DL>
<DD>Used to know whether the external indices are shown in the Mib tree.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>true if the showImportedIndex boolean in the method setShowImportedIndex(boolean flag) is set to true.<br>
         false if not set, or if the boolean is set to false.</DL>
</DD>
</DL>
<HR>

<A NAME="getModuleNameDefinitions(java.lang.String)"><!-- --></A><H3>
getModuleNameDefinitions</H3>
<PRE>
public java.lang.String[] <B>getModuleNameDefinitions</B>(java.lang.String&nbsp;fileName)
                                            throws java.io.FileNotFoundException,
                                                   <A HREF="../../../../com/adventnet/snmp/mibs/MibException.html">MibException</A>,
                                                   java.io.IOException</PRE>
<DL>
<DD>Gives all the module names contained in this mib file.
 The MIB file can have multiple MIB modules. This method is used to 
 retrieve all the module names present in the MIB file without loading
 the MIB file.

 If the MIB file contains only a single MIB module, the getModuleNameDefinition
 can be used.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>fileName</CODE> - name of the file containing the MIB module.
<DT><B>Returns:</B><DD>String array of the module names, null if not a valid MIB file.
<DD><CODE>java.io.FileNotFoundException</CODE>
<DD><CODE><A HREF="../../../../com/adventnet/snmp/mibs/MibException.html">MibException</A></CODE>
<DD><CODE>java.io.IOException</CODE><DT><B>See Also:</B><DD><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#getModuleNameDefinition(java.lang.String)"><CODE>getModuleNameDefinition(java.lang.String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setParsingLevel(byte)"><!-- --></A><H3>
setParsingLevel</H3>
<PRE>
public void <B>setParsingLevel</B>(byte&nbsp;parsingLevel)</PRE>
<DL>
<DD>Used to set the level of parsing.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Since:</B><DD>AdventNet SNMP API 4</DD>
</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="setImportsParsingLevel(byte)"><!-- --></A><H3>
setImportsParsingLevel</H3>
<PRE>
public void <B>setImportsParsingLevel</B>(byte&nbsp;parsingLevel)</PRE>
<DL>
<DD>Used to set the level of parsing for the dependency MIB files.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>parsingLevel</CODE> - the various parsing levels as mentioned below
 <br>The available parsing levels are 
 <ul>
 <li>
      LENIENT  
 <li>
      NORMAL 
 <li>
      SERIOUS
 <li>
      CRITICAL 
 </ul>
 By default it is set to LENIENT.<DT><B>Since:</B><DD>AdventNet SNMP API 4</DD>
</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="registerParsingLevel(byte, byte[])"><!-- --></A><H3>
registerParsingLevel</H3>
<PRE>
public void <B>registerParsingLevel</B>(byte&nbsp;parsingLevel,
                                 byte[]&nbsp;checks)</PRE>
<DL>
<DD>Used to create an used defined parsing level.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>parsingLevel</CODE> - the byte value other than 0,1,2,3<DD><CODE>checks</CODE> - the checks to be included in this new parsing level<DT><B>Since:</B><DD>AdventNet SNMP API 4</DD>
</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="addChecks(byte[], byte)"><!-- --></A><H3>
addChecks</H3>
<PRE>
public void <B>addChecks</B>(byte[]&nbsp;checks,
                      byte&nbsp;parsingLevel)</PRE>
<DL>
<DD>Used to add checks to the existing parsing level. If the checks to be
 added is not present in this parsing level, then these checks are added
 to this parsing level.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>checks</CODE> - the byte array of checks to be added.<DD><CODE>parsingLevel</CODE> - the parsinglevel in which the checks are added.<DT><B>Since:</B><DD>AdventNet SNMP API 4</DD>
</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="removeChecks(byte[], byte)"><!-- --></A><H3>
removeChecks</H3>
<PRE>
public void <B>removeChecks</B>(byte[]&nbsp;checks,
                         byte&nbsp;parsingLevel)</PRE>
<DL>
<DD>Used to remove checks from the existing parsing level. If the checks to be
 removed are present in this parsing level, then the checks are removed.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>checks</CODE> - the byte array of checks to be removed.<DD><CODE>parsingLevel</CODE> - the parsinglevel from which the checks are removed.<DT><B>Since:</B><DD>AdventNet SNMP API 4</DD>
</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="getParsingLevel()"><!-- --></A><H3>
getParsingLevel</H3>
<PRE>
public byte <B>getParsingLevel</B>()</PRE>
<DL>
<DD>Returns the parsingLevel.
 If not set returns the default value, MibOperations.LENIENT
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>byte - the parsing level.<DT><B>Since:</B><DD>AdventNet SNMP API 4</DD>
</DD>
<DT><B>See Also:</B><DD><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#setParsingLevel(byte)"><CODE>setParsingLevel(byte)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getImportsParsingLevel()"><!-- --></A><H3>
getImportsParsingLevel</H3>
<PRE>
public byte <B>getImportsParsingLevel</B>()</PRE>
<DL>
<DD>Returns the parsingLevel for the dependency MIB files.
 If not set returns the default value, MibOperations.LENIENT
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>byte - the imports parsing level.<DT><B>Since:</B><DD>AdventNet SNMP API 4</DD>
</DD>
<DT><B>See Also:</B><DD><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#setParsingLevel(byte)"><CODE>setParsingLevel(byte)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getChecks(byte)"><!-- --></A><H3>
getChecks</H3>
<PRE>
public byte[] <B>getChecks</B>(byte&nbsp;parsingLevel)</PRE>
<DL>
<DD>Used to get the checks available for a particular parsingLevel.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>parsingLevel</CODE> - the parsingLevel
<DT><B>Returns:</B><DD>the byte array of checks available for this parsing level.
         null, if the parsingLevel doesn't exist.<DT><B>Since:</B><DD>AdventNet SNMP API 4</DD>
</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="getErrorModuleNames()"><!-- --></A><H3>
getErrorModuleNames</H3>
<PRE>
public java.util.Vector <B>getErrorModuleNames</B>()</PRE>
<DL>
<DD>Returns the names of modules which are having parsing errors.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>Vector of errored modules<br>
		   empty Vector, if there is no error in any modules.<DT><B>Since:</B><DD>AdventNet SNMP API 4</DD>
</DD>
<DT><B>See Also:</B><DD><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#getErrorMessages(java.lang.String)"><CODE>getErrorMessages(java.lang.String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getErrorMessages(java.lang.String)"><!-- --></A><H3>
getErrorMessages</H3>
<PRE>
public java.util.Vector <B>getErrorMessages</B>(java.lang.String&nbsp;module)</PRE>
<DL>
<DD>Returns Vector of MibErrorMessages object for the module specified.
 From this MibErrorMessages object the error number and the error message
 associated with this parsing error can be obtained.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>Vector of MibErrorMessages object<br>
 		   empty Vector, if there is no error in the specified module.<DT><B>Since:</B><DD>AdventNet SNMP API 4</DD>
</DD>
<DT><B>See Also:</B><DD><A HREF="../../../../com/adventnet/snmp/mibs/MibOperations.html#getErrorModuleNames()"><CODE>getErrorModuleNames()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="enableDisplayHint(boolean)"><!-- --></A><H3>
enableDisplayHint</H3>
<PRE>
public void <B>enableDisplayHint</B>(boolean&nbsp;flag)</PRE>
<DL>
<DD>Used to set the displayHint flag. If this flag is set to true, 
 then the values will be printed  according to the DISPLAY-HINT,
 provided the syntax contains DISPLAY-HINT clause. If the flag is
 set to false or if the DISPLAY-HINT is absent the ascii values 
 are printed.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>flag</CODE> - the boolean value</DL>
</DD>
</DL>
<HR>

<A NAME="isDisplayHintEnabled()"><!-- --></A><H3>
isDisplayHintEnabled</H3>
<PRE>
public boolean <B>isDisplayHintEnabled</B>()</PRE>
<DL>
<DD>Used to know whether the displayHint flag is enabled or not.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>true if the boolean in the method enableDisplayHint(boolean) is set to true.<br>
         false if the boolean is not set, or if the boolean is set to false.</DL>
</DD>
</DL>
<HR>

<A NAME="isDBConnected()"><!-- --></A><H3>
isDBConnected</H3>
<PRE>
public boolean <B>isDBConnected</B>()</PRE>
<DL>
<DD>Used to know whether the Database connection is alive or not.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>true, if the database connection is alive.
         false, otherwise.</DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>

<!-- ========== START OF NAVBAR ========== -->
<A NAME="navbar_bottom"><!-- --></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0">
<TR>
<TD COLSPAN=3 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../../com/adventnet/snmp/mibs/MibNode.html"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../../com/adventnet/snmp/mibs/MibParserConstants.html"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../index.html" TARGET="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="MibOperations.html" TARGET="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;
<SCRIPT>
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
<A HREF="../../../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>
</NOSCRIPT>
</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<!-- =========== END OF NAVBAR =========== -->

<HR>
Copyright (c)AdventNet Inc., 1996-2006
</BODY>
</HTML>
