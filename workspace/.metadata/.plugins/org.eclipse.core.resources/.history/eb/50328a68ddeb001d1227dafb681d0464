<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN""http://www.w3.org/TR/REC-html40/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc on Tue Nov 07 19:59:06 IST 2006 -->
<TITLE>
Logger (AdventNet)
</TITLE>
<LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../stylesheet.css" TITLE="Style">
</HEAD>
<SCRIPT>
function asd()
{
parent.document.title="Logger (AdventNet)";
}
</SCRIPT>
<BODY BGCOLOR="white" onload="asd();">

<!-- ========== START OF NAVBAR ========== -->
<A NAME="navbar_top"><!-- --></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0">
<TR>
<TD COLSPAN=3 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../../com/adventnet/afp/log/LogConfigWriter.html"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../../com/adventnet/afp/log/LogWriter.html"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../index.html" TARGET="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="Logger.html" TARGET="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;
<SCRIPT>
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
<A HREF="../../../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>
</NOSCRIPT>
</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;CONSTR&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;CONSTR&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<!-- =========== END OF NAVBAR =========== -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
<FONT SIZE="-1">
com.adventnet.afp.log</FONT>
<BR>
Interface  Logger</H2>
<DL>
<DT><B>All Known Implementing Classes:</B> <DD><A HREF="../../../../com/adventnet/afp/log/AbstractLogger.html">AbstractLogger</A></DD>
</DL>
<HR>
<DL>
<DT>public interface <B>Logger</B></DL>

<P>
The Logger interface available in the Logging Framework,&nbsp; decides
which messages are to be logged based on the LogLevel specified. It provides various
convenient methods for the Logging mechanism.
It passes the output and error messages to the LogWriter in accordance
with the specified LogLevel.
<p>Through the methods available in Logger, the Logger Properties such as
LogLevel, DisplayName and&nbsp; Class Name can be modified at runtime.
 
 <p></p><p></p>
 
 <table BORDER=0 COLS=1 WIDTH="100%" BGCOLOR="#CBCBFF" >
 <tr>
 <td><b><font size=+2>Writing Your Own Logger</font></b></td>
 </tr>
 </table>
 <p></p><p></p>
 <table BORDER=0 COLS=1 WIDTH="100%" BGCOLOR="#CBCBFF" >
 <tr>
 <td><b>Reference Implementation</b></td>
 </tr>
 </table>
 
 <p>The following code snippet explains how implementation can be given
 for writing your own logger. Keeping this as reference, you may give your
 own implementation. Detailed explanation has been provided alongside the
 code snippet itself for ease of reference.
 <br>&nbsp;
 <table BORDER COLS=1 WIDTH="100%" >
 <tr>
 <td>package test;
 <br>import java.util.*;
 <br>import java.text.*;
 <br>import com.adventnet.afp.log.LogWriter;
 <br>import com.adventnet.afp.log.LoggerProperties;
 <br>import com.adventnet.afp.log.AbstractLogger;
 <p>// <font color="#009900">An example implementation class of the Logger
 interface explaining how you can have your own custom properties and handle
 them in accordance with your needs.</font>
 <p>public class ExampleLogger extends AbstractLogger
 <p>{
 <br>&nbsp;&nbsp;&nbsp; // <font color="#009900">The default properties
 needed for a logger.</font>
 <br>&nbsp;&nbsp;&nbsp; // <font color="#009900">The name by which the logger
 will be identified.</font>
 <br>&nbsp;&nbsp;&nbsp; private String instanceName = null;
 <p>&nbsp;&nbsp;&nbsp; // <font color="#009900">The default logging level
 of the logger.</font>
 <br>&nbsp;&nbsp;&nbsp; private int logLevel = 2;
 <p>&nbsp;&nbsp;&nbsp; // <font color="#009900">The Writer used by the Logger.</font>
 <br>&nbsp;&nbsp;&nbsp; private LogWriter writer = null;
 <p>&nbsp;&nbsp;&nbsp; // <font color="#009900">Some custom properties for
 a Logger (specified in the logging.xml file).</font>
 <br>&nbsp;&nbsp;&nbsp; // <font color="#009900">A custom property specifying
 whether the message will have timestamp.</font>
 <br>&nbsp;&nbsp;&nbsp; private boolean needTimeStamp = false;
 <p>&nbsp;&nbsp;&nbsp; // <font color="#009900">Initializing the various
 parameters of the Logger. All default parameters and the custom properties
 will be set by this method. The respective Writer is mentioned for every
 Logger properties.&nbsp;</font>
 <br>&nbsp;&nbsp;&nbsp; public void init(LoggerProperties loggerProps, LogWriter
 writer)
 <br>&nbsp;&nbsp;&nbsp; {
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.instanceName = loggerProps.getInstanceName();&nbsp;
 // Setting the instanceName
 <br>of the Logger.
 <p>&nbsp;&nbsp;&nbsp;&nbsp; // <font color="#009900">Setting the LogLevel.</font>
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.logLevel = loggerProps.getLogLevel();&nbsp;
 <p>&nbsp;&nbsp;&nbsp; // <font color="#009900">Setting the writer.&nbsp;</font>
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.writer = writer;&nbsp;
 <p>&nbsp;&nbsp; // <font color="#009900">Setting the custom properties</font>
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Boolean tempVal;
 <p>&nbsp;&nbsp; // <font color="#009900">To get the custom property(needTimeStamp).
 If it is true, the message will have a timestamp.</font>
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tempVal = new Boolean((String)
 loggerProps.getCustomProperty("needTimeStamp"));
 <br>if(tempVal!= null)
 <br>{
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.needTimeStamp = tempVal.booleanValue();
 <p>}
 <p>&nbsp;&nbsp;&nbsp; }
 <p>&nbsp;&nbsp;&nbsp; // <font color="#009900">To get the instanceName
 of the Logger.</font>
 <br>&nbsp;&nbsp;&nbsp; public String getLoggerInstanceName()
 <br>&nbsp;&nbsp;&nbsp; {
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return instanceName;
 <br>&nbsp;&nbsp;&nbsp; }
 <p>&nbsp;&nbsp;&nbsp; // <font color="#009900">Method to write the output
 message. The message will be logged only if its level is less than or equal
 to the level of the Logger. The message will have TimeStamp prepended if
 needTimeStamp is true.</font>
 <br>&nbsp;&nbsp; // <font color="#009900">To direct the message to the
 writer&nbsp;</font>
 <br>&nbsp;&nbsp;&nbsp; public void out(String message, int level)
 <p>&nbsp;&nbsp;&nbsp; {
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (level > logLevel)
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return;
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; writer.out(formatMessage(message,
 level));
 <br>&nbsp;&nbsp;&nbsp; }
 <br>&nbsp;
 <p>&nbsp;&nbsp;&nbsp; // <font color="#009900">Method to log an error message.
 The message will be logged only if its level is less than or equal to the
 level of the Logger. The message will have TimeStamp prepended if needTimeStamp
 is true. Since there is no exception trace, it is forwarded to err(string,exception,level)
 with exception as null.</font>
 <p>&nbsp;&nbsp;&nbsp; public void err(String message, int level)
 <p>&nbsp;&nbsp;&nbsp; {
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; err(message, null, level);
 <br>&nbsp;&nbsp;&nbsp; }
 <br>&nbsp;
 <p>&nbsp;&nbsp;&nbsp; // <font color="#009900">To log an error message.
 The message will be logged only if its level is less than or equal to the
 level of the Logger. The message will have TimeStamp prepended if needTimeStamp
 is true.</font>
 <br>&nbsp;&nbsp;&nbsp; // <font color="#009900">The exception trace will
 have no formatting.</font>
 <br>&nbsp;&nbsp;&nbsp; public void err(String message, Throwable excep,
 int level)
 <br>&nbsp;&nbsp;&nbsp; {
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (level > logLevel)
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 return;
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; writer.err(formatMessage(message,
 level), excep);
 <p>&nbsp;&nbsp;&nbsp; }
 <br>&nbsp;
 <p>&nbsp;&nbsp;&nbsp; // <font color="#009900">To set the LogLevel.</font>
 <p>&nbsp;&nbsp;&nbsp; public void setLoggingLevel(int level)
 <p>&nbsp;&nbsp;&nbsp; {
 <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.logLevel = level;
 <p>&nbsp;&nbsp;&nbsp; }
 <br>&nbsp;
 <p>&nbsp;&nbsp;&nbsp; // <font color="#009900">To get the LogLevel.</font>
 <br>&nbsp;&nbsp;&nbsp; public int getLoggingLevel()
 <br>&nbsp;&nbsp;&nbsp; {
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return logLevel;
 <br>&nbsp;&nbsp;&nbsp; }
 <br>&nbsp;
 <p>&nbsp;&nbsp;&nbsp; // <font color="#009900">To format the messages in
 the required format.&nbsp;</font>
 <p>&nbsp;&nbsp;&nbsp; // <font color="#009900">Here, the custom property
 needTimeStamp is used, based on which formatting is done.</font>
 <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public String formatMessage(String
 message, int level)
 <p>&nbsp;&nbsp;&nbsp; {
 <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; StringBuffer str = new StringBuffer();
 <br>&nbsp;
 <p>&nbsp;&nbsp;&nbsp; //<font color="#009900"> If time stamp is needed,
 it can be added to the message.</font>
 <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (needTimeStamp)
 <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SimpleDateFormat
 dateFormat = new SimpleDateFormat("EEE, MMM d, yyyy hh:mm aaa");
 <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; str.append(dateFormat.format(new
 Date()));
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 str.append(": ");
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 <p>&nbsp;&nbsp;&nbsp; // <font color="#009900">To append the InstanceName
 in any format. (In Lowercase in this example).</font>
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; str.append(instanceName.toLowerCase());
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; str.append(": ");
 <p>&nbsp;&nbsp;&nbsp; // <font color="#009900">Finally, append the string
 and return it.</font>
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; str.append(message);
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return str.toString();
 <br>&nbsp;&nbsp;&nbsp; }
 <br>}
 <p>&nbsp;</td>
 </tr>
 </table>
 
 <br>&nbsp;
 <table BORDER=0 COLS=1 WIDTH="100%" BGCOLOR="#CBCBFF" >
 <tr>
 <td><b>Integrating Your Logger</b></td>
 </tr>
 </table>
 
 <p>The above code snippet explained you how to create your own Logger.
 You need to follow the steps given below for integrating it with the Logging
 Mechanism. You can add the Loggers either in the configuration details
 or at Runtime programmatically.
 <p><b>Adding in Configuration details</b>
 <p><b>Step 1</b>
 <p>Write a class implementing the AbstractLogger. You can give your own
 implementation for the methods available in the interface. You may add
 new methods, if need be.
 <p><b>Step 2</b>
 <p>Add a new Logger in the source from where LogConfigReader would read
 the configuration details. In this framework, by default, the LogConfigReader
 reads the details from a file. The tags which you find below, can be added
 to the logging.xml, (as Logger), if you wish to use the default setup.
 This Logger's InstanceName is given as "SERVEROUT". It will be associated
 to the Writer which has the same InstanceName (i.e) SERVEROUT.
 <p>&lt;LOGGER>
 <br>&nbsp;&nbsp;&nbsp; &lt;ClassName>test.ExampleLogger&lt;/ClassName>
 <br>&lt;InstanceName>TestLogger&lt;/InstanceName>
 <br>&lt;WriterInstanceName>SERVEROUT&lt;/WriterInstanceName>
 <br>&lt;LogLevel>3&lt;/LogLevel>
 <br>&lt;Properties>
 <br>&lt;Property>
 <br>&lt;Key>----&lt;/Key>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 //Specify the Custom property key
 <br>&lt;Value>---&lt;/Value>&nbsp; // property value
 <br>&lt;/Property>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 .
 <br>//Enter all the custom properties here.
 <br>&lt;/Properties>
 <br>&lt;/LOGGER>
 <p><b>Step 3</b>
 <p>The following steps are to be followed to implement Logging through
 the Logger created by you
 <p>Get the instances of Configuration reader&nbsp; and Configuration writer.
 <br>Get the instance of the LogFactory and initialize it.
 <br>Get the Logger( added by you) .
 <p><b>Creating Your Logger at Runtime</b>
 <p><b>Step 1</b>
 <ul>
 <li>
 Write a class implementing the AbstractLogger. You can give your own implementation
 for the methods available in the interface. You may add new methods, if
 need be.</li>
 </ul>
 <b>Step 2</b>
 <ul>
 <li>
 Get the Properties of your&nbsp; Logger</li>
 </ul>
 
 <ul>
 <li>
 Get the instance of LoggerProperties by passing the Logger's InstanceName
 and WriterInstanceName as arguments.</li>
 </ul>
 
 <ul>
 <li>
 Set the Class name of the Logger which will be the class name of your own
 Logger Implementation.</li>
 </ul>
 
 <ul>
 <li>
 Set the LogLevel for your Logger.</li>
 </ul>
 
 <ul>
 <li>
 Add custom properties, if any.</li>
 </ul>
 <b>Step 3</b>
 <ul>
 <li>
 Create the Logger using the methods in LogFactory.</li>
 </ul>
 <b>Step 4</b>
 <ul>
 <li>
 Get the Logger and do further Logging.</li>
 </ul>
<P>

<P>
<HR>

<P>
<!-- ======== NESTED CLASS SUMMARY ======== -->


<!-- =========== FIELD SUMMARY =========== -->


<!-- ======== CONSTRUCTOR SUMMARY ======== -->


<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Method Summary</B></FONT></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/afp/log/Logger.html#addPropertyChangeListener(java.beans.PropertyChangeListener)">addPropertyChangeListener</A></B>(java.beans.PropertyChangeListener&nbsp;listener)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method is used to add the PropertyChangeListener to the Logger instance.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/afp/log/Logger.html#err(java.lang.String, int)">err</A></B>(java.lang.String&nbsp;message,
    int&nbsp;level)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The <code>err</code> method is used to display error messages.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/afp/log/Logger.html#err(java.lang.String, java.lang.Throwable, int)">err</A></B>(java.lang.String&nbsp;message,
    java.lang.Throwable&nbsp;exception,
    int&nbsp;level)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The <code>err</code> method is used to display error messages.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/afp/log/Logger.html#getInstanceName()">getInstanceName</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The <code>getLoggerInstanceName</code> method is used to get the LoggerInstanceName of the Logger.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/afp/log/Logger.html#getLogLevel()">getLogLevel</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The <code>getLogLevel</code> method is used to get the current LogLevel of the particular
 Logger.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/afp/log/Logger.html#init(com.adventnet.afp.log.LoggerProperties, com.adventnet.afp.log.LogWriter)">init</A></B>(<A HREF="../../../../com/adventnet/afp/log/LoggerProperties.html">LoggerProperties</A>&nbsp;loggerProperties,
     <A HREF="../../../../com/adventnet/afp/log/LogWriter.html">LogWriter</A>&nbsp;logWriter)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The <code>init</code> method is used to initialize a Logger.The properties of the
 Logger and the LogWriter are passed to this method.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/afp/log/Logger.html#out(java.lang.String, int)">out</A></B>(java.lang.String&nbsp;message,
    int&nbsp;level)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The <code>out</code> method is used to display some output messages or debugging messages.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/afp/log/Logger.html#removePropertyChangeListener(java.beans.PropertyChangeListener)">removePropertyChangeListener</A></B>(java.beans.PropertyChangeListener&nbsp;listener)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method is used to remove the PropertyChangeListener from the Logger instance.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/afp/log/Logger.html#setLogLevel(int)">setLogLevel</A></B>(int&nbsp;level)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The <code>setLogLevel</code> method is used to set the LogLevel of a Logger at runtime.</TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ============ FIELD DETAIL =========== -->


<!-- ========= CONSTRUCTOR DETAIL ======== -->


<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=1><FONT SIZE="+2">
<B>Method Detail</B></FONT></TD>
</TR>
</TABLE>

<A NAME="init(com.adventnet.afp.log.LoggerProperties, com.adventnet.afp.log.LogWriter)"><!-- --></A><H3>
init</H3>
<PRE>
public void <B>init</B>(<A HREF="../../../../com/adventnet/afp/log/LoggerProperties.html">LoggerProperties</A>&nbsp;loggerProperties,
                 <A HREF="../../../../com/adventnet/afp/log/LogWriter.html">LogWriter</A>&nbsp;logWriter)
          throws <A HREF="../../../../com/adventnet/afp/log/LogException.html">LogException</A></PRE>
<DL>
<DD>The <code>init</code> method is used to initialize a Logger.The properties of the
 Logger and the LogWriter are passed to this method. The Logger properties include
 Logging level, Log Instance name , Display name and Log Class name
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>loggerProperties</CODE> - a <code>LoggerProperties</code> having the properties of the Logger<DD><CODE>logWriter</CODE> - a <code>LogWriter</code> value
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../com/adventnet/afp/log/LogException.html">LogException</A></CODE> - if an error occurs during initialization</DL>
</DD>
</DL>
<HR>

<A NAME="out(java.lang.String, int)"><!-- --></A><H3>
out</H3>
<PRE>
public void <B>out</B>(java.lang.String&nbsp;message,
                int&nbsp;level)</PRE>
<DL>
<DD>The <code>out</code> method is used to display some output messages or debugging messages.
 The message will be logged if and only if the
 message's logging level is less than or equal to the logging level of the Logger specified in the
 LoggerProperties  if the logging level is not set at runtime.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>message</CODE> - a <code>String</code> having the message that has to be logged<DD><CODE>level</CODE> - an <code>int</code> specifying the level of the log message</DL>
</DD>
</DL>
<HR>

<A NAME="err(java.lang.String, int)"><!-- --></A><H3>
err</H3>
<PRE>
public void <B>err</B>(java.lang.String&nbsp;message,
                int&nbsp;level)</PRE>
<DL>
<DD>The <code>err</code> method is used to display error messages. The message will be logged only
 when the  message's logging level is less than or equal to the logging level of the Logger mentioned
 in the Logger Properties  if the level is not set at runtime.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>message</CODE> - a <code>String</code> value<DD><CODE>level</CODE> - an <code>int</code> value</DL>
</DD>
</DL>
<HR>

<A NAME="err(java.lang.String, java.lang.Throwable, int)"><!-- --></A><H3>
err</H3>
<PRE>
public void <B>err</B>(java.lang.String&nbsp;message,
                java.lang.Throwable&nbsp;exception,
                int&nbsp;level)</PRE>
<DL>
<DD>The <code>err</code> method is used to display error messages. The message and the exception
 will be logged if and only if the logging for that Logger is enabled and the message's logging
 level is less than or equal to the logging level of the Logger mentioned in the Logger Properties
  if the level is not set at runtime. The stack trace is passed along
 with the error messages.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>message</CODE> - a <code>String</code> value<DD><CODE>exception</CODE> - a <code>Throwable</code> value<DD><CODE>level</CODE> - an <code>int</code> value</DL>
</DD>
</DL>
<HR>

<A NAME="setLogLevel(int)"><!-- --></A><H3>
setLogLevel</H3>
<PRE>
public void <B>setLogLevel</B>(int&nbsp;level)</PRE>
<DL>
<DD>The <code>setLogLevel</code> method is used to set the LogLevel of a Logger at runtime.
 If this method is not invoked at runtime, the logging level is taken from the Logger properties
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>level</CODE> - an <code>int</code> value specifying the new LogLevel.</DL>
</DD>
</DL>
<HR>

<A NAME="getLogLevel()"><!-- --></A><H3>
getLogLevel</H3>
<PRE>
public int <B>getLogLevel</B>()</PRE>
<DL>
<DD>The <code>getLogLevel</code> method is used to get the current LogLevel of the particular
 Logger. If the <code>setLogLevel</code> is not invoked at runtime, then logging level is
 obtained from the Logger properties. If the method  is  invoked , then the
 level which is set using the method <code>setLogLevel</code>is retreived .
<P>
<DD><DL>

<DT><B>Returns:</B><DD>an <code>int</code> value denoting the current LogLevel.</DL>
</DD>
</DL>
<HR>

<A NAME="getInstanceName()"><!-- --></A><H3>
getInstanceName</H3>
<PRE>
public java.lang.String <B>getInstanceName</B>()</PRE>
<DL>
<DD>The <code>getLoggerInstanceName</code> method is used to get the LoggerInstanceName of the Logger.
 The key name for the Logger for example MISCOUT,MISCERR etc will be retreived from this method.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>a <code>String</code> value</DL>
</DD>
</DL>
<HR>

<A NAME="addPropertyChangeListener(java.beans.PropertyChangeListener)"><!-- --></A><H3>
addPropertyChangeListener</H3>
<PRE>
public void <B>addPropertyChangeListener</B>(java.beans.PropertyChangeListener&nbsp;listener)</PRE>
<DL>
<DD>This method is used to add the PropertyChangeListener to the Logger instance. Upon any  change in any
 property in this
implementation all registered property change listeners  will be notified about it.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>listener</CODE> - PropertyChangeListener to listen for any property change in this Logger</DL>
</DD>
</DL>
<HR>

<A NAME="removePropertyChangeListener(java.beans.PropertyChangeListener)"><!-- --></A><H3>
removePropertyChangeListener</H3>
<PRE>
public boolean <B>removePropertyChangeListener</B>(java.beans.PropertyChangeListener&nbsp;listener)</PRE>
<DL>
<DD>This method is used to remove the PropertyChangeListener from the Logger instance.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>listener</CODE> - PropertyChangeListener which was added to the listener
<DT><B>Returns:</B><DD>boolean true on successful removal , false if the listener is not present</DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>

<!-- ========== START OF NAVBAR ========== -->
<A NAME="navbar_bottom"><!-- --></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0">
<TR>
<TD COLSPAN=3 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../../com/adventnet/afp/log/LogConfigWriter.html"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../../com/adventnet/afp/log/LogWriter.html"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../index.html" TARGET="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="Logger.html" TARGET="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;
<SCRIPT>
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
<A HREF="../../../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>
</NOSCRIPT>
</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;CONSTR&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;CONSTR&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<!-- =========== END OF NAVBAR =========== -->

<HR>
Copyright (c)AdventNet Inc., 1996-2006
</BODY>
</HTML>
