<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN""http://www.w3.org/TR/REC-html40/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc on Tue Nov 07 19:59:01 IST 2006 -->
<TITLE>
Deprecated List (AdventNet)
</TITLE>
<LINK REL ="stylesheet" TYPE="text/css" HREF="stylesheet.css" TITLE="Style">
</HEAD>
<SCRIPT>
function asd()
{
parent.document.title="Deprecated List (AdventNet)";
}
</SCRIPT>
<BODY BGCOLOR="white" onload="asd();">

<!-- ========== START OF NAVBAR ========== -->
<A NAME="navbar_top"><!-- --></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0">
<TR>
<TD COLSPAN=3 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <FONT CLASS="NavBarFont1">Package</FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <FONT CLASS="NavBarFont1">Class</FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="overview-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Deprecated</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;PREV&nbsp;
&nbsp;NEXT</FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="index.html" TARGET="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="deprecated-list.html" TARGET="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;
<SCRIPT>
  <!--
  if(window==top) {
    document.writeln('<A HREF="allclasses-noframe.html" TARGET=""><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
<A HREF="allclasses-noframe.html" TARGET=""><B>All Classes</B></A>
</NOSCRIPT>
</FONT></TD>
</TR>
</TABLE>
<!-- =========== END OF NAVBAR =========== -->

<HR>
<CENTER>
<H2>
<B>Deprecated API</B></H2>
</CENTER>

<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Deprecated Classes</B></FONT></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/mibs/MibModuleCompliance.html">com.adventnet.snmp.mibs.MibModuleCompliance</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>This class incorrectly assumes that the ModuleCompliance 
             construct can have only one Module. Instead, the classes
             ModuleCompliance and ModuleComplianceModule can be used.</I>&nbsp;</TD>
</TR>
</TABLE>
&nbsp;
<P>

<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Deprecated Fields</B></FONT></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/snmp2/SnmpAPI.html#BITSTRING">com.adventnet.snmp.snmp2.SnmpAPI.BITSTRING</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>This variable has been deprecated in SNMPv2 protocol.</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/snmp2/SnmpSession.html#IP">com.adventnet.snmp.snmp2.SnmpSession.IP</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Since all the SNMP communications go through
 a single transport provider, this is not needed.</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/snmp2/SnmpAPI.html#NSAP">com.adventnet.snmp.snmp2.SnmpAPI.NSAP</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>This variable has been deprecated in SNMPv2 protocol</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/snmp2/SnmpAPI.html#Standard_Prefix">com.adventnet.snmp.snmp2.SnmpAPI.Standard_Prefix</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>instead use the setOIDPrefix(SnmpOID oid) and getOIDPrefix()
 methods.</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/snmp2/SnmpSession.html#TRANSPORT_PROVIDER">com.adventnet.snmp.snmp2.SnmpSession.TRANSPORT_PROVIDER</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Since all the SNMP communications go through
 a single transport provider, this is not needed.</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/snmp2/SnmpAPI.html#UINTEGER32">com.adventnet.snmp.snmp2.SnmpAPI.UINTEGER32</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>This variable has been deprecated in SNMP protocol.</I>&nbsp;</TD>
</TR>
</TABLE>
&nbsp;
<P>

<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Deprecated Methods</B></FONT></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/beans/SnmpTrapReceiver.html#cleanup()">com.adventnet.snmp.beans.SnmpTrapReceiver.cleanup()</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Replaced by stop() method.</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/snmp2/SnmpEngineEntry.html#discoverEngineID(com.adventnet.snmp.snmp2.SnmpSession)">com.adventnet.snmp.snmp2.SnmpEngineEntry.discoverEngineID(SnmpSession)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>This method doesn't throw any Exception and hence
  doesn't inform the user, in case of any error. 
  As of AdventNet SNMP API 4 SP2 ( Release 4.0.2 ),  replaced by 
  <A HREF="com/adventnet/snmp/snmp2/SnmpEngineEntry.html#discoverSnmpEngineID(com.adventnet.snmp.snmp2.SnmpSession)"><CODE>SnmpEngineEntry.discoverSnmpEngineID(SnmpSession)</CODE></A></I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/snmp2/SnmpSession.html#get(com.adventnet.snmp.snmp2.SnmpOID)">com.adventnet.snmp.snmp2.SnmpSession.get(SnmpOID)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>use the following instead
 <p>
 <i>
 SnmpPDU pdu = new SnmpPDU();
 <br>
 pdu.addNull(oid);
 <br>
 pdu.setCommand(SnmpAPI.GET_REQ_MSG);
 <br>
 SnmpPDU response_pdu = snmpSession.syncSend(pdu);
 <br>
 <br>
 SnmpVar var = null;
 <br>
 if(response_pdu != null)
 <br>
 {
 <br>
 		var = response_pdu.getVariable(0);
 <br>
 }
 <br>
 </i></I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/snmp2/SnmpSession.html#get(java.lang.String)">com.adventnet.snmp.snmp2.SnmpSession.get(String)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>use the following instead
 <p>
 <i>
 SnmpPDU pdu = new SnmpPDU();
 <br>
 pdu.addNull(new SnmpOID(oidString));
 <br>
 pdu.setCommand(SnmpAPI.GET_REQ_MSG);
 <br>
 SnmpPDU response_pdu = snmpSession.syncSend(pdu);
 <br>
 <br>
 SnmpVar var = null;
 <br>
 if(response_pdu != null)
 <br>
 {
 <br>
 		var = response_pdu.getVariable(0);
 <br>
 }
 <br>
 </i></I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/mibs/AgentCapabilitiesModule.html#getAccess()">com.adventnet.snmp.mibs.AgentCapabilitiesModule.getAccess()</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Since 3.0. Instead you can use getAccess() in ACVariation class.</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/snmp2/SnmpPDU.html#getAddress()">com.adventnet.snmp.snmp2.SnmpPDU.getAddress()</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>use the following instead.
 <i>
 <p>
 UDPProtocolOptions opt = (UDPProtocolOptions)SnmpPDU.getProtocolOptions();
 <br>
 InetAddress address = opt.getRemoteAddress();
 </i></I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/mibs/MibModule.html#getAgentCapabilities()">com.adventnet.snmp.mibs.MibModule.getAgentCapabilities()</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>since 4.0. Instead you can use the method getDefinedAgentCapabilities</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/beans/SnmpRequestServer.html#getAttemptPartial()">com.adventnet.snmp.beans.SnmpRequestServer.getAttemptPartial()</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>SnmpRequestServer cannot get the partial data. It is
 specifically for SnmpTarget bean which does synchronous comm..</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/snmp2/SnmpAPI.html#getCommunityTable()">com.adventnet.snmp.snmp2.SnmpAPI.getCommunityTable()</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>use the following instead
 <br>
 getSecurityProvider().getTable(1); // where 1 stands for v1 security model.</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/beans/SnmpTrapReceiver.html#getcontextID()">com.adventnet.snmp.beans.SnmpTrapReceiver.getcontextID()</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Replaced with getContextID()</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/mibs/AgentCapabilitiesModule.html#getCreationRequires()">com.adventnet.snmp.mibs.AgentCapabilitiesModule.getCreationRequires()</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Since 3.0. Instead you can use getCreationObjects() in ACVariation class.</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/mibs/AgentCapabilitiesModule.html#getDefval()">com.adventnet.snmp.mibs.AgentCapabilitiesModule.getDefval()</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Since 3.0. Instead you can use getDefVal() in ACVariation class.</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/mibs/MibModule.html#getFilename()">com.adventnet.snmp.mibs.MibModule.getFilename()</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>since 2.1 . Instead you can use the method getFileName()</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/snmp2/SnmpSession.html#getLocalAddresses()">com.adventnet.snmp.snmp2.SnmpSession.getLocalAddresses()</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>use the following instead.
 <br>
 <i>
 UDPProtocolOptions opt = (UDPProtocolOptions)snmpSession.getProtocolOptions();
 <br>
 String[] local_address = opt.getLocalAddresses();
 </i></I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/snmp2/SnmpSession.html#getLocalPort()">com.adventnet.snmp.snmp2.SnmpSession.getLocalPort()</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>use the following instead.
 <p>
 <i>
 UDPProtocolOptions opt = (UDPProtocolOptions)snmpSession.getProtocolOptions();
 <br>
 int local_port = opt.getLocalPort();
 </i></I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/snmp2/SnmpSession.html#getnext(com.adventnet.snmp.snmp2.SnmpOID)">com.adventnet.snmp.snmp2.SnmpSession.getnext(SnmpOID)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>use the following instead
 <p>
 <i>
 SnmpPDU pdu = new SnmpPDU();
 <br>
 pdu.addNull(oid);
 <br>
 pdu.setCommand(SnmpAPI.GETNEXT_REQ_MSG);
 <br>
 SnmpPDU response_pdu = snmpSession.syncSend(pdu);
 <br>
 <br>
 SnmpVar var = null;
 <br>
 if(response_pdu != null)
 <br>
 {
 <br>
 		var = response_pdu.getVariable(0);
 <br>
 }
 <br>
 </i></I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/snmp2/SnmpSession.html#getnext(java.lang.String)">com.adventnet.snmp.snmp2.SnmpSession.getnext(String)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>use the following instead
 <p>
 <i>
 SnmpPDU pdu = new SnmpPDU();
 <br>
 pdu.addNull(new SnmpOID(oidString));
 <br>
 pdu.setCommand(SnmpAPI.GETNEXT_REQ_MSG);
 <br>
 SnmpPDU response_pdu = snmpSession.syncSend(pdu);
 <br>
 <br>
 SnmpVar var = null;
 <br>
 if(response_pdu != null)
 <br>
 {
 <br>
 		var = response_pdu.getVariable(0);
 <br>
 }
 <br>
 </i></I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/mibs/MibNode.html#getObjectNames()">com.adventnet.snmp.mibs.MibNode.getObjectNames()</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>use the getObjects method instead.</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/beans/SnmpServer.html#getOverwriteCMI()">com.adventnet.snmp.beans.SnmpServer.getOverwriteCMI()</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Instead use isOverwriteCMI() method.</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/mibs/MibOperations.html#getOverwriteCMI()">com.adventnet.snmp.mibs.MibOperations.getOverwriteCMI()</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>since 4.0, replaced by <A HREF="com/adventnet/snmp/mibs/MibOperations.html#isOverwriteCMI()"><CODE>MibOperations.isOverwriteCMI()</CODE></A></I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/snmp2/SnmpSession.html#getPeername()">com.adventnet.snmp.snmp2.SnmpSession.getPeername()</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>use the following instead.
 <i>
 <br>
 UDPProtocolOptions opt = (UDPProtocolOptions)snmpSession.getProtocolOptions();
 opt.getRemoteHost();
 </i></I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/snmp2/SnmpSession.html#getProtocol()">com.adventnet.snmp.snmp2.SnmpSession.getProtocol()</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>since all SNMP communications go through only
 a transportProvider, this method is not at all necessary.</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/snmp2/SnmpSession.html#getReceiveBufferSize()">com.adventnet.snmp.snmp2.SnmpSession.getReceiveBufferSize()</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>instead use the getReceiveBufferSize method
 available in UDPProtocolOptions.</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/snmp2/SnmpPDU.html#getRemoteHost()">com.adventnet.snmp.snmp2.SnmpPDU.getRemoteHost()</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>use the following instead.
 <i>
 <p>
 UDPProtocolOptions opt = (UDPProtocolOptions)SnmpPDU.getProtocolOptions();
 <br>
 String remoteHost = opt.getRemoteHost();
 </i></I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/snmp2/SnmpSession.html#getRemotePort()">com.adventnet.snmp.snmp2.SnmpSession.getRemotePort()</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>use the following instead.
 <i>
 <p>
 UDPProtocolOptions opt = (UDPProtocolOptions)snmpSession.getProtocolOptions();
 <br>
 opt.getRemotePort();
 </i></I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/snmp2/SnmpPDU.html#getRemotePort()">com.adventnet.snmp.snmp2.SnmpPDU.getRemotePort()</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>use the following instead.
 <i>
 <p>
 UDPProtocolOptions opt = (UDPProtocolOptions)SnmpPDU.getProtocolOptions();
 <br>
 int remotePort = opt.getRemotePort();
 </i></I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/mibs/MibNode.html#getRevdescription()">com.adventnet.snmp.mibs.MibNode.getRevdescription()</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>since 4.0. Instead you can use the method getRevisionDescriptions()</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/mibs/MibNode.html#getRevision()">com.adventnet.snmp.mibs.MibNode.getRevision()</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>since 4.0. Instead you can use the method getRevisions()</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/snmp2/SnmpSession.html#getSASClient()">com.adventnet.snmp.snmp2.SnmpSession.getSASClient()</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>use the following instead
 <br>
 <i>
 SASProtocolOptions opt = (SASProtocolOptions)snmpSession.getProtocolOptions();
 <br>
 SASClient sasclient = opt.getSASClient();
 </i></I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/snmp2/SnmpSession.html#getSASProtocol()">com.adventnet.snmp.snmp2.SnmpSession.getSASProtocol()</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>use the following instead.
 <p>
 <i>
 SASProtocolOptions opt = (SASProtocolOptions)snmpSession.getProtocolOptions();
 <br>
 int sasprotocol = opt.getProtocol();
 </i></I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/snmp2/SnmpSession.html#getSnmpClientsSize()">com.adventnet.snmp.snmp2.SnmpSession.getSnmpClientsSize()</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>use the following instead
 <p>
 <i>
 int snmpClientsSize = (snmpSession.getSnmpClients()).size();
 </i></I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/snmp2/SnmpSession.html#getStartLocalPort()">com.adventnet.snmp.snmp2.SnmpSession.getStartLocalPort()</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>now the "open(Applet)" method will throw an 
 SnmpException if it is unable to connect to the SAServer. When such
 an exception is received, the user should decide whether "open(void)"
 method should be called or not.</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/mibs/MibNode.html#getSubid()">com.adventnet.snmp.mibs.MibNode.getSubid()</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>since 4.0. Instead you can use the method getSubID()</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/mibs/AgentCapabilitiesModule.html#getSyntax()">com.adventnet.snmp.mibs.AgentCapabilitiesModule.getSyntax()</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Since 3.0. Instead you can use getSyntax() in ACVariation class</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/mibs/MibOperations.html#getThrowFileNotFound()">com.adventnet.snmp.mibs.MibOperations.getThrowFileNotFound()</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I></I>&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/snmp2/SnmpAPI.html#getUSMTable()">com.adventnet.snmp.snmp2.SnmpAPI.getUSMTable()</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>use the following instead.
 <pre> SnmpApi.getSecurityProvider().getTable(USM_SECURITY_MODEL); // where USM_SECURITY_MODEL = 3</pre></I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/mibs/AgentCapabilitiesModule.html#getVariation()">com.adventnet.snmp.mibs.AgentCapabilitiesModule.getVariation()</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Since 3.0</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/mibs/AgentCapabilitiesModule.html#getVariationDescription()">com.adventnet.snmp.mibs.AgentCapabilitiesModule.getVariationDescription()</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Since 3.0. Instead you can use getDescription() in ACVariation class.</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/mibs/AgentCapabilitiesModule.html#getWriteSyntax()">com.adventnet.snmp.mibs.AgentCapabilitiesModule.getWriteSyntax()</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Since 3.0. Instead you can use getWriteSyntax() in ACVariation class.</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/snmp2/usm/USMUtils.html#init_v3_params(java.lang.String, int, java.lang.String, java.lang.String, java.lang.String, int, com.adventnet.snmp.snmp2.SnmpSession)">com.adventnet.snmp.snmp2.usm.USMUtils.init_v3_params(String, int, String, String, String, int, SnmpSession)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>This method doesn't throw any Exception and hence 
 doesn't inform the user, in case of any error.  
 As of AdventNet SNMP API 4 SP2 ( Release 4.0.2 ), replaced by 
 <A HREF="com/adventnet/snmp/snmp2/usm/USMUtils.html#init_v3_parameters(java.lang.String, int, java.lang.String, java.lang.String, java.lang.String, int, com.adventnet.snmp.snmp2.SnmpSession)"><CODE>USMUtils.init_v3_parameters(String,int,String,String,String,int,SnmpSession)</CODE></A></I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/snmp2/usm/USMUtils.html#init_v3_params(java.lang.String, int, java.lang.String, java.lang.String, java.lang.String, com.adventnet.snmp.snmp2.SnmpSession)">com.adventnet.snmp.snmp2.usm.USMUtils.init_v3_params(String, int, String, String, String, SnmpSession)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>This method doesn't throw any Exception and hence 
 doesn't inform the user, in case of any error. 
 As of AdventNet SNMP API 4 SP2 ( Release 4.0.2 ), replaced by 
 <A HREF="com/adventnet/snmp/snmp2/usm/USMUtils.html#init_v3_parameters(java.lang.String, int, java.lang.String, java.lang.String, java.lang.String, com.adventnet.snmp.snmp2.SnmpSession)"><CODE>USMUtils.init_v3_parameters(String,int,String,String,String,SnmpSession)</CODE></A></I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/snmp2/SnmpSession.html#open(java.applet.Applet)">com.adventnet.snmp.snmp2.SnmpSession.open(Applet)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>use the following instead
 <p>
 <i>
 SnmpAPI api = new SnmpAPI();
 <br>
 SnmpSession ses = new SnmpSession(api);
 <br>
 SASProtocolOptions opt = new SASProtocolOptions();
 <br>
 opt.setApplet(applet);
 <br>
 ses.setProtocolOptions(opt);
 <br>
 ses.open();
 </i></I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/snmp2/SnmpSession.html#set(com.adventnet.snmp.snmp2.SnmpOID, com.adventnet.snmp.snmp2.SnmpVar)">com.adventnet.snmp.snmp2.SnmpSession.set(SnmpOID, SnmpVar)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>use the following instead
 <p>
 <i>
 SnmpPDU pdu = new SnmpPDU();
 <br>
 SnmpVarBind varbind = new SnmpVarBind(oid, var);
 <br>
 pdu.addVariableBinding(varbind);
 <br>
 pdu.setCommand(SnmpAPI.SET_REQ_MSG);
 <br>
 SnmpPDU response_pdu = snmpSession.syncSend(pdu);
 <br>
 <br>
 SnmpVar response_var = null;
 <br>
 if(response_pdu != null)
 <br>
 {
 <br>
 		response_var = response_pdu.getVariable(0);
 <br>
 }
 <br>
 </i></I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/snmp2/SnmpSession.html#set(java.lang.String, java.lang.String, byte)">com.adventnet.snmp.snmp2.SnmpSession.set(String, String, byte)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>use the following instead
 <p>
 <i>
 SnmpPDU pdu = new SnmpPDU();
 <br>
 SnmpVar variable = SnmpVar.createVariable(setString, type);
 <br>
 SnmpOID oid = new SnmpOID(oidString);
 <br>
 SnmpVarBind varbind = new SnmpVarBind(oid, variable);
 <br>
 pdu.addVariableBinding(varbind);
 <br>
 pdu.setCommand(SnmpAPI.SET_REQ_MSG);
 <br>
 SnmpPDU response_pdu = snmpSession.syncSend(pdu);
 <br>
 <br>
 SnmpVar var = null;
 <br>
 if(response_pdu != null)
 <br>
 {
 <br>
 		var = response_pdu.getVariable(0);
 <br>
 }
 <br>
 </i></I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/snmp2/SnmpPDU.html#setAddress(java.net.InetAddress)">com.adventnet.snmp.snmp2.SnmpPDU.setAddress(InetAddress)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>use the following instead.
 <i>
 <p>
 UDPProtocolOptions opt = (UDPProtocolOptions)SnmpPDU.getProtocolOptions();
 <br>
 opt.setRemoteAddress(address);
 </i></I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/beans/SnmpRequestServer.html#setAttemptPartial(boolean)">com.adventnet.snmp.beans.SnmpRequestServer.setAttemptPartial(boolean)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>SnmpRequestServer cannot get partial data by enabling the
 flag. It is specific for SnmpTarget bean which does synchronous comm..</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/beans/SnmpTrapReceiver.html#setcontextID(byte[])">com.adventnet.snmp.beans.SnmpTrapReceiver.setcontextID(byte[])</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Replaced with setContextID(byte[] ctxtID)</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/snmp2/SnmpPDU.html#setDNSLookup(boolean)">com.adventnet.snmp.snmp2.SnmpPDU.setDNSLookup(boolean)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>since no lookup will be done unnecessarily.</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/snmp2/SnmpSession.html#setLocalAddresses(java.lang.String[])">com.adventnet.snmp.snmp2.SnmpSession.setLocalAddresses(String[])</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>use the following instead.
 <br>
 <i>
 UDPProtocolOptions opt = (UDPProtocolOptions)snmpSession.getProtocolOptions();
 opt.setLocalAddresses(local_addrs);
 </i></I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/snmp2/SnmpSession.html#setLocalPort(int)">com.adventnet.snmp.snmp2.SnmpSession.setLocalPort(int)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>use the following instead.
 <p>
 <i>
 UDPProtocolOptions opt = (UDPProtocolOptions)snmpSession.getProtocolOptions();
 <br>
 opt.setLocalPort(local_port);
 </i></I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/snmp2/SnmpSession.html#setPeername(java.lang.String)">com.adventnet.snmp.snmp2.SnmpSession.setPeername(String)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>use the following instead.
 <i>
 <br>
 UDPProtocolOptions opt = (UDPProtocolOptions)snmpSession.getProtocolOptions();
 opt.setRemoteHost(peername);
 </i></I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/snmp2/SnmpSession.html#setProtocol(int)">com.adventnet.snmp.snmp2.SnmpSession.setProtocol(int)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Since all the SNMP communications go through
 a single transport provider, this is not needed.</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/snmp2/SnmpSession.html#setReceiveBufferSize(int)">com.adventnet.snmp.snmp2.SnmpSession.setReceiveBufferSize(int)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>instead use the setReceiveBufferSize method
 available in UDPProtocolOptions.</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/snmp2/SnmpPDU.html#setRemoteHost(java.lang.String)">com.adventnet.snmp.snmp2.SnmpPDU.setRemoteHost(String)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>use the following instead.
 <i>
 <p>
 UDPProtocolOptions opt = (UDPProtocolOptions)SnmpPDU.getProtocolOptions();
 <br>
 opt.setRemoteHost(host);
 </i></I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/snmp2/SnmpSession.html#setRemotePort(int)">com.adventnet.snmp.snmp2.SnmpSession.setRemotePort(int)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>use the following instead.
 <i>
 <p>
 UDPProtocolOptions opt = (UDPProtocolOptions)snmpSession.getProtocolOptions();
 <br>
 opt.setRemotePort(port);
 </i></I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/snmp2/SnmpPDU.html#setRemotePort(int)">com.adventnet.snmp.snmp2.SnmpPDU.setRemotePort(int)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>use the following instead.
 <i>
 <p>
 UDPProtocolOptions opt = (UDPProtocolOptions)SnmpPDU.getProtocolOptions();
 <br>
 opt.setRemotePort(port);
 </i></I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/snmp2/SnmpSession.html#setSASProtocol(int)">com.adventnet.snmp.snmp2.SnmpSession.setSASProtocol(int)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>use the following instead.
 <p>
 <i>
 SASProtocolOptions opt = new SASProtocolOptions();
 <br>
 opt.setApplet(applet);
 <br>
 opt.setProtocol(SASClient.TCP_PROTOCOL); //or SASClient.HTTP_PROTOCOL
 <br>
 snmpSession.setProtocolOptions(opt);
 <br>
 snmpSession.open();
 </i></I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/snmp2/SnmpSession.html#setSocketParms(int, int)">com.adventnet.snmp.snmp2.SnmpSession.setSocketParms(int, int)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>since a new transportProvider implementation for
 udp has been added, this method no longer becomes necessary.</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/snmp2/SnmpSession.html#setStartLocalPort(int)">com.adventnet.snmp.snmp2.SnmpSession.setStartLocalPort(int)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>now the "open(Applet)" method will throw an 
 SnmpException if it is unable to connect to the SAServer. When such
 an exception is received, the user should decide whether "open(void)"
 method should be called or not.</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/mibs/MibOperations.html#setThrowFileNotFound(boolean)">com.adventnet.snmp.mibs.MibOperations.setThrowFileNotFound(boolean)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I></I>&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/snmp2/SnmpAPI.html#setupStdOutErr()">com.adventnet.snmp.snmp2.SnmpAPI.setupStdOutErr()</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>please use the logging framework instead.</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/snmp2/SnmpAPI.html#setupStdOutErr(java.lang.String)">com.adventnet.snmp.snmp2.SnmpAPI.setupStdOutErr(String)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>please use the logging framework instead.</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="com/adventnet/snmp/snmp2/usm/USMUserEntry.html#timeSync(com.adventnet.snmp.snmp2.SnmpSession)">com.adventnet.snmp.snmp2.usm.USMUserEntry.timeSync(SnmpSession)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>This method does not throw any exception and hence does not
 inform the user, in case of any error. 
 As of AdventNet SNMP API 4 SP2 ( Release 4.0.2 ), replaced by 
 <A HREF="com/adventnet/snmp/snmp2/usm/USMUserEntry.html#timeSynchronize(com.adventnet.snmp.snmp2.SnmpSession, com.adventnet.snmp.snmp2.ProtocolOptions)"><CODE>USMUserEntry.timeSynchronize(SnmpSession,ProtocolOptions)</CODE></A></I>&nbsp;</TD>
</TR>
</TABLE>
&nbsp;
<P>
<HR>

<!-- ========== START OF NAVBAR ========== -->
<A NAME="navbar_bottom"><!-- --></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0">
<TR>
<TD COLSPAN=3 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <FONT CLASS="NavBarFont1">Package</FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <FONT CLASS="NavBarFont1">Class</FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="overview-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Deprecated</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;PREV&nbsp;
&nbsp;NEXT</FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="index.html" TARGET="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="deprecated-list.html" TARGET="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;
<SCRIPT>
  <!--
  if(window==top) {
    document.writeln('<A HREF="allclasses-noframe.html" TARGET=""><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
<A HREF="allclasses-noframe.html" TARGET=""><B>All Classes</B></A>
</NOSCRIPT>
</FONT></TD>
</TR>
</TABLE>
<!-- =========== END OF NAVBAR =========== -->

<HR>
Copyright (c)AdventNet Inc., 1996-2006
</BODY>
</HTML>
