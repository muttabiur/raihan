<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN""http://www.w3.org/TR/REC-html40/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc on Tue Nov 07 19:59:06 IST 2006 -->
<TITLE>
LogFactory (AdventNet)
</TITLE>
<LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../stylesheet.css" TITLE="Style">
</HEAD>
<SCRIPT>
function asd()
{
parent.document.title="LogFactory (AdventNet)";
}
</SCRIPT>
<BODY BGCOLOR="white" onload="asd();">

<!-- ========== START OF NAVBAR ========== -->
<A NAME="navbar_top"><!-- --></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0">
<TR>
<TD COLSPAN=3 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../../com/adventnet/afp/log/LogConfigFileWriter.html"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../../com/adventnet/afp/log/LoggerImpl.html"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../index.html" TARGET="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="LogFactory.html" TARGET="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;
<SCRIPT>
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
<A HREF="../../../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>
</NOSCRIPT>
</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;CONSTR&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;CONSTR&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<!-- =========== END OF NAVBAR =========== -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
<FONT SIZE="-1">
com.adventnet.afp.log</FONT>
<BR>
Class  LogFactory</H2>
<PRE>
java.lang.Object
  |
  +--<B>com.adventnet.afp.log.LogFactory</B>
</PRE>
<HR>
<DL>
<DT>public class <B>LogFactory</B><DT>extends java.lang.Object</DL>

<P>
The Logging Framework is governed by the LogFactory. It manages the
 LogWriters and
 <br>the Loggers. This class manages the printing of log out and log error
 messages. The
 <br>LogFactory reads the initial configuration details from the LogConfigReader.
 After
 <br>getting the details, it creates the Loggers and LogWriters. In the
 LogFactory, the
 <br>Log writers and their corresponding Loggers are stored.
 <p>The LogFactory carries out a check for the Logger class name and LogWriter
 class
 <br>name. If the class names are null, the default class names will be taken.
 The Loggers
 <br>and LogWriters are created only at the time of logging.&nbsp; Loggers
 in turn create
 <br>LogWriters. The LogFactory facilitates adding LogWriters and Loggers
 at runtime.
 <br>&nbsp;If you want the runtime addition of the LogWriters and Loggers
 to be included in
 <br>the configuration itself, then it can also be done. Loggers and LogWriters
 can be
 <br>removed at Runtime. These changes can also be included in the configuration,
 if you
 <br>so wish through the LogConfigWriter.
 
 <p></p><p></P>
 <table BORDER=0 COLS=1 WIDTH="100%" BGCOLOR="#CBCBFF" >
 <tr>
 <td><b><font size=+2>Getting Started</font></b></td>
 </tr>
 </table>
 
 <p>This section explains how you can start working with the Logging Framework.
 The following code snippet explains the procedure in detail. For ease of
 reference, explanation has been provided alongside the code snippet itself.
 <br>&nbsp;
 <table BORDER COLS=1 WIDTH="100%" >
 <tr>
 <td>/**
 <br>&nbsp;* <font color="#009900">An example file which explains how to
 start with Logging framework and how to log the messages to a log file
 with the default implementation. The default Configuration reader is the
 LogConfigFileReader which reads the details from the file as properties.
 Add the following xml tags in the configuration file logging.xml file.</font>
 <br>
 <br>&nbsp;
 <p>*&lt;LOGGER>
 <br>*&lt;InstanceName>TestLogger&lt;/InstanceName>
 <br>*&lt;WriterInstanceName>SERVEROUT&lt;/WriterInstanceName>&nbsp;
 <br>*&lt;LogLevel>3&lt;/LogLevel>
 <br>*&lt;PROPERTIES>
 <br>*&nbsp;&nbsp;&nbsp;&nbsp; &lt;PROPERTY>
 <br>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &lt;Key>DisplayName&lt;/Key>
 <br>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &lt;Value>MyLogger&lt;/Value>
 <br>*&nbsp;&nbsp;&nbsp;&nbsp; &lt;/PROPERTY>
 <br>*&lt;/PROPERTIES>&nbsp;
 <br>*&lt;/LOGGER></td>
 </tr>
 </table>
 
 <br>&nbsp;
 <br>&nbsp;
 <table BORDER COLS=1 WIDTH="100%" >
 <tr>
 <td>
 <br>&nbsp;
 <br><font color="#3333FF">//</font><font color="#009900">To create a Logger
 with instance name "TestLogger"&nbsp;</font>
 <br>&nbsp;
 <p>public class Example
 <br>{
 <br>&nbsp;&nbsp;&nbsp; public static void main(String args[]) throws LogException
 <br>&nbsp;&nbsp;&nbsp; {
 <p>// <font color="#009900">Before initializing the LogFactory, configuration
 details for Logging have to be read by the LogConfigReader from the destination
 where the details are available. So, mention the destination.</font>
 <br>&nbsp;
 <p>// <font color="#009900">NOTE : Replace the parameters with the actual
 directory and fileName.</font>
 <p>&nbsp;&nbsp;&nbsp;&nbsp; LogConfigReader reader = new LogConfigFileReader("G:/log/logging.xml");
 <br>&nbsp;&nbsp;&nbsp;&nbsp; LogConfigWriter writer = new LogConfigFileWriter("G:/log/logging.xml");&nbsp;
 <p>//<font color="#009900">To get the Instance of the LogFactory</font>
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LogFactory factory = LogFactory.getInstance();
 <p>//<font color="#009900">To initialize the LogFactory.&nbsp;</font>
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; factory.init(reader , writer);
 <p>//<font color="#009900">Get the Logger instance of the example Logger
 . Only after this, the Logger will be created.</font>
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Logger logger = factory.getLogger("TestLogger");
 <p>//<font color="#009900">To set the LogLevel of the Logger to some desired
 value.</font>
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; logger.setLogLevel(LogLevel.LEVEL3);
 <p>//<font color="#009900"> Log some messages with a level less than the
 Logger's level. The message will be displayed in the following format &lt;TimeStamp>:&lt;DisplayName>:&lt;Message>.
 Here, in this example, the displayName will be "MyLogger"</font>
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; 100;
 i++)
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 <p>//<font color="#009900"> Here the InstanceName of Logger is 'SERVEROUT'.
 So, the log messages will be displayed in the Writer which has the same
 InstanceName. (i.e)'SERVEROUT'.</font>
 <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; logger.out("This
 is message with number : " + i, LogLevel.LEVEL1);
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 logger.err("This is error message with number : " + i, new Exception(),
 <br>LogLevel.LEVEL1);
 <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 <br>&nbsp;
 <p>// <font color="#009900">To disable the logging and then to log some
 messages</font>
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; logger.setLogLevel(LogLevel.DISABLE);
 <p>// <font color="#009900">Since Logging is disabled, the following messages
 will not be logged in the respective Writer.</font>
 <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 100; i &lt;
 200; i++)
 <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 logger.out("This is the disabled message with number : " + i, LogLevel.LEVEL1);
 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 logger.err("This is disabled error message with number : " + i, new Exception(),
 <br>LogLevel.LEVEL1);
 <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 <br>&nbsp;&nbsp;&nbsp; }
 <p>}&nbsp;</td>
 </tr>
 </table>
<P>

<P>
<HR>

<P>
<!-- ======== NESTED CLASS SUMMARY ======== -->


<!-- =========== FIELD SUMMARY =========== -->


<!-- ======== CONSTRUCTOR SUMMARY ======== -->


<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Method Summary</B></FONT></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../com/adventnet/afp/log/Logger.html">Logger</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/afp/log/LogFactory.html#createLogger(com.adventnet.afp.log.LoggerProperties, boolean)">createLogger</A></B>(<A HREF="../../../../com/adventnet/afp/log/LoggerProperties.html">LoggerProperties</A>&nbsp;loggerProps,
             boolean&nbsp;updateInConfFile)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The <code>createLogger</code> method is used to add a Logger.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../com/adventnet/afp/log/LogWriter.html">LogWriter</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/afp/log/LogFactory.html#createLogWriter(com.adventnet.afp.log.LogWriterProperties, boolean)">createLogWriter</A></B>(<A HREF="../../../../com/adventnet/afp/log/LogWriterProperties.html">LogWriterProperties</A>&nbsp;logWriterProps,
                boolean&nbsp;updateInConfFile)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The method <code>createLogWriters</code> is used to create a new LogWriter.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;<A HREF="../../../../com/adventnet/afp/log/LogFactory.html">LogFactory</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/afp/log/LogFactory.html#getInstance()">getInstance</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Used to get the reference of LogFactory.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../com/adventnet/afp/log/Logger.html">Logger</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/afp/log/LogFactory.html#getLogger(java.lang.String)">getLogger</A></B>(java.lang.String&nbsp;loggerInstanceName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The <code>getLogger</code> method is used to get the instance of the Logger specified by loggerInstanceName.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.util.Hashtable</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/afp/log/LogFactory.html#getLoggers()">getLoggers</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method is used to get the instances of all the Loggers
 that are created for performing the Logging operation.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../com/adventnet/afp/log/LogWriter.html">LogWriter</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/afp/log/LogFactory.html#getLogWriter(java.lang.String)">getLogWriter</A></B>(java.lang.String&nbsp;logWriterInstanceName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gives instance of the LogWriter which has the logWriterInstanceName.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.util.Hashtable</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/afp/log/LogFactory.html#getLogWriters()">getLogWriters</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method is used to get the instance of
 all the LogWriters that are created for performing the Logging operation.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/afp/log/LogFactory.html#init(com.adventnet.afp.log.LogConfigReader, com.adventnet.afp.log.LogConfigWriter)">init</A></B>(<A HREF="../../../../com/adventnet/afp/log/LogConfigReader.html">LogConfigReader</A>&nbsp;reader,
     <A HREF="../../../../com/adventnet/afp/log/LogConfigWriter.html">LogConfigWriter</A>&nbsp;writer)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/afp/log/LogFactory.html#removeLogger(java.lang.String, boolean)">removeLogger</A></B>(java.lang.String&nbsp;loggerInstanceName,
             boolean&nbsp;updateInConfFile)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The <code>removeLogger</code> method is used to remove a Logger from the Logfactory.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/afp/log/LogFactory.html#removeLogWriter(java.lang.String, boolean)">removeLogWriter</A></B>(java.lang.String&nbsp;logWriterInstanceName,
                boolean&nbsp;updateInConfFile)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The <code>removeLogWriter</code> method is used to remove a LogWriter.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/afp/log/LogFactory.html#stop()">stop</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method for stopping Loggers.</TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TD><B>Methods inherited from class java.lang.Object</B></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</CODE></TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ============ FIELD DETAIL =========== -->


<!-- ========= CONSTRUCTOR DETAIL ======== -->


<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=1><FONT SIZE="+2">
<B>Method Detail</B></FONT></TD>
</TR>
</TABLE>

<A NAME="init(com.adventnet.afp.log.LogConfigReader, com.adventnet.afp.log.LogConfigWriter)"><!-- --></A><H3>
init</H3>
<PRE>
public void <B>init</B>(<A HREF="../../../../com/adventnet/afp/log/LogConfigReader.html">LogConfigReader</A>&nbsp;reader,
                 <A HREF="../../../../com/adventnet/afp/log/LogConfigWriter.html">LogConfigWriter</A>&nbsp;writer)
          throws <A HREF="../../../../com/adventnet/afp/log/LogException.html">LogException</A></PRE>
<DL>
<DD><DL>

<DD><CODE><A HREF="../../../../com/adventnet/afp/log/LogException.html">LogException</A></CODE></DL>
</DD>
</DL>
<HR>

<A NAME="getInstance()"><!-- --></A><H3>
getInstance</H3>
<PRE>
public static <A HREF="../../../../com/adventnet/afp/log/LogFactory.html">LogFactory</A> <B>getInstance</B>()</PRE>
<DL>
<DD>Used to get the reference of LogFactory. Once LogFactory is initialized this method can be used to get the reference
<P>
<DD><DL>

<DT><B>Returns:</B><DD>LogFactory reference</DL>
</DD>
</DL>
<HR>

<A NAME="stop()"><!-- --></A><H3>
stop</H3>
<PRE>
public void <B>stop</B>()
          throws <A HREF="../../../../com/adventnet/afp/log/LogException.html">LogException</A></PRE>
<DL>
<DD>Method for stopping Loggers. It will be better to call this method at the
 end of the application to free up some of the resources used by logging module as well
 as flushing of all cached contents. All the Loggers and the Logwriters will be dropped
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../com/adventnet/afp/log/LogException.html">LogException</A></CODE> - if an error occurs in removing the Loggers or LogWriters</DL>
</DD>
</DL>
<HR>

<A NAME="createLogWriter(com.adventnet.afp.log.LogWriterProperties, boolean)"><!-- --></A><H3>
createLogWriter</H3>
<PRE>
public <A HREF="../../../../com/adventnet/afp/log/LogWriter.html">LogWriter</A> <B>createLogWriter</B>(<A HREF="../../../../com/adventnet/afp/log/LogWriterProperties.html">LogWriterProperties</A>&nbsp;logWriterProps,
                                 boolean&nbsp;updateInConfFile)
                          throws <A HREF="../../../../com/adventnet/afp/log/LogException.html">LogException</A></PRE>
<DL>
<DD>The method <code>createLogWriters</code> is used to create a new LogWriter. The properties of the module
 are specified in the LogWriter. The method returns true only if all the
 Loggers in the module are created properly. False will be returned if LogWriter could not be created.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>logWriterProps</CODE> - specifies the properties of the LogWriter
 and Loggers.<DD><CODE>updateInConfFile</CODE> - denotes whether the properties of the newly added LogWriter
 and its Loggers are to be writen to the logging configuration file.
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../com/adventnet/afp/log/LogException.html">LogException</A></CODE> - if an error occurs during the creation of a Logger/LogWriter or while
 processing the XML file.</DL>
</DD>
</DL>
<HR>

<A NAME="removeLogWriter(java.lang.String, boolean)"><!-- --></A><H3>
removeLogWriter</H3>
<PRE>
public void <B>removeLogWriter</B>(java.lang.String&nbsp;logWriterInstanceName,
                            boolean&nbsp;updateInConfFile)
                     throws <A HREF="../../../../com/adventnet/afp/log/LogException.html">LogException</A></PRE>
<DL>
<DD>The <code>removeLogWriter</code> method is used to remove a LogWriter.
 This method can be called when the LogWriter and all the Loggers asscociated with
 it are no longer needed. On calling this method, the contents will be flushed and
 all the Loggers that used the LogWriter will be removed.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>logWriterInstanceName</CODE> - a <code>String</code> value denoting the LogWriter to be removed<DD><CODE>updateInConfFile</CODE> - a <code>boolean</code> value denoting if the change has to be done in the conf file.
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../com/adventnet/afp/log/LogException.html">LogException</A></CODE> - if an error occurs during the removal of a LogWriter or during
 processing of Conf file.</DL>
</DD>
</DL>
<HR>

<A NAME="createLogger(com.adventnet.afp.log.LoggerProperties, boolean)"><!-- --></A><H3>
createLogger</H3>
<PRE>
public <A HREF="../../../../com/adventnet/afp/log/Logger.html">Logger</A> <B>createLogger</B>(<A HREF="../../../../com/adventnet/afp/log/LoggerProperties.html">LoggerProperties</A>&nbsp;loggerProps,
                           boolean&nbsp;updateInConfFile)
                    throws <A HREF="../../../../com/adventnet/afp/log/LogException.html">LogException</A></PRE>
<DL>
<DD>The <code>createLogger</code> method is used to add a Logger. The Logger will be created
 only if there are no other Loggers with the same LoggerInstanceName. Otherwise, LogException
 will be thrown.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>loggerProps</CODE> - specifies the properties for the Logger<DD><CODE>updateInConfFile</CODE> - a <code>boolean</code> value denoting whether the newly created Logger has to
 be written to the logging configuration file.
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../com/adventnet/afp/log/LogException.html">LogException</A></CODE> - if an error occurs during the creation of the Logger</DL>
</DD>
</DL>
<HR>

<A NAME="removeLogger(java.lang.String, boolean)"><!-- --></A><H3>
removeLogger</H3>
<PRE>
public void <B>removeLogger</B>(java.lang.String&nbsp;loggerInstanceName,
                         boolean&nbsp;updateInConfFile)
                  throws <A HREF="../../../../com/adventnet/afp/log/LogException.html">LogException</A></PRE>
<DL>
<DD>The <code>removeLogger</code> method is used to remove a Logger from the Logfactory.
 This can be called when the Logger is no longer needed. On calling this method,
 the contents of the LogWriter of that Logger will be flushed and then the
 Logger will be destroyed.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>loggerInstanceName</CODE> - a <code>String</code> value denoting the Logger to be removed<DD><CODE>updateInConfFile</CODE> - a <code>boolean</code> value denoting if the change has to be updated in the conf file
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../com/adventnet/afp/log/LogException.html">LogException</A></CODE> - if an error occurs while removing the Logger or updating the conf file.</DL>
</DD>
</DL>
<HR>

<A NAME="getLogWriter(java.lang.String)"><!-- --></A><H3>
getLogWriter</H3>
<PRE>
public <A HREF="../../../../com/adventnet/afp/log/LogWriter.html">LogWriter</A> <B>getLogWriter</B>(java.lang.String&nbsp;logWriterInstanceName)
                       throws <A HREF="../../../../com/adventnet/afp/log/LogException.html">LogException</A></PRE>
<DL>
<DD>Gives instance of the LogWriter which has the logWriterInstanceName. It checks whether the LogWriter
 which has this instance name is created already. If it is not created, it will create the LogWriter.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>logWriterInstanceName</CODE> - Key for which log file writer is to be returned
<DT><B>Returns:</B><DD>LogWriter instance
<DD><CODE><A HREF="../../../../com/adventnet/afp/log/LogException.html">LogException</A></CODE></DL>
</DD>
</DL>
<HR>

<A NAME="getLogger(java.lang.String)"><!-- --></A><H3>
getLogger</H3>
<PRE>
public <A HREF="../../../../com/adventnet/afp/log/Logger.html">Logger</A> <B>getLogger</B>(java.lang.String&nbsp;loggerInstanceName)
                 throws <A HREF="../../../../com/adventnet/afp/log/LogException.html">LogException</A></PRE>
<DL>
<DD>The <code>getLogger</code> method is used to get the instance of the Logger specified by loggerInstanceName.
 It will check whether the Logger with this instance name is already created. if the logger is not
 created, it will check whether the corresponding writer is created. If the writer is not created, it
 will create the Writer and then Logger is created. After creating the Logger and corresponding writer,
 it returns the instance of the Logger. The Logger instance can be used
 for changing the Logger's attributes at runtime.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>loggerInstanceName</CODE> - a <code>String</code> value denoting the Logger's unique InstanceName
<DT><B>Returns:</B><DD>the <code>Logger</code> instance.
<DD><CODE><A HREF="../../../../com/adventnet/afp/log/LogException.html">LogException</A></CODE></DL>
</DD>
</DL>
<HR>

<A NAME="getLoggers()"><!-- --></A><H3>
getLoggers</H3>
<PRE>
public java.util.Hashtable <B>getLoggers</B>()</PRE>
<DL>
<DD>This method is used to get the instances of all the Loggers
 that are created for performing the Logging operation.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>a <code>Hashtable</code> containing the instance of all the Loggers with their
 LoggerInstanceName as key.</DL>
</DD>
</DL>
<HR>

<A NAME="getLogWriters()"><!-- --></A><H3>
getLogWriters</H3>
<PRE>
public java.util.Hashtable <B>getLogWriters</B>()</PRE>
<DL>
<DD>This method is used to get the instance of
 all the LogWriters that are created for performing the Logging operation.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>a <code>Hashtable</code> with the LogWriter instance with key as
 LogWriterInstanceName</DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>

<!-- ========== START OF NAVBAR ========== -->
<A NAME="navbar_bottom"><!-- --></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0">
<TR>
<TD COLSPAN=3 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../../com/adventnet/afp/log/LogConfigFileWriter.html"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../../com/adventnet/afp/log/LoggerImpl.html"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../index.html" TARGET="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="LogFactory.html" TARGET="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;
<SCRIPT>
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
<A HREF="../../../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>
</NOSCRIPT>
</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;CONSTR&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;CONSTR&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<!-- =========== END OF NAVBAR =========== -->

<HR>
Copyright (c)AdventNet Inc., 1996-2006
</BODY>
</HTML>
