package DETServer;


import DETApp.*;

//import Interface.ETrader_Interface;
import Interface.MessageContainer;

import org.omg.CosNaming.*;
import org.omg.CosNaming.NamingContextPackage.*;
import org.omg.CORBA.*;
import org.omg.PortableServer.*;

import java.rmi.Naming;
import java.rmi.RemoteException;
import java.text.DecimalFormat;
import java.text.Format;
import java.util.Hashtable;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.Vector;
import java.io.IOException;
import java.lang.Object;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;

import java.text.DecimalFormat;
import java.text.Format;
import java.util.*;


class DETImpl extends DETPOA 
{
	
		//*********************************************************
		/**
		    *  Define all Server name and Items 
		    *  server1 deal with item1
		    *  server2 deal with item2
		    *  server3 deal with item3
		    */
		   // Server one 
		   public static final String NamingServer = "swaziland";
		   public static final String NamingObj = "DETcpu";
		   
		   public static final String NamingObj1 = "DETcpu";
		   public static final String NamingObj2 = "DETram";
		   public static final String NamingObj3 = "DEThdd";
		   
		   
		   public static final String item1 = "cpu";
		   public static final String item2 = "ram";
		   public static final String item3 = "hdd";
		    
		   	   
		   /**
		    *  Item details for this e-trader
		    * 
		    */
		   
		   		   
		   public static final String ITEM ="cpu";
		   public static final double PRICE=100;
		   public static final int QTY=200;
		   public static final double BALANCE=5000;
		 // *************************************************************************************  
	

	static public Object accTrade=new Object();
	static public Object accCanTrade=new Object();
	
	 static public Object lockItm = new Object();
		static public Object lockSell = new Object();
		static public Object lockBuy =  new Object();
	   
	
				   
	private ORB orb;
	
	//Format df = new DecimalFormat("####.00");

	 Format df = new DecimalFormat("####.00");
     Hashtable servers;  // Hashtable is Serializable 
     Hashtable itemList;  // Hashtable is Serializable
	 Vector otherItems;
	 ContainerManagedItem itm;
	
	 
	 Vector itemDetail;
	 
	 MessageContainer allMessage = new MessageContainer();
	

	 //Format df = new DecimalFormat("####.00");
	public void setORB(ORB orb_val)	{ orb = orb_val; }

	
	 /**
	    *  
	    * @param itemName : String Containing item Name 
	    * @param p : dobule Containing item price
	    * @param q : double Containing initial  quantity
	    * @param b : double Containing initial balance
	    * @throws RemoteException
	    */
	   
	  //public DETImpl(String itemName, double p, int q, double b) throws RemoteException {
	  public DETImpl() throws RemoteException {
	      super( );
		
	      ContainerManagedItem  itm = new ContainerManagedItem(ITEM,PRICE,QTY,BALANCE);  
	      	
		servers = new Hashtable() ; 
		itemDetail= new Vector();
		
		itemList= new Hashtable();
		
		
		servers.put(item1,NamingObj1);
		servers.put(item2,NamingObj2);
		servers.put(item3,NamingObj3);
		
		
		// start UDPServer 
		
		UDPServer udpServer= new UDPServer();
		
		udpServer.start();
					
	   }
	
	
	  /**
	   * Design By Contract
	   * Precondition: This function expects an input item and quantity from the user/client
	   * PostCondition: This function will illustrate buy operation, that client invokes buy method to
	   *                one of the server, and consequently E-trader performs buy and sell operation, in order to 
	   *                 complete that particular transaction. 
	   * 
	   */	
	  public int buyItem(String item, int q) throws RemoteException {
	  			
	  			
	  	String sName;
	  			
	  			//System.out.println("msf "+item);
	  						String ser=(String)s.get(item); // find server that deals with this item
	  						
	  						
	  						if (ser!=null)
	  						{
	  						
	  							////Acquire semaphore lock
	  							synchronized(lockBuy)	
	  							{			
	  								
	  								
	  							 try{
	  								sName=ser;
	  								//System.out.println("before");
	  								// callServer method calls remote server and its sellItem method
	  								Vector res=(Vector) callServer(sName,item,q,itm.getBalance());
	  								
	  								//System.out.println("serwrerere "+ser);							
	  								Integer retVal=(Integer)res.elementAt(0);
	  								
	  								int resInt=retVal.intValue();
	  																											
	  								if (resInt==allMessage.SUCCESS) 
	  								//If this operation successful  
	  								{
	  									
	  									Double pr= (Double)res.elementAt(1);
	  									////Acquire semaphore lock
	  									synchronized(lockItm){	
	  									
	  										itm.setBalance( itm.getBalance()- q* pr.intValue());
	  										
	  										
	  										String log= item+ "\t" + q +"\t" +res.elementAt(1).toString()+ "\t" +sName;
	  										
	  										itemDetail.add(new String(log));
	  										
	  										System.out.println("SERVER LOG: BUY FROM ("+sName +") : ITEM ("+  item +") QTY ("+ q +")  PRICE (" + pr + ") BAL("+ itm.getBalance() +")");
	  									
	  									} // Release semaphore lock
	  									
	  									return resInt; 
	  								}				
	  								
	  								else // if buy operation is not successfull then return error
	  									{
	  										return resInt; // return an error message						
	  									}
	  								
	  							 }catch(Exception e){
	  								 System.out.println("BUY ITEM Error "+ e);
	  							 }
	  							
	  							}// Release Semaphore lock
	  						}else
	  						{ // product is not found in server list as no server dealing with this product
	  							return allMessage.PRODUCT_NOT_FOUND;
	  						}
	  					 
	  			
	  			
	  					
	  			return allMessage.SUCCESS;
	  		}
	  	
	  /**
	   * Design By Contract
	   * Precondition: This function expects an input hostname, item, balance and quantity. 
	   * PostCondition: This function will illustrate call another e-trader server operation,  
	   *                buy or sell operation. It acts as a look up to search another e-trader. 
	   */			
	  		
	   public Vector callServer(String hostName,String item,int q,double bal){
	  							
	  			try {
	  		         int RMIPort=1399;         
	  			     String mitem = item+"&"+bal;
	  		         String registryURL =   "rmi://" + hostName+ ":" + RMIPort + "/Raihan";
	  		         
	  		         // find the remote object and cast it to an interface object
	  		        ETrader_Interface h = ( ETrader_Interface)Naming.lookup(registryURL);
	  		       	 //  call remote method sellItem         
	  		         Vector res = (Vector) h.sellItem(mitem,q); 
	  		        // System.out.println(mitem);	         
	  		         return res;
	  		         
	  		      } 
	  		      catch (Exception e) {
	  		         System.out.println("Call Server Error: "+hostName+"   "+e);
	  		         
	  		         Vector vEr= new Vector();
	  		         vEr.add(new Integer(allMessage.SERVER_NOT_FOUND));
	  		         vEr.add(new String(hostName));
	  		         vEr.add(new String(item));
	  		         
	  		         return vEr;
	  		         
	  		      } 
	  			
	  		}
	  		
	  		
	  /**
	   * Design By Contract
	   * Precondition: This function expects an input item, balance and quantity 
	   * PostCondition: This function will illustrate sell operation, that client invokes buy method to
	   *                one of the server, and consequently E-trader performs sell operation, in order to 
	   *                 complete that particular transaction. 
	   * 
	   */			
	  		
	  public Vector sellItem(String item, int q) throws RemoteException {
	  			// TODO Auto-generated method stub
	  			
	  								
	  			Vector v = new Vector() ;
	  			StringTokenizer st = new StringTokenizer(item,"&");
	  			String gitem = st.nextToken();
	  			double bal = Double.parseDouble(st.nextToken());
	  			item = gitem.trim();
	  			//System.out.println("pass bal: "+bal);	
	  			if(itm.name.equalsIgnoreCase(item))  // local product
	  			{
	  			  
	  			  ////Acquire semaphore lock
	  			  
	  			synchronized(lockSell){
	  					
	  				   double pr=itm.getPrice();
	  					
	  				   if (bal> q*pr) // buyer have balance to buy
	  				   {
	  				    ////Acquire semaphore lock
	  					   synchronized(lockItm){
	  						
	  						// Check that e-trade has enough quantity to sell
	  						   if (itm.getQty()>=q)  
	  							{					
	  									
	  								itm.setQty(itm.getQty()-q);
	  								itm.setBalance(itm.getBalance() + pr * q);
	  								
	  							
	  								v.add(new Integer(allMessage.SUCCESS));
	  								v.add(new Double(pr));
	  								
	  								System.out.println("SERVER LOG:		SELL   : ITEM ("+  item +") QUANTITY ("+ q +") PRICE (" + pr + ")   BALANCE("+ itm.getBalance() +")");
	  															
	  								return v;
	  							}
	  							else {
	  								v.add(new Integer(allMessage.NOT_ENOUGH_QUANTITY));
	  								return v;
	  							}
	  					   }// Release Lock
	  				   }
	  				  else {
	  					  v.add(new Integer(allMessage.NOT_ENOUGH_FUNDS));
	  					  return v;
	  				  }
	  			}//Release Lock  
	  						
	  			}
	  			
	  			else {
	  				  v.add(new Integer(allMessage.PRODUCT_NOT_FOUND));
	  				  
	  				  return v;
	  			}
	  			
	  				
	  			
	  		}
	  		
	  	
	  /**
	   * Design By Contract
	   * Precondition: This function expects no input from the user.
	   * PostCondition: This function will illustrate print report for server side. 
	   * 
	   */			
	  		
	  public Vector printReport() throws RemoteException {
	  			

	  			Vector v=new Vector();
	  			
	  			////Acquire semaphore lock
	  			synchronized(lockItm){
	  				
	  				String pr=df.format(Double.valueOf(itm.getPrice()));
	  				String bl=df.format(Double.valueOf(itm.getBalance()));
	  				v.add("");
	  				v.add("***************  DISTRIBUTED ELECTRONIC TRADER   **************************");
	  				v.add("");
	  				v.add("===========================================================================");
	  				
	  				v.add("ITEM: "+ itm.name +"	 QUANTITY:"+ itm.getQty() + "		PRICE: " + pr + "	BALANCE: "+ bl);
	  				
	  				v.add("");
	  				
	  				v.add("============================================================================") ;
	  				
	  			}//Release semaphore lock 
	  			
	  			System.out.println();
	  			System.out.println();
	  			//System.out.println("Item \t Qty \t Price \t Server");
	  			//System.out.println("============================================");
	  			
	  			for (int x=0;x<itemDetail.size();x++)
	  				v.add(itemDetail.elementAt(x));
	  				
	  			
	  			
	  			return v;
	  		}
	  		 
	  		
	  			

} //end class
