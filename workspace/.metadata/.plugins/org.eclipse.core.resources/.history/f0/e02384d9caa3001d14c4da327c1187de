package DETServer;


import DETApp.*;

import Interface.MessageContainer;

import org.omg.CosNaming.*;
import org.omg.CosNaming.NamingContextPackage.*;
import org.omg.CORBA.*;
import org.omg.PortableServer.*;

import java.rmi.Naming;
import java.rmi.RemoteException;
import java.text.DecimalFormat;
import java.text.Format;
import java.util.Hashtable;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.Vector;
import java.io.IOException;
import java.lang.Object;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;

import java.text.DecimalFormat;
import java.text.Format;
import java.util.*;


class DETImpl extends DETPOA 
{
	
		//*********************************************************
		/**
		    *  Define all Server name and Items 
		    *  server1 deal with item1
		    *  server2 deal with item2
		    *  server3 deal with item3
		    */
		   // Server one 
		   public static final String NamingServer = "swaziland";
		   public static final String NamingObj = "DETcpu";
		   
		   public static final String NamingObj1 = "DETcpu";
		   public static final String NamingObj2 = "DETram";
		   public static final String NamingObj3 = "DEThdd";
		   
		   
		   public static final String item1 = "cpu";
		   public static final String item2 = "ram";
		   public static final String item3 = "hdd";
		    
		   	   
		   /**
		    *  Item details for this e-trader
		    * 
		    */
		   
		   		   
		   public static final String ITEM ="cpu";
		   public static final double PRICE=100;
		   public static final int QTY=200;
		   public static final double BALANCE=5000;
		 // *************************************************************************************  
	
	static public Object accItm=new Object();
	static public Object accSell=new Object();
	static public Object accBuy=new Object();
	static public Object accTrade=new Object();
	static public Object accCanTrade=new Object();
	
				   
	private ORB orb;
	
	//Format df = new DecimalFormat("####.00");

	 Format df = new DecimalFormat("####.00");
     Hashtable servers;  // Hashtable is Serializable 
     Hashtable itemList;  // Hashtable is Serializable
	 Vector otherItems;
	 ContainerManagedItem itm;
	
	 
	 Vector itemDetail;
	 
	 MessageContainer allMessage = new MessageContainer();
	

	 //Format df = new DecimalFormat("####.00");
	public void setORB(ORB orb_val)	{ orb = orb_val; }

	
	 /**
	    *  
	    * @param itemName : String Containing item Name 
	    * @param p : dobule Containing item price
	    * @param q : double Containing initial  quantity
	    * @param b : double Containing initial balance
	    * @throws RemoteException
	    */
	   
	  //public DETImpl(String itemName, double p, int q, double b) throws RemoteException {
	  public DETImpl() throws RemoteException {
	      super( );
		
	      ContainerManagedItem  itm = new ContainerManagedItem(ITEM,PRICE,QTY,BALANCE);  
	      	
		servers = new Hashtable() ; 
		itemDetail= new Vector();
		
		itemList= new Hashtable();
		
		
		servers.put(item1,NamingObj1);
		servers.put(item2,NamingObj2);
		servers.put(item3,NamingObj3);
		
		
		// start UDPServer 
		
		UDPServer udpServer= new UDPServer();
		
		udpServer.start();
					
	   }
	
	
		
	//	implement buyItem() method
	  public int buyItem(String item, int q) throws RemoteException {
			
			
			String sName;
					
					//System.out.println("msf "+item);
								String ser=(String)s.get(item); // find server that deals with this item
								
								
								if (ser!=null)
								{
								
									////Acquire semaphore lock
									synchronized(lockBuy)	
									{			
										
										
									 try{
										sName=ser;
										//System.out.println("before");
										// callServer method calls remote server and its sellItem method
										Vector res=(Vector) callServer(sName,item,q,itm.getBalance());
										
										//System.out.println("serwrerere "+ser);							
										Integer retVal=(Integer)res.elementAt(0);
										
										int resInt=retVal.intValue();
																													
										if (resInt==allMessage.SUCCESS) 
										//If this operation successful  
										{
											
											Double pr= (Double)res.elementAt(1);
											////Acquire semaphore lock
											synchronized(lockItm){	
											
												itm.setBalance( itm.getBalance()- q* pr.intValue());
												
												
												String log= item+ "\t" + q +"\t" +res.elementAt(1).toString()+ "\t" +sName;
												
												itemDetail.add(new String(log));
												
												System.out.println("SERVER LOG: BUY FROM ("+sName +") : ITEM ("+  item +") QTY ("+ q +")  PRICE (" + pr + ") BAL("+ itm.getBalance() +")");
											
											} // Release semaphore lock
											
											return resInt; 
										}				
										
										else // if buy operation is not successfull then return error
											{
												return resInt; // return an error message						
											}
										
									 }catch(Exception e){
										 System.out.println("BUY ITEM Error "+ e);
									 }
									
									}// Release Semaphore lock
								}else
								{ // product is not found in server list as no server dealing with this product
									return allMessage.PRODUCT_NOT_FOUND;
								}
							 
					
					
							
					return allMessage.SUCCESS;
				}
			
	
//	implement printReport() method
	public int printReport()
	{
		synchronized(accItm){
			
			String pr=df.format(Double.valueOf(itm.getPrice()));
			String bl=df.format(Double.valueOf(itm.getBalance()));
			System.out.println("");
			System.out.println("*************************         REPORT         **************************");
			System.out.println("===========================================================================");
			System.out.println("Item: "+ itm.name +"    Qty:"+ itm.getQty() + "    Price: " + pr + "    Balance: "+ bl);
			System.out.println("===========================================================================");
		}//accItm syn
		
		System.out.println();
			
		System.out.println("");
		System.out.println("==================== bought item===============================");
		Vector v;
		
		if (itemList.size()>0)
		{
		   v=(Vector)itemList.get(item1);
		   if (v!=null)
			   System.out.println(item1+"    price= "+ v.elementAt(0) + "    qty="+ v.elementAt(1) );
		   
		   v=(Vector)itemList.get(item2);
		   if (v!=null)
			   System.out.println(item2+"    price= "+ v.elementAt(0) + "    qty="+ v.elementAt(1) );
		   
		   v=(Vector)itemList.get(item3);
		   if (v!=null)
			   System.out.println(item3+"    price= "+ v.elementAt(0) + "    qty="+ v.elementAt(1) );
		}
		
		System.out.println();
		System.out.println();
		System.out.println("Item \t Qty \t Price \t Server");
		System.out.println("============================================");
		
		for (int x=0;x<itemDetail.size();x++)
			System.out.println(itemDetail.elementAt(x));
		
		
		
		return 1;
	}
	
	
//	implement Sellitem() method
	public Vector sellItem(String item, int q) throws RemoteException {
		// TODO Auto-generated method stub
		
							
		Vector v = new Vector() ;
		StringTokenizer st = new StringTokenizer(item,"&");
		String gitem = st.nextToken();
		double bal = Double.parseDouble(st.nextToken());
		item = gitem.trim();
		//System.out.println("pass bal: "+bal);	
		if(itm.name.equalsIgnoreCase(item))  // local product
		{
		  
		  ////Acquire semaphore lock
		  
		synchronized(lockSell){
				
			   double pr=itm.getPrice();
				
			   if (bal> q*pr) // buyer have balance to buy
			   {
			    ////Acquire semaphore lock
				   synchronized(lockItm){
					
					// Check that e-trade has enough quantity to sell
					   if (itm.getQty()>=q)  
						{					
								
							itm.setQty(itm.getQty()-q);
							itm.setBalance(itm.getBalance() + pr * q);
							
						
							v.add(new Integer(allMessage.SUCCESS));
							v.add(new Double(pr));
							
							System.out.println("SERVER LOG:		SELL   : ITEM ("+  item +") QUANTITY ("+ q +") PRICE (" + pr + ")   BALANCE("+ itm.getBalance() +")");
														
							return v;
						}
						else {
							v.add(new Integer(allMessage.NOT_ENOUGH_QUANTITY));
							return v;
						}
				   }// Release Lock
			   }
			  else {
				  v.add(new Integer(allMessage.NOT_ENOUGH_FUNDS));
				  return v;
			  }
		}//Release Lock  
					
		}
		
		else {
			  v.add(new Integer(allMessage.PRODUCT_NOT_FOUND));
			  
			  return v;
		}
		
			
		
	}

	/**
	 *  this method call remote server to sell this item
	 * @param hostName : String containing houst name 
	 * @param item : String containing item name
	 * @param q : int containing quantity
	 * @param bal : double containing balanace
	 * @return
	 */

	public int callServer(String Nameobj,String item,int q,double bal){
			
		
		
		try {
	    
	         //  call remote method sellItem*************************         
	        
			 //String arg1[]={"-ORBInitialHost", hostName ,"-ORBInitialPort", "1234"};
			String arg1[]={"-ORBInitialHost", NamingServer ,"-ORBInitialPort", "1234"};
		   	 
	    	 ORB orb = ORB.init(arg1, null);

	         
	         // get the root naming context
	         org.omg.CORBA.Object objRef =  orb.resolve_initial_references("NameService");
	         
	         // Use NamingContextExt instead of NamingContext, 
	         // part of the Interoperable naming Service.  
	         NamingContextExt ncRef =  NamingContextExtHelper.narrow(objRef);
	  
	         // resolve the Object Reference in Naming
	        // System.out.println(Nameobj);
	         
	         String name = Nameobj ; //"DET";
	         
	         DET DETImpl;
	         
	         DETImpl = DETHelper.narrow(ncRef.resolve_str(name));

	         
	         int res = DETImpl.sellItem(item,q);        
	         	                
	         
	         //Vector res = (Vector) h.sellItem(item,q,bal); 
	         	         
	         return res;
	         
	      } // end try 
	      catch (Exception e) {
	         System.out.println("Call Server Error: "+Nameobj+"   "+e);
	         
	        // Vector vEr= new Vector();
	        // vEr.add(new Integer(allMessage.SERVER_NOT_FOUND));
	        //vEr.add(new String(hostName));
	        // vEr.add(new String(item));
	         
	         return allMessage.SERVER_NOT_FOUND;
	         
	      } 
		
	}

	/**
	 * tradeitem send UDP request to other etrader for trade
	 *  
	 * initailly it will check if it has enough qty of Item1 then it deduct qty 
	 * and if the other etrader respond canTrade then update balance and buying item qty
	 * otherwise rollback item1 qty
	 * 
	 *  @item1 : Selling  item
	 *  @qty1 : Selling  qty 
	 *  @item2: buying item
	 *  @qty2 : Selling qty
	 *  @etrader: doing trade with this etrader
	 */
	
//item1 sell      item2 buy
	public int tradeItems(String item1, int qty1, String item2, int qty2, String etrader) {
				
		Vector v= new Vector();	
		double pr=0; // price of trading item 
		
		synchronized(accTrade){
		
			
				if ( item1.equalsIgnoreCase(itm.name) )  // if this etrader dealing with this item1 
				{
					synchronized(accItm){
						if( itm.getQty() >= qty1)
						{	pr= itm.getPrice();
							itm.setQty(itm.getQty()-qty1);  // deduct qty at beging of transaction 
						}
					} // end syn accitm	
				}
				else // check bought item list
				{
					v=(Vector)itemList.get(item1);
					if (v!=null)
					{
						int qty =((Integer)v.elementAt(1)).intValue();  // qty
						
						if (qty>=qty1)
						{	pr= ((Double)v.elementAt(0)).doubleValue();  // price
							Vector prqty=new Vector();
							prqty.add(new Double(pr));
							prqty.add(new Integer(qty-qty1));
								
							itemList.put(item1,prqty);
						}
					}
				}
				
				if (pr<=0.0) 
					return allMessage.NOT_ENOUGH_QUANTITY;
				
				
				String args1=item1+","+ qty1 + "," + pr + "," + item2 + "," + qty2 +", end";
				
				//System.out.println(args1);
				
				// ******************************   UDP call *********************************************
				
				String rMess=UDPcall(args1,etrader);
				
				// ******************************   UDP call *********************************************
				
				String mess[]= rMess.split(",");
				
				//System.out.println("RESponse: "+mess[0]);
				
				if (mess[0].equalsIgnoreCase("canTrade")) // complete transaction 
				{
					double rprice= Double.parseDouble(mess[1]);  // retrun price
					
					tradeTransaction(item1, qty1,pr , item2, qty2, rprice, etrader);
					
				}
				else  // rollback 
				{
					
						if( itm.name.equalsIgnoreCase(item1))
							itm.setQty(itm.getQty()+qty1);  // deduct qty at beging of transaction 
						else{
							v=(Vector)itemList.get(item1);
							if (v!=null)
							{
								int qty =((Integer)v.elementAt(1)).intValue();  // qty
								pr= ((Double)v.elementAt(0)).doubleValue();  // price
								
								Vector prqty=new Vector();
								prqty.add(new Double(pr));
								prqty.add(new Integer(qty+qty1));
										
								itemList.put(item1,prqty);
							}
							
						}
					 
				}
					
		}// end syn accTrade
		return 0;
	}
	
	/**
	 * 
	 * this mthod make UDP call to etrader  
	 * @param args1 : all details of buying and selling items (comma sepreated) 
	 * @param etrader : calling etrader (UDPserver)
	 * @return
	 */
	public  String UDPcall(String args1, String etrader){
		
		byte [] m = args1.getBytes();
		
		// args give message contents and destination hostname
		DatagramSocket aSocket = null;
					
		int serverPort = 6789;		                                                 
		
		String rMess="";
		
		try {
			aSocket = new DatagramSocket();    
			InetAddress aHost = InetAddress.getByName(etrader);
			
			DatagramPacket request = new DatagramPacket(m,  args1.length(), aHost, serverPort);
			
			aSocket.send(request);			                        
			
			byte[] buffer = new byte[1000];
			DatagramPacket reply = new DatagramPacket(buffer, buffer.length);	
			
			aSocket.receive(reply);
									
			String mess= new String (reply.getData());
				
			rMess=mess.trim();
				
			
		}catch (SocketException e){System.out.println("Socket UDP Client: " + e.getMessage());
		}catch (IOException e){System.out.println("IO: " + e.getMessage());
		}finally {if(aSocket != null) aSocket.close();}
		
		return rMess;
	}
	
	
//item1 sell and item2 buy
	
	/**
	 * 
	 *  after confirmation canTrade from etrader2 
	 *  this method will complete the tranaction buy update balance and quantities. 
	 */
	
	public void tradeTransaction(String item1,int qty1,double price1, String item2, int qty2, double price2, String etrader){
		
		int q=0;
		double pr=0;
		
		item1=item1.trim();
		item2=item2.trim();
		
		
		Vector prqty=new Vector();
		// buy
		if (item2.equalsIgnoreCase(itm.name)) // if dealing with this item
		{	
			synchronized(accItm){
				itm.setQty(itm.getQty()+qty2);  // add qty for item sell(give)
				itm.setBalance(itm.getBalance()-(price2*qty2)); // reduce balance for item buy(give)
			}// end sny accitm
		}
		else // if etrader is not dealing with this item
		{
			Vector v=(Vector)itemList.get(item2);
			int qty=0;
			
			if (v!=null) // found in list
				 qty =((Integer)v.elementAt(1)).intValue();  // qty
				
															
			prqty.add(new Double(price2));
			prqty.add(new Integer(qty+qty2));
					
			itemList.put(item2,prqty);
											
			itm.setBalance(itm.getBalance()- (price2*qty2));  /// reduce balance for buy item
					
		}
		
		//sell
		
		if (item1.equalsIgnoreCase(itm.name)) // if dealing with this item
		{	// qty deducted at beging of transaction
			//itm.setQty(itm.getQty()- qty1);  // reduce qty for item sell(give)
			synchronized(accItm){
				itm.setBalance(itm.getBalance()+(price1*qty1)); // add balance for item buy(give)
			}
		}
		else // if etrader is not dealing with this item
		{
			Vector v=(Vector)itemList.get(item1);
			int qty=0;
			
			if (v!=null) // found in list
				 qty =((Integer)v.elementAt(1)).intValue();  // qty
																			
			prqty.add(new Double(price1));
			prqty.add(new Integer(qty));  // qty already deducuted at beging of transaction 
					
			itemList.put(item1,prqty);
			synchronized(accItm){								
				itm.setBalance(itm.getBalance()+ (price1*qty1));  /// add balance for buy item
			}	
		}
		
		System.out.println("SERVER LOG: Trade Item   : ITEM sell ("+  item1 +") QTY ("+ qty1 +") PRICE (" + price1 + ") ITEM buy ("+  item2 +") QTY ("+ qty2 +") PRICE (" + price2 + ")  from eTrader: "+etrader)  ;
		
		
	}
	
	
	
	
	
	
	
	
	/**
	 *  
	 *  UDP sever will call this method to perform canTrade opeartion. 
	 *  first it will check it has enough balance to sell item2 in qty2
	 *  if yes then update its balance and quantites for both items (buy/sell)
	 *  and send mess "canTrade" with selling price 
	 *  otherwise send message "noTrade" and do nothing
	 * 
	 */
//item1 buy(take) and item2 sell(give)
	public double canTrade(String item1,int qty1,double price, String item2, int qty2){
		
		int q=0;
		double pr=0;
		
		item2=item2.trim();
		item1=item1.trim();
				
		Vector prqty=new Vector();
	synchronized(accCanTrade)
	{
		// sell
		if (item2.equalsIgnoreCase(itm.name)) // if dealing with this item
		
			synchronized(accItm){
				if( itm.getQty()>=qty2)
				{   pr= itm.getPrice();
					
					itm.setQty(itm.getQty()-qty2);  // reduce qty for item sell(give)
					itm.setBalance(itm.getBalance()+(pr*qty2)); // add balance for item sell(give)
					
					itm.setBalance(itm.getBalance()-(price * qty1 )); // reduce balance for item take  
					
					// add qty and update price for bought(take) time 
					Vector v=(Vector)itemList.get(item1);
					
					if (v!=null)
							q=((Integer)v.elementAt(1)).intValue();
							
					q=q+ qty1;
												
					prqty.add(new Double(price));
					prqty.add(new Integer(q));
					
					itemList.put(item1,prqty);
					
					
					return pr; // return price Sell item 
					
				}else 
					return allMessage.NOT_ENOUGH_QUANTITY;
		
			}// end sun accitem
		
		else // if etrader is not dealing with this item
		{
					
			Vector v=(Vector)itemList.get(item2);
				
				if (v!=null) // found in list
				{
					
					synchronized(accItm){
						int qty =((Integer)v.elementAt(1)).intValue();  // qty
						
						if (qty>=qty2) // have qty
						 {
							pr= ((Double)v.elementAt(0)).doubleValue();  // price
															
							prqty.add(new Double(pr));
							prqty.add(new Integer(qty-qty2));
							
							itemList.put(item2,prqty);
							
							itm.setBalance(itm.getBalance()+ (pr*qty2));  /// add balance for sell item 
												
							itm.setBalance(itm.getBalance()- (price*qty1));  /// reduce balance for buy item
							
							if (item1.equalsIgnoreCase(itm.name))  // if trading with buying item
								itm.setQty(itm.getQty()+qty1);
							else 
							{
								Vector v1=(Vector)itemList.get(item1);
								
								if (v1!=null)
										q=((Integer)v1.elementAt(1)).intValue();
										
								q=q+ qty1;
															
								prqty.add(new Double(price));
								prqty.add(new Integer(q));
								
								itemList.put(item1,prqty);
														
							}
												
							return pr;
							
						 }else
							 return allMessage.NOT_ENOUGH_QUANTITY;
					}// end sny accitem	
				}
			
				else  // not found in bought item list
					return allMessage.PRODUCT_NOT_FOUND;
					
		}
		
	} // end syn accCanTrade	
		//return -1;
	}
	
//---------------------------------------------------------------------------------------------------------
/**
* 
*  this class implement UDP sever in new thread 
* 
*/
	
	
	
	class UDPServer extends Thread{


	DatagramSocket aSocket = null;	
	
		
	public UDPServer(){
							
	}
	
	public  void run(){
		try{
	
			aSocket = new DatagramSocket(6789);
					// create socket at agreed port
			byte[] buffer = new byte[1000];
			
			String Reply;
			
			while(true){
				DatagramPacket request = new DatagramPacket(buffer, buffer.length);
				aSocket.receive(request); 
				
				String mess= new String (request.getData());
				
				mess=mess.trim();
				
				String m1[]= mess.split(",");
				
				
				int qty1 = Integer.parseInt(m1[1]);
				double pr = Double.parseDouble(m1[2]);
				int qty2 = Integer.parseInt(m1[4]);
				
				
				// call funtion can trade 
				double res= canTrade(m1[0],qty1, pr,m1[3],qty2);
				
				//System.out.println("Reply cantrade= "+res);
				
				if (res>0){
					Reply="canTrade,"+res +", end";
					System.out.println("SERVER LOG:	CAN TRADE	Trade Item   : ITEM buy ("+  m1[0] +") QTY ("+ qty1 +") PRICE (" + pr + ") ITEM sell ("+  m1[3] +") QTY ("+ qty2 +") PRICE (" + res + ") ")  ;
				}
				else
					Reply="noTrade";
				
				  				
				byte [] mm = Reply.getBytes();
				
 			DatagramPacket reply = new DatagramPacket(mm, mm.length, request.getAddress(), request.getPort());
 			aSocket.send(reply);
 		}
		}catch (SocketException e){System.out.println("Socket: " + e.getMessage());
		}catch (IOException e) {System.out.println("IO: " + e.getMessage());
		}finally {if(aSocket != null) aSocket.close();}
 
	}
	
	  
		
	
}	//UDP Server end class


} //end class
