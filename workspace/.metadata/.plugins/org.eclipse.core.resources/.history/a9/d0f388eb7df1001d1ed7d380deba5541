<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN""http://www.w3.org/TR/REC-html40/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc on Thu Jan 29 17:18:51 IST 2009 -->
<TITLE>
USMUtils (AdventNet)
</TITLE>
<LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../../stylesheet.css" TITLE="Style">
</HEAD>
<SCRIPT>
function asd()
{
parent.document.title="USMUtils (AdventNet)";
}
</SCRIPT>
<BODY BGCOLOR="white" onload="asd();">

<!-- ========== START OF NAVBAR ========== -->
<A NAME="navbar_top"><!-- --></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0">
<TR>
<TD COLSPAN=3 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../../../com/adventnet/snmp/snmp2/usm/USMUserTable.html"><B>PREV CLASS</B></A>&nbsp;
&nbsp;NEXT CLASS</FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../../index.html" TARGET="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="USMUtils.html" TARGET="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;
<SCRIPT>
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
<A HREF="../../../../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>
</NOSCRIPT>
</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;CONSTR&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;CONSTR&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<!-- =========== END OF NAVBAR =========== -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
<FONT SIZE="-1">
com.adventnet.snmp.snmp2.usm</FONT>
<BR>
Class  USMUtils</H2>
<PRE>
java.lang.Object
  |
  +--<B>com.adventnet.snmp.snmp2.usm.USMUtils</B>
</PRE>
<HR>
<DL>
<DT>public class <B>USMUtils</B><DT>extends java.lang.Object</DL>

<P>
This class provides general USM related methods. All the methods 
 in this class are static. There is no need to instantiate this class.
 The methods include password to key conversion, 
 digest authentication keyChange routines. The init_v3_params provide
 a simple interface to set up a user configuration for communicating 
 with a v3 entity.
<P>

<P>
<HR>

<P>
<!-- ======== NESTED CLASS SUMMARY ======== -->


<!-- =========== FIELD SUMMARY =========== -->


<!-- ======== CONSTRUCTOR SUMMARY ======== -->


<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Method Summary</B></FONT></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;byte[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../com/adventnet/snmp/snmp2/usm/USMUtils.html#getDigest(int, byte[], byte[])">getDigest</A></B>(int&nbsp;authProtocol,
          byte[]&nbsp;authKey,
          byte[]&nbsp;data)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the USMUserEntry.MD5_AUTH or USMUserEntry.SHA_AUTH Digest.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.security.MessageDigest</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../com/adventnet/snmp/snmp2/usm/USMUtils.html#getDigestImpl(int)">getDigestImpl</A></B>(int&nbsp;algorithm)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the MessageDigest Implementation.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../com/adventnet/snmp/snmp2/usm/USMUtils.html#getHashLength(int)">getHashLength</A></B>(int&nbsp;protocol)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the length of the hash associated with the protocol.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;byte[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../com/adventnet/snmp/snmp2/usm/USMUtils.html#getKey(int, boolean, int, int, byte[], byte[], byte[])">getKey</A></B>(int&nbsp;authProtocol,
       boolean&nbsp;isFixedLen,
       int&nbsp;keyLength,
       int&nbsp;hashLength,
       byte[]&nbsp;keyChange,
       byte[]&nbsp;keyOld,
       byte[]&nbsp;random)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gives the new key corresponding to the keyChange value provided</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.Object</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../com/adventnet/snmp/snmp2/usm/USMUtils.html#getKey(java.lang.String, int, byte[])">getKey</A></B>(java.lang.String&nbsp;name,
       int&nbsp;port,
       byte[]&nbsp;userName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Retrieves the Hash key associated with the given host, 
 port and userName.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;byte[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../com/adventnet/snmp/snmp2/usm/USMUtils.html#getKeyChange(int, boolean, int, int, byte[], byte[], byte[])">getKeyChange</A></B>(int&nbsp;authProtocol,
             boolean&nbsp;isFixedLen,
             int&nbsp;keyLength,
             int&nbsp;hashLength,
             byte[]&nbsp;keyNew,
             byte[]&nbsp;keyOld,
             byte[]&nbsp;random)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the keyChange value required for a key change operation.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../com/adventnet/snmp/snmp2/usm/USMUtils.html#getKeyLength(int)">getKeyLength</A></B>(int&nbsp;protocol)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the key Length associated with the protocol</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../com/adventnet/snmp/snmp2/usm/USMUtils.html#init_v3_parameters(java.lang.String, byte[], int, java.lang.String, java.lang.String, com.adventnet.snmp.snmp2.ProtocolOptions, com.adventnet.snmp.snmp2.SnmpSession, boolean)">init_v3_parameters</A></B>(java.lang.String&nbsp;userName,
                   byte[]&nbsp;engineID,
                   int&nbsp;authProtocol,
                   java.lang.String&nbsp;authPassword,
                   java.lang.String&nbsp;privPassword,
                   <A HREF="../../../../../com/adventnet/snmp/snmp2/ProtocolOptions.html">ProtocolOptions</A>&nbsp;po,
                   <A HREF="../../../../../com/adventnet/snmp/snmp2/SnmpSession.html">SnmpSession</A>&nbsp;session,
                   boolean&nbsp;validateUser)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A comprehensive initialisation routine that creates new SNMPv3 user
 entries and performs time synchronization.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../com/adventnet/snmp/snmp2/usm/USMUtils.html#init_v3_parameters(java.lang.String, byte[], int, java.lang.String, java.lang.String, com.adventnet.snmp.snmp2.ProtocolOptions, com.adventnet.snmp.snmp2.SnmpSession, boolean, int)">init_v3_parameters</A></B>(java.lang.String&nbsp;userName,
                   byte[]&nbsp;engineID,
                   int&nbsp;authProtocol,
                   java.lang.String&nbsp;authPassword,
                   java.lang.String&nbsp;privPassword,
                   <A HREF="../../../../../com/adventnet/snmp/snmp2/ProtocolOptions.html">ProtocolOptions</A>&nbsp;po,
                   <A HREF="../../../../../com/adventnet/snmp/snmp2/SnmpSession.html">SnmpSession</A>&nbsp;session,
                   boolean&nbsp;validateUser,
                   int&nbsp;privProtocol)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A comprehensive initialisation routine that creates new SNMPv3 user
 entries and performs time synchronization.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../com/adventnet/snmp/snmp2/usm/USMUtils.html#init_v3_parameters(java.lang.String, int, java.lang.String, java.lang.String, java.lang.String, int, com.adventnet.snmp.snmp2.SnmpSession)">init_v3_parameters</A></B>(java.lang.String&nbsp;userName,
                   int&nbsp;authProtocol,
                   java.lang.String&nbsp;authPassword,
                   java.lang.String&nbsp;privPassword,
                   java.lang.String&nbsp;targetHost,
                   int&nbsp;port,
                   <A HREF="../../../../../com/adventnet/snmp/snmp2/SnmpSession.html">SnmpSession</A>&nbsp;session)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A comprehensive initialization routine that creates new SnmpV3
 entities and user entries and performs discovery and time 
 synchronization.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../com/adventnet/snmp/snmp2/usm/USMUtils.html#init_v3_parameters(java.lang.String, int, java.lang.String, java.lang.String, java.lang.String, com.adventnet.snmp.snmp2.SnmpSession)">init_v3_parameters</A></B>(java.lang.String&nbsp;userName,
                   int&nbsp;authProtocol,
                   java.lang.String&nbsp;authPassword,
                   java.lang.String&nbsp;privPassword,
                   java.lang.String&nbsp;engineName,
                   <A HREF="../../../../../com/adventnet/snmp/snmp2/SnmpSession.html">SnmpSession</A>&nbsp;session)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A comprehensive initialization routine that creates new SnmpV3 entities
 and user entries and performs discovery and time synchronization.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../com/adventnet/snmp/snmp2/usm/USMUtils.html#init_v3_params(java.lang.String, int, java.lang.String, java.lang.String, java.lang.String, int, com.adventnet.snmp.snmp2.SnmpSession)">init_v3_params</A></B>(java.lang.String&nbsp;userName,
               int&nbsp;authProtocol,
               java.lang.String&nbsp;authPassword,
               java.lang.String&nbsp;privPassword,
               java.lang.String&nbsp;targetHost,
               int&nbsp;port,
               <A HREF="../../../../../com/adventnet/snmp/snmp2/SnmpSession.html">SnmpSession</A>&nbsp;session)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>Deprecated.</B>&nbsp;<I>This method doesn't throw any Exception and hence 
 doesn't inform the user, in case of any error.  
 As of AdventNet SNMP API 4 SP2 ( Release 4.0.2 ), replaced by 
 <A HREF="../../../../../com/adventnet/snmp/snmp2/usm/USMUtils.html#init_v3_parameters(java.lang.String, int, java.lang.String, java.lang.String, java.lang.String, int, com.adventnet.snmp.snmp2.SnmpSession)"><CODE>init_v3_parameters(String,int,String,String,String,int,SnmpSession)</CODE></A></I></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../com/adventnet/snmp/snmp2/usm/USMUtils.html#init_v3_params(java.lang.String, int, java.lang.String, java.lang.String, java.lang.String, com.adventnet.snmp.snmp2.SnmpSession)">init_v3_params</A></B>(java.lang.String&nbsp;userName,
               int&nbsp;authProtocol,
               java.lang.String&nbsp;authPassword,
               java.lang.String&nbsp;privPassword,
               java.lang.String&nbsp;engineName,
               <A HREF="../../../../../com/adventnet/snmp/snmp2/SnmpSession.html">SnmpSession</A>&nbsp;session)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>Deprecated.</B>&nbsp;<I>This method doesn't throw any Exception and hence 
 doesn't inform the user, in case of any error. 
 As of AdventNet SNMP API 4 SP2 ( Release 4.0.2 ), replaced by 
 <A HREF="../../../../../com/adventnet/snmp/snmp2/usm/USMUtils.html#init_v3_parameters(java.lang.String, int, java.lang.String, java.lang.String, java.lang.String, com.adventnet.snmp.snmp2.SnmpSession)"><CODE>init_v3_parameters(String,int,String,String,String,SnmpSession)</CODE></A></I></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;byte[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../com/adventnet/snmp/snmp2/usm/USMUtils.html#password_to_key(int, byte[], int, byte[])">password_to_key</A></B>(int&nbsp;authProtocol,
                byte[]&nbsp;password,
                int&nbsp;passwordlen,
                byte[]&nbsp;id)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>Deprecated.</B>&nbsp;<I>This method cannot be used to generate localized privacy key
 if the privacy protocol is other than CBC_DES and CFB_AES_128.
 As of AdventNet SNMP API 4 SP5 ( Release 4.0.5 ), replaced by 
 <A HREF="../../../../../com/adventnet/snmp/snmp2/usm/USMUtils.html#password_to_key(int, byte[], int, byte[], int)"><CODE>password_to_key(int, byte[], int, byte[], int)</CODE></A></I></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;byte[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../com/adventnet/snmp/snmp2/usm/USMUtils.html#password_to_key(int, byte[], int, byte[], int)">password_to_key</A></B>(int&nbsp;authProtocol,
                byte[]&nbsp;password,
                int&nbsp;passwordlen,
                byte[]&nbsp;id,
                int&nbsp;privProtocol)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The password to key implementation.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../com/adventnet/snmp/snmp2/usm/USMUtils.html#printOctets(byte[], int)">printOctets</A></B>(byte[]&nbsp;data,
            int&nbsp;length)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Prints the octet data in a more readable form.</TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TD><B>Methods inherited from class java.lang.Object</B></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</CODE></TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ============ FIELD DETAIL =========== -->


<!-- ========= CONSTRUCTOR DETAIL ======== -->


<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=1><FONT SIZE="+2">
<B>Method Detail</B></FONT></TD>
</TR>
</TABLE>

<A NAME="password_to_key(int, byte[], int, byte[])"><!-- --></A><H3>
password_to_key</H3>
<PRE>
public static byte[] <B>password_to_key</B>(int&nbsp;authProtocol,
                                     byte[]&nbsp;password,
                                     int&nbsp;passwordlen,
                                     byte[]&nbsp;id)</PRE>
<DL>
<DD><B>Deprecated.</B>&nbsp;<I>This method cannot be used to generate localized privacy key
 if the privacy protocol is other than CBC_DES and CFB_AES_128.
 As of AdventNet SNMP API 4 SP5 ( Release 4.0.5 ), replaced by 
 <A HREF="../../../../../com/adventnet/snmp/snmp2/usm/USMUtils.html#password_to_key(int, byte[], int, byte[], int)"><CODE>password_to_key(int, byte[], int, byte[], int)</CODE></A></I>
<P>
<DD>The password to key implementation. Localizes the password. 
 Supports only USMUserEntry.MD5_AUTH and USMUserEntry.SHA_AUTH. 
 Override this to support additional protocols.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>authProtocol</CODE> - The authentication protocol. Right now only
 MD5 and SHA is supported.<DD><CODE>password</CODE> - The password to be used for converting to the 
 localized key.<DD><CODE>passwordlen</CODE> - The length of the password.<DD><CODE>id</CODE> - The engineID to be used for converting to the localized key.
<DT><B>Returns:</B><DD>The localized key.</DL>
</DD>
</DL>
<HR>

<A NAME="password_to_key(int, byte[], int, byte[], int)"><!-- --></A><H3>
password_to_key</H3>
<PRE>
public static byte[] <B>password_to_key</B>(int&nbsp;authProtocol,
                                     byte[]&nbsp;password,
                                     int&nbsp;passwordlen,
                                     byte[]&nbsp;id,
                                     int&nbsp;privProtocol)</PRE>
<DL>
<DD>The password to key implementation. Localizes the password. 
 Supports only USMUserEntry.MD5_AUTH and USMUserEntry.SHA_AUTH. 
 Override this to support additional protocols.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>authProtocol</CODE> - The authentication protocol. Right now only
 MD5 and SHA are supported.<DD><CODE>password</CODE> - The password to be used for converting to the 
 localized key.<DD><CODE>passwordlen</CODE> - The length of the password.<DD><CODE>id</CODE> - The engineID to be used for converting to the localized key.<DD><CODE>privProtocol</CODE> - The privacy protocol. Should be one of the constants,
 CBC_DES, CFB_AES_128, CFB_AES_192, CFB_AES_256, CBC_3DES or NO_PRIV, defined in USMUserEntry.
 This should be USMUserEntry.NO_PRIV to generate the localized authKey.
<DT><B>Returns:</B><DD>The localized key.</DL>
</DD>
</DL>
<HR>

<A NAME="getDigestImpl(int)"><!-- --></A><H3>
getDigestImpl</H3>
<PRE>
public static java.security.MessageDigest <B>getDigestImpl</B>(int&nbsp;algorithm)
                                                 throws java.security.NoSuchAlgorithmException</PRE>
<DL>
<DD>Returns the MessageDigest Implementation. Does caching. 
  Cache continuously increases
  and persists at a max size.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>algorithm</CODE> - The protocol to be used. Right now it is only
  MD5 or SHA.
<DT><B>Returns:</B><DD>The messageDigest.
<DT><B>Throws:</B>
<DD><CODE>java.security.NoSuchAlgorithmException</CODE> - is thrown on error.</DL>
</DD>
</DL>
<HR>

<A NAME="getKeyChange(int, boolean, int, int, byte[], byte[], byte[])"><!-- --></A><H3>
getKeyChange</H3>
<PRE>
public static byte[] <B>getKeyChange</B>(int&nbsp;authProtocol,
                                  boolean&nbsp;isFixedLen,
                                  int&nbsp;keyLength,
                                  int&nbsp;hashLength,
                                  byte[]&nbsp;keyNew,
                                  byte[]&nbsp;keyOld,
                                  byte[]&nbsp;random)</PRE>
<DL>
<DD>Returns the keyChange value required for a key change operation.
  The procedure is long and might be slow. Both the key lengths should match the
  hashLength.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>authProtocol</CODE> - The authentication scheme. USMUserEntry.MD5_AUTH or USMUserEntry.SHA_AUTH<DD><CODE>isFixedLen</CODE> - fixed/variable. Both MD5 & SHA have fixed secret key length.<DD><CODE>keyLength</CODE> - 16 for MD5 and 20 for SHA. This will be 16 for CBC_DES and CFB_AES_128, 24 for CFB_AES_192 and 32 for CFB_AES_256 and CBC_3DES.<DD><CODE>hashLength</CODE> - 16 for MD5 and 20 for SHA. This will be 16 for CBC_DES and CFB_AES_128, 24 for CFB_AES_192 and 32 for CFB_AES_256 and CBC_3DES.</DL>
</DD>
</DL>
<HR>

<A NAME="getKey(int, boolean, int, int, byte[], byte[], byte[])"><!-- --></A><H3>
getKey</H3>
<PRE>
public static byte[] <B>getKey</B>(int&nbsp;authProtocol,
                            boolean&nbsp;isFixedLen,
                            int&nbsp;keyLength,
                            int&nbsp;hashLength,
                            byte[]&nbsp;keyChange,
                            byte[]&nbsp;keyOld,
                            byte[]&nbsp;random)</PRE>
<DL>
<DD>Gives the new key corresponding to the keyChange value provided
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>authProtocol</CODE> - the authentication protocol.<DD><CODE>isFixedLen</CODE> - indicates whether the length of the key is fixed 
                       for the protocol. true for both MD5 and SHA.<DD><CODE>keyLength</CODE> - the length of the key associated with this protocol.<DD><CODE>hashLength</CODE> - the length of the hash associated with the protocol.<DD><CODE>keyChange</CODE> - the key change value.<DD><CODE>keyOld</CODE> - the original key value.
<DT><B>Returns:</B><DD>the new key.</DL>
</DD>
</DL>
<HR>

<A NAME="printOctets(byte[], int)"><!-- --></A><H3>
printOctets</H3>
<PRE>
public static java.lang.String <B>printOctets</B>(byte[]&nbsp;data,
                                           int&nbsp;length)</PRE>
<DL>
<DD>Prints the octet data in a more readable form. The data is printed in
 the hex format. The input parameter is a byte array of octet data.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>data</CODE> - the byte array representing the data to be printed.<DD><CODE>length</CODE> - the number of bytes of data to be printed in hex format.
<DT><B>Returns:</B><DD>A String which contains the data in hex.</DL>
</DD>
</DL>
<HR>

<A NAME="getDigest(int, byte[], byte[])"><!-- --></A><H3>
getDigest</H3>
<PRE>
public static byte[] <B>getDigest</B>(int&nbsp;authProtocol,
                               byte[]&nbsp;authKey,
                               byte[]&nbsp;data)</PRE>
<DL>
<DD>Returns the USMUserEntry.MD5_AUTH or USMUserEntry.SHA_AUTH Digest.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>authProtocol</CODE> - The authentication protocol. Right now only MD5
 and SHA is supported.<DD><CODE>authKey</CODE> - The localized authentication key.<DD><CODE>data</CODE> - The pdu data over which the digest is to be computed.
<DT><B>Returns:</B><DD>The computed digest.</DL>
</DD>
</DL>
<HR>

<A NAME="getKeyLength(int)"><!-- --></A><H3>
getKeyLength</H3>
<PRE>
public static int <B>getKeyLength</B>(int&nbsp;protocol)</PRE>
<DL>
<DD>Returns the key Length associated with the protocol
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getHashLength(int)"><!-- --></A><H3>
getHashLength</H3>
<PRE>
public static int <B>getHashLength</B>(int&nbsp;protocol)</PRE>
<DL>
<DD>Returns the length of the hash associated with the protocol.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="init_v3_params(java.lang.String, int, java.lang.String, java.lang.String, java.lang.String, int, com.adventnet.snmp.snmp2.SnmpSession)"><!-- --></A><H3>
init_v3_params</H3>
<PRE>
public static void <B>init_v3_params</B>(java.lang.String&nbsp;userName,
                                  int&nbsp;authProtocol,
                                  java.lang.String&nbsp;authPassword,
                                  java.lang.String&nbsp;privPassword,
                                  java.lang.String&nbsp;targetHost,
                                  int&nbsp;port,
                                  <A HREF="../../../../../com/adventnet/snmp/snmp2/SnmpSession.html">SnmpSession</A>&nbsp;session)</PRE>
<DL>
<DD><B>Deprecated.</B>&nbsp;<I>This method doesn't throw any Exception and hence 
 doesn't inform the user, in case of any error.  
 As of AdventNet SNMP API 4 SP2 ( Release 4.0.2 ), replaced by 
 <A HREF="../../../../../com/adventnet/snmp/snmp2/usm/USMUtils.html#init_v3_parameters(java.lang.String, int, java.lang.String, java.lang.String, java.lang.String, int, com.adventnet.snmp.snmp2.SnmpSession)"><CODE>init_v3_parameters(String,int,String,String,String,int,SnmpSession)</CODE></A></I>
<P>
<DD>A comprehensive initialization routine that creates new SnmpV3
 entities and user entries and performs discovery and time 
 synchronization. The method requires an open SnmpSession instance. 
 This method creates a new SnmpV3 entity i.e., SnmpEngineEntry, performs
 an engineID discovery, creates a new USMUserEnrty for a user, on whose
 behalf the SNMP requests will be made. This also performs the 
 timeSynchronization, provided that the user entry is authenticated. 
 The newely created SnmpEngineEntry and USMUserEntry are populated in the 
 SnmpEngineTable and in the USMUserTable respectively. This method uses
 the passwords to convert into localized private key.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>userName</CODE> - The string representing the SnmpV3 principal.<DD><CODE>authProtocol</CODE> - The authentication protocol. Should be one of 
 the constants, MD5_AUTH, SHA_AUTH or NO_AUTH. These constants are
 defined in USMUserEntry.<DD><CODE>authPassword</CODE> - The authentication password, which is converted 
 to a localized key.<DD><CODE>privPassword</CODE> - The privacy password, which is converted into a
 localized private key. The only supported  protocol is CBC_DES.<DD><CODE>targetHost</CODE> - The hostName of the SNMP peer.<DD><CODE>port</CODE> - The port of the SNMP peer.<DD><CODE>session</CODE> - The SnmpSession instance. This should be in an open
 state. The discovery and timeSync messages are sent over this session.</DL>
</DD>
</DL>
<HR>

<A NAME="init_v3_parameters(java.lang.String, int, java.lang.String, java.lang.String, java.lang.String, int, com.adventnet.snmp.snmp2.SnmpSession)"><!-- --></A><H3>
init_v3_parameters</H3>
<PRE>
public static void <B>init_v3_parameters</B>(java.lang.String&nbsp;userName,
                                      int&nbsp;authProtocol,
                                      java.lang.String&nbsp;authPassword,
                                      java.lang.String&nbsp;privPassword,
                                      java.lang.String&nbsp;targetHost,
                                      int&nbsp;port,
                                      <A HREF="../../../../../com/adventnet/snmp/snmp2/SnmpSession.html">SnmpSession</A>&nbsp;session)
                               throws <A HREF="../../../../../com/adventnet/snmp/snmp2/SnmpException.html">SnmpException</A></PRE>
<DL>
<DD>A comprehensive initialization routine that creates new SnmpV3
 entities and user entries and performs discovery and time 
 synchronization. The method requires an open SnmpSession instance. 
 This method creates a new SnmpV3 entity i.e., SnmpEngineEntry, performs
 an engineID discovery, creates a new USMUserEnrty for a user, on whose
 behalf the SNMP requests will be. This also performs the 
 timeSynchronization provided that the user entry is authenticated. 
 The newely created SnmpEngineEntry and USMUserEntry are populated in the 
 SnmpEngineTable and in the USMUserTable respectively. This method uses
 the passwords to convert into a localized private key.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>userName</CODE> - The string representing the SnmpV3 principal.<DD><CODE>authProtocol</CODE> - The authentication protocol. Should be one of 
 the constants, MD5_AUTH, SHA_AUTH or NO_AUTH. These constants are
 defined in USMUserEntry.<DD><CODE>authPassword</CODE> - The authentication password which is converted 
 to a localized key.<DD><CODE>privPassword</CODE> - The privacy password which is converted into a
 localized private key. The only supported  protocol is CBC_DES.<DD><CODE>targetHost</CODE> - The hostName of the SNMP peer.<DD><CODE>port</CODE> - The port of the SNMP peer.<DD><CODE>session</CODE> - The SnmpSession instance. This should be in an open
 state. The discovery and timeSync messages are sent over this session.
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../../com/adventnet/snmp/snmp2/SnmpException.html">SnmpException</A></CODE> - is thrown on error.</DL>
</DD>
</DL>
<HR>

<A NAME="init_v3_parameters(java.lang.String, byte[], int, java.lang.String, java.lang.String, com.adventnet.snmp.snmp2.ProtocolOptions, com.adventnet.snmp.snmp2.SnmpSession, boolean)"><!-- --></A><H3>
init_v3_parameters</H3>
<PRE>
public static void <B>init_v3_parameters</B>(java.lang.String&nbsp;userName,
                                      byte[]&nbsp;engineID,
                                      int&nbsp;authProtocol,
                                      java.lang.String&nbsp;authPassword,
                                      java.lang.String&nbsp;privPassword,
                                      <A HREF="../../../../../com/adventnet/snmp/snmp2/ProtocolOptions.html">ProtocolOptions</A>&nbsp;po,
                                      <A HREF="../../../../../com/adventnet/snmp/snmp2/SnmpSession.html">SnmpSession</A>&nbsp;session,
                                      boolean&nbsp;validateUser)
                               throws <A HREF="../../../../../com/adventnet/snmp/snmp2/SnmpException.html">SnmpException</A></PRE>
<DL>
<DD>A comprehensive initialisation routine that creates new SNMPv3 user
 entries and performs time synchronization. Since the engineID is
 accepted as an argument, the SNMPv3 discovery will not be done. Hence an
 SnmpEngineEntry will not be created and added to the SnmpEngineTable.
 If the engineID specified is null or of zero
 length then the method will automatically do a discovery and add an
 SnmpEngineEntry to the SnmpEngineTable.
 This method will do a time
 synchronization and hence will create a new USMUserEntry and will add it
 to the USMUserTable.
 <p>
 After this method is called successfully ( without any exception ) with
 a proper engineID as the argument, then a valid USMUserEntry will be
 added to the USMUserTable and no entry will be added to the
 SnmpEngineTable. Thus whenever an SNMPv3 request is sent for this
 particular agent, this engineID should be specified in the request using
 the setEngineID method.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>userName</CODE> - The string representing the SnmpV3 principal.<DD><CODE>engineID</CODE> - The engineID of the remote SNMPv3 entity ( the agent ).<DD><CODE>authProtocol</CODE> - The authentication protocol. Should be one of
 the constants, MD5_AUTH, SHA_AUTH or NO_AUTH. These constants are
 defined in USMUserEntry.<DD><CODE>authPassword</CODE> - The authentication password which is converted
 to a localized key.<DD><CODE>privPassword</CODE> - The privacy password which is converted into a
 localized private key.<DD><CODE>po</CODE> - The ProtocolOptions instance.<DD><CODE>session</CODE> - The SnmpSession instance. This should be in open
 state. The discovery and timeSync messages are sent over this session.<DD><CODE>validateUser</CODE> - The boolean value. If this value is set to true,
 and if this method is called for an 
 <ul>
 <li>	NO_AUTH_NO_PRIV user, then a get request will be sent to  know 
 if the user exits.
 <li> AUTH_PRIV user, then a get request will be sent to know if the 
 priv password is correct.
 </ul>
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../../com/adventnet/snmp/snmp2/SnmpException.html">SnmpException</A></CODE> - is thrown under the following circumstances.
 <ul>
 <li> In case of Discovery Failure
 <li> In case of Time Synchronization Failure
 <li> If the ProtocolOptions is null
 <li> If the user does not exists on the agent.
 <li> If the authPassword or privPassword is wrong.
 <li> If the EngineID is wrong
 <li> If this Security level is not supported by the agent
 </ul><DT><B>Since:</B><DD>AdventNet SNMP API 4 SP2 ( Release 4.0.2 )</DD>
</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="init_v3_params(java.lang.String, int, java.lang.String, java.lang.String, java.lang.String, com.adventnet.snmp.snmp2.SnmpSession)"><!-- --></A><H3>
init_v3_params</H3>
<PRE>
public static void <B>init_v3_params</B>(java.lang.String&nbsp;userName,
                                  int&nbsp;authProtocol,
                                  java.lang.String&nbsp;authPassword,
                                  java.lang.String&nbsp;privPassword,
                                  java.lang.String&nbsp;engineName,
                                  <A HREF="../../../../../com/adventnet/snmp/snmp2/SnmpSession.html">SnmpSession</A>&nbsp;session)</PRE>
<DL>
<DD><B>Deprecated.</B>&nbsp;<I>This method doesn't throw any Exception and hence 
 doesn't inform the user, in case of any error. 
 As of AdventNet SNMP API 4 SP2 ( Release 4.0.2 ), replaced by 
 <A HREF="../../../../../com/adventnet/snmp/snmp2/usm/USMUtils.html#init_v3_parameters(java.lang.String, int, java.lang.String, java.lang.String, java.lang.String, com.adventnet.snmp.snmp2.SnmpSession)"><CODE>init_v3_parameters(String,int,String,String,String,SnmpSession)</CODE></A></I>
<P>
<DD>A comprehensive initialization routine that creates new SnmpV3
 entities and user entries and performs discovery and time 
 synchronization. The method requires an open SnmpSession instance. 
 This method creates a new SnmpV3 entity i.e SnmpEngineEntry, performs
 an engineID discovery, creates a new USMUserEnrty for a user, on whose
 behalf the SNMP requests will be made. This also performs the 
 timeSynchronization provided that the user entry is authenticated. 
 The newely created SnmpEngineEntry and USMUserEntry are populated in the 
 SnmpEngineTable and in the USMUserTable respectively. This method uses
 the passwords to convert into a localized private key.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>userName</CODE> - The string representing the SnmpV3 principal.<DD><CODE>authProtocol</CODE> - The authentication protocol. Should be one of 
 the constants, MD5_AUTH, SHA_AUTH or NO_AUTH. These constants are
 defined in USMUserEntry.<DD><CODE>authPassword</CODE> - The authentication password which is converted 
 to a localized key.<DD><CODE>privPassword</CODE> - The privacy password which is converted into a
 localized private key. The only supported  protocol is CBC_DES.<DD><CODE>engineName</CODE> - The string value of the engine entry.<DD><CODE>session</CODE> - The SnmpSession instance. This should be in an open
 state. The discovery and timeSync messages are sent over this session.</DL>
</DD>
</DL>
<HR>

<A NAME="init_v3_parameters(java.lang.String, int, java.lang.String, java.lang.String, java.lang.String, com.adventnet.snmp.snmp2.SnmpSession)"><!-- --></A><H3>
init_v3_parameters</H3>
<PRE>
public static void <B>init_v3_parameters</B>(java.lang.String&nbsp;userName,
                                      int&nbsp;authProtocol,
                                      java.lang.String&nbsp;authPassword,
                                      java.lang.String&nbsp;privPassword,
                                      java.lang.String&nbsp;engineName,
                                      <A HREF="../../../../../com/adventnet/snmp/snmp2/SnmpSession.html">SnmpSession</A>&nbsp;session)
                               throws <A HREF="../../../../../com/adventnet/snmp/snmp2/SnmpException.html">SnmpException</A></PRE>
<DL>
<DD>A comprehensive initialization routine that creates new SnmpV3 entities
 and user entries and performs discovery and time synchronization. The
 method requires an open SnmpSession instance.  This method creates a new
 SnmpV3 entity i.e., SnmpEngineEntry, performs an engineID discovery,
 creates a new USMUserEnrty for a user, on whose behalf the SNMP requests
 will be made. This also performs the timeSynchronization provided that
 the user entry is authenticated. The newely created SnmpEngineEntry and
 USMUserEntry are populated in the SnmpEngineTable and in the
 USMUserTable respectively. This method uses the passwords to convert
 into a localized private key.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>userName</CODE> - The string representing the SnmpV3 principal.<DD><CODE>authProtocol</CODE> - The authentication protocol. Should be one of the constants, MD5_AUTH, SHA_AUTH or NO_AUTH.
 These constants are defined in USMUserEntry.<DD><CODE>authPassword</CODE> - The authentication password which is converted to a localized key.<DD><CODE>privPassword</CODE> - The privacy password which is converted into a localized privacy key.
 The only supported protocol is CBC_DES.<DD><CODE>engineName</CODE> - The string value of the engine entry.<DD><CODE>session</CODE> - The SnmpSession instance. This should be in an open state.
 The discovery and timeSync messages are sent over this session.
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../../com/adventnet/snmp/snmp2/SnmpException.html">SnmpException</A></CODE> - is thrown on error.</DL>
</DD>
</DL>
<HR>

<A NAME="getKey(java.lang.String, int, byte[])"><!-- --></A><H3>
getKey</H3>
<PRE>
public static java.lang.Object <B>getKey</B>(java.lang.String&nbsp;name,
                                      int&nbsp;port,
                                      byte[]&nbsp;userName)</PRE>
<DL>
<DD>Retrieves the Hash key associated with the given host, 
 port and userName. This method can be used when a user 
 needs to have a configuration table which contains only 
 the security parameters for agents in the case of V3 database.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - hostName or engineName for UDP/IP or Independent Transport 
				Protocol respectively.<DD><CODE>port</CODE> - the remotePort. -1 in the case of Independent Transport Protocol.<DD><CODE>userName</CODE> - the UserName set in the case of v3.</DL>
</DD>
</DL>
<HR>

<A NAME="init_v3_parameters(java.lang.String, byte[], int, java.lang.String, java.lang.String, com.adventnet.snmp.snmp2.ProtocolOptions, com.adventnet.snmp.snmp2.SnmpSession, boolean, int)"><!-- --></A><H3>
init_v3_parameters</H3>
<PRE>
public static void <B>init_v3_parameters</B>(java.lang.String&nbsp;userName,
                                      byte[]&nbsp;engineID,
                                      int&nbsp;authProtocol,
                                      java.lang.String&nbsp;authPassword,
                                      java.lang.String&nbsp;privPassword,
                                      <A HREF="../../../../../com/adventnet/snmp/snmp2/ProtocolOptions.html">ProtocolOptions</A>&nbsp;po,
                                      <A HREF="../../../../../com/adventnet/snmp/snmp2/SnmpSession.html">SnmpSession</A>&nbsp;session,
                                      boolean&nbsp;validateUser,
                                      int&nbsp;privProtocol)
                               throws <A HREF="../../../../../com/adventnet/snmp/snmp2/SnmpException.html">SnmpException</A></PRE>
<DL>
<DD>A comprehensive initialisation routine that creates new SNMPv3 user
 entries and performs time synchronization. Since the engineID is
 accepted as an argument, the SNMPv3 discovery will not be done. Hence an
 SnmpEngineEntry will not be created and added to the SnmpEngineTable. If
 the engineID specified is null or of zero
 length, then the method will automatically do a discovery and add an
 SnmpEngineEntry to the SnmpEngineTable.
 This method will do a time
 synchronization and hence will create a new USMUserEntry and will add it
 to the USMUserTable.
 <p>
 After this method is called successfully ( without any exception ) with
 a proper engineID as the argument, then a valid USMUserEntry will be
 present in the USMUserTable and no entry will be added to the
 SnmpEngineTable. Thus whenever an SNMPv3 request is sent for this
 particular agent, this engineID should be specified in the request using
 the setEngineID method.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>userName</CODE> - The string representing the SnmpV3 principal.<DD><CODE>engineID</CODE> - The engineID of the remote SNMPv3 entity ( the agent ).<DD><CODE>authProtocol</CODE> - The authentication protocol. Should be one of
 the constants, MD5_AUTH, SHA_AUTH or NO_AUTH. These constants are
 defined in USMUserEntry.<DD><CODE>authPassword</CODE> - The authentication password which is converted
 to a localized key.<DD><CODE>privPassword</CODE> - The privacy password which is converted into a
 localized private key.<DD><CODE>po</CODE> - The ProtocolOptions instance<DD><CODE>session</CODE> - The SnmpSession instance. This should be in open state.
 The discovery and timeSync messages are sent over this session.<DD><CODE>validateUser</CODE> - The boolean value. If this value is set to true,
 and if this method is called for an 
 <ul>
 <li>	NO_AUTH_NO_PRIV user, then a get request will be sent to  know 
 if the user exits.
 <li> AUTH_PRIV user, then a get request will be sent to know if the 
 priv password is correct.
 </ul><DD><CODE>privProtocol</CODE> - The PrivProtocol value. Should be one of the constants,
 CBC_DES, CFB_AES_128, CFB_AES_192, CFB_AES_256, CBC_3DES or NO_PRIV, defined in USMUserEntry.
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../../com/adventnet/snmp/snmp2/SnmpException.html">SnmpException</A></CODE> - is thrown on error.<DT><B>Since:</B><DD>AdventNet SNMP API 4 SP4 ( Release 4.0.4 )</DD>
</DD>
</DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>

<!-- ========== START OF NAVBAR ========== -->
<A NAME="navbar_bottom"><!-- --></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0">
<TR>
<TD COLSPAN=3 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../../../com/adventnet/snmp/snmp2/usm/USMUserTable.html"><B>PREV CLASS</B></A>&nbsp;
&nbsp;NEXT CLASS</FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../../index.html" TARGET="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="USMUtils.html" TARGET="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;
<SCRIPT>
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
<A HREF="../../../../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>
</NOSCRIPT>
</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;CONSTR&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;CONSTR&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<!-- =========== END OF NAVBAR =========== -->

<HR>
Copyright (c)AdventNet Inc., 1996-2006
</BODY>
</HTML>
