<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN""http://www.w3.org/TR/REC-html40/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc on Tue Nov 07 19:59:02 IST 2006 -->
<TITLE>
SnmpSession (AdventNet)
</TITLE>
<LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../stylesheet.css" TITLE="Style">
</HEAD>
<SCRIPT>
function asd()
{
parent.document.title="SnmpSession (AdventNet)";
}
</SCRIPT>
<BODY BGCOLOR="white" onload="asd();">

<!-- ========== START OF NAVBAR ========== -->
<A NAME="navbar_top"><!-- --></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0">
<TR>
<TD COLSPAN=3 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpString.html"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../index.html" TARGET="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="SnmpSession.html" TARGET="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;
<SCRIPT>
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
<A HREF="../../../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>
</NOSCRIPT>
</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<!-- =========== END OF NAVBAR =========== -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
<FONT SIZE="-1">
com.adventnet.snmp.snmp2</FONT>
<BR>
Class  SnmpSession</H2>
<PRE>
java.lang.Object
  |
  +--java.lang.Thread
        |
        +--<B>com.adventnet.snmp.snmp2.SnmpSession</B>
</PRE>
<DL>
<DT><B>All Implemented Interfaces:</B> <DD>java.lang.Runnable, java.io.Serializable</DD>
</DL>
<HR>
<DL>
<DT>public class <B>SnmpSession</B><DT>extends java.lang.Thread<DT>implements java.io.Serializable</DL>

<P>
SnmpSession is the basic communication class for performing any SNMP
 operations. This class extends "java.lang.Thread". This thread is the
 receiver thread of AdventNet SNMP API stack. This thread receives packets,
 decodes them and form SnmpPDU objects.

 <p>
 This class is thread safe. That is, a single instance of SnmpSession can
 be used simultaneously by a large number of threads to do SNMP operations.
 So there is really less need to instantiate a number of SnmpSession objects.

 <p>
 Some of the important features that this class has are:
 <p>
 The Asynchronous way of sending SNMP requests. The method "send(SnmpPDU)"
 can be used to send such asynchronous requests to the desired host/port. To
 receive the response, the SnmpClient interface should be implemented and add
 it using the method "addSnmpClientWithID". This method returns a id, which
 can be set on the SnmpPDU object before sending a request. By doing this,
 only that particular client will be called with the response, otherwise all
 the clients that has been added to this SnmpSession will be informed with
 the response.

 <p>
 The Synchronous way of sending SNMP requests. The method
 "syncSend(SnmpPDU)" can be used for this purpose. This method waits till the
 response arrives or till timeout.
 
 <p>
 Any SnmpTransportProvider implementation can be plugged into this class.
 The interface that should be used for this implementation is
 SnmpTransportProvider. By default the underlying protocol used is UDP.
 AdventNet SNMP API stack also provides implementation for TCP. The method
 "setTransportProvider(String)" can be used to set the implementation class
 name. 

 <p>
 Any SNMP network management Applet can be written using this class. 

 <p>
 While performing asynchronous SNMP operations, a delay between packets
 that are sent into the network can be achieved by using the method
 "setTimeToWait(int)". This will ensure that each packet is sent out with the
 specified delay.

 <p>
 Every request that is sent out will wait for the response till a
 specified timeout value. The default value of this timeout is 5 seconds. In
 case of retries, the timeout value increase exponentially. This timeout
 policy for retries can be plugged in by using the abstract class
 TimeoutPolicy. The "setTimeoutPolicy(TimeoutPolicy)" method can be used to
 achieve this.

 <p>
 Every response received will be given to the "callback" method of
 SnmpClient. Further processing will be done in the "callback" method. During
 this processing time some packets may get dropped. To minimize this packet
 loss, a separate processing thread called the "CALLBACK" thread is provided.
 This thread can be started by calling the method
 "setCallbackthread(boolean)" with the "true" value.

 <p>
 A sample code snippet of how to create a SnmpSession object.
 <br>
 <i>
 SnmpAPI api = new SnmpAPI();
 <br>
 SnmpSession session = new SnmpSession(api);
 <br>
 session.open();
 <p>
 SnmpPDU pdu = new SnmpPDU();
 <br>
 pdu.setProtocolOptions(new UDPProtocolOptions("localhost"));
 <br>
 pdu.setCommand(SnmpAPI.GET_REQ_MSG);
 <br>
 pdu.addNull(new SnmpOID(".1.3.6.1.2.1.1.1.0"));
 <br>
 SnmpPDU response_pdu = session.syncSend(pdu);
 <br>
 if(response_pdu == null)
 <br>
 {
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println("The Request has timed out.");
 <br>
 }
 <br>
 else
 <br>
 {
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(response_pdu.printVarBinds());
 <br>
 }
 </i>
 <p>
 The output for the above program will be 
 <br>
 Object ID: .1.3.6.1.2.1.1.1.0
 <br>
 STRING: Linux localhost 2.4.2-2 #1 Sun Apr 8 20:41:30 EDT 2001 i686


 </pre>
<P>

<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html"><CODE>SnmpPDU</CODE></A>, 
<A HREF="../../../../serialized-form.html" TARGET="com.adventnet.snmp.snmp2.SnmpSession">Serialized Form</A></DL>
<HR>

<P>
<!-- ======== NESTED CLASS SUMMARY ======== -->


<!-- =========== FIELD SUMMARY =========== -->

<A NAME="field_summary"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Field Summary</B></FONT></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#IP">IP</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>Deprecated.</B>&nbsp;<I>Since all the SNMP communications go through
 a single transport provider, this is not needed.</I></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#TRANSPORT_PROVIDER">TRANSPORT_PROVIDER</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>Deprecated.</B>&nbsp;<I>Since all the SNMP communications go through
 a single transport provider, this is not needed.</I></TD>
</TR>
</TABLE>
&nbsp;<A NAME="fields_inherited_from_class_java.lang.Thread"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TD><B>Fields inherited from class java.lang.Thread</B></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>MAX_PRIORITY, MIN_PRIORITY, NORM_PRIORITY</CODE></TD>
</TR>
</TABLE>
&nbsp;
<!-- ======== CONSTRUCTOR SUMMARY ======== -->

<A NAME="constructor_summary"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Constructor Summary</B></FONT></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#SnmpSession(com.adventnet.snmp.snmp2.SnmpAPI)">SnmpSession</A></B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpAPI.html">SnmpAPI</A>&nbsp;api)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a new SnmpSession object by taking the SnmpAPI instance.</TD>
</TR>
</TABLE>
&nbsp;
<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Method Summary</B></FONT></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#addSnmpClient(com.adventnet.snmp.snmp2.SnmpClient)">addSnmpClient</A></B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpClient.html">SnmpClient</A>&nbsp;client)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subscribe for callbacks.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#addSnmpClientWithID(com.adventnet.snmp.snmp2.SnmpClient)">addSnmpClientWithID</A></B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpClient.html">SnmpClient</A>&nbsp;client)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subscribes for callbacks.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#checkResponses()">checkResponses</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Checks for any outstanding responses that are still in
 the receive queue.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#checkTimeout(int)">checkTimeout</A></B>(int&nbsp;reqid)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns true if the reqid is in the list of this session's timed out requests,
 and removes it from the list.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#close()">close</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Close Snmp Session and stop receiver thread.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpVar.html">SnmpVar</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#get(com.adventnet.snmp.snmp2.SnmpOID)">get</A></B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpOID.html">SnmpOID</A>&nbsp;oid)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>Deprecated.</B>&nbsp;<I>use the following instead
 <p>
 <i>
 SnmpPDU pdu = new SnmpPDU();
 <br>
 pdu.addNull(oid);
 <br>
 pdu.setCommand(SnmpAPI.GET_REQ_MSG);
 <br>
 SnmpPDU response_pdu = snmpSession.syncSend(pdu);
 <br>
 <br>
 SnmpVar var = null;
 <br>
 if(response_pdu != null)
 <br>
 {
 <br>
 		var = response_pdu.getVariable(0);
 <br>
 }
 <br>
 </i></I></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpVar.html">SnmpVar</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#get(java.lang.String)">get</A></B>(java.lang.String&nbsp;oidString)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>Deprecated.</B>&nbsp;<I>use the following instead
 <p>
 <i>
 SnmpPDU pdu = new SnmpPDU();
 <br>
 pdu.addNull(new SnmpOID(oidString));
 <br>
 pdu.setCommand(SnmpAPI.GET_REQ_MSG);
 <br>
 SnmpPDU response_pdu = snmpSession.syncSend(pdu);
 <br>
 <br>
 SnmpVar var = null;
 <br>
 if(response_pdu != null)
 <br>
 {
 <br>
 		var = response_pdu.getVariable(0);
 <br>
 }
 <br>
 </i></I></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#getCommunity()">getCommunity</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets community for outgoing SNMPv1 and SNMPv2c requests.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../com/adventnet/snmp/snmp2/ConnectionListener.html">ConnectionListener</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#getConnectionListener()">getConnectionListener</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;To get reference to the ConnectionListener object.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;byte[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#getContextName()">getContextName</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the context name associated with the SNMPv3 message.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#getLocalAddresses()">getLocalAddresses</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>Deprecated.</B>&nbsp;<I>use the following instead.
 <br>
 <i>
 UDPProtocolOptions opt = (UDPProtocolOptions)snmpSession.getProtocolOptions();
 <br>
 String[] local_address = opt.getLocalAddresses();
 </i></I></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#getLocalPort()">getLocalPort</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>Deprecated.</B>&nbsp;<I>use the following instead.
 <p>
 <i>
 UDPProtocolOptions opt = (UDPProtocolOptions)snmpSession.getProtocolOptions();
 <br>
 int local_port = opt.getLocalPort();
 </i></I></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpVar.html">SnmpVar</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#getnext(com.adventnet.snmp.snmp2.SnmpOID)">getnext</A></B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpOID.html">SnmpOID</A>&nbsp;oid)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>Deprecated.</B>&nbsp;<I>use the following instead
 <p>
 <i>
 SnmpPDU pdu = new SnmpPDU();
 <br>
 pdu.addNull(oid);
 <br>
 pdu.setCommand(SnmpAPI.GETNEXT_REQ_MSG);
 <br>
 SnmpPDU response_pdu = snmpSession.syncSend(pdu);
 <br>
 <br>
 SnmpVar var = null;
 <br>
 if(response_pdu != null)
 <br>
 {
 <br>
 		var = response_pdu.getVariable(0);
 <br>
 }
 <br>
 </i></I></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpVar.html">SnmpVar</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#getnext(java.lang.String)">getnext</A></B>(java.lang.String&nbsp;oidString)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>Deprecated.</B>&nbsp;<I>use the following instead
 <p>
 <i>
 SnmpPDU pdu = new SnmpPDU();
 <br>
 pdu.addNull(new SnmpOID(oidString));
 <br>
 pdu.setCommand(SnmpAPI.GETNEXT_REQ_MSG);
 <br>
 SnmpPDU response_pdu = snmpSession.syncSend(pdu);
 <br>
 <br>
 SnmpVar var = null;
 <br>
 if(response_pdu != null)
 <br>
 {
 <br>
 		var = response_pdu.getVariable(0);
 <br>
 }
 <br>
 </i></I></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#getPacketBufferSize()">getPacketBufferSize</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the Datagram Buffer Size used for receiving SNMP packets.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#getPeername()">getPeername</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>Deprecated.</B>&nbsp;<I>use the following instead.
 <i>
 <br>
 UDPProtocolOptions opt = (UDPProtocolOptions)snmpSession.getProtocolOptions();
 opt.getRemoteHost();
 </i></I></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#getProtocol()">getProtocol</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>Deprecated.</B>&nbsp;<I>since all SNMP communications go through only
 a transportProvider, this method is not at all necessary.</I></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../com/adventnet/snmp/snmp2/ProtocolOptions.html">ProtocolOptions</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#getProtocolOptions()">getProtocolOptions</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method will return the ProtocolOptions associated with this
 SnmpSession.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#getReceiveBufferSize()">getReceiveBufferSize</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>Deprecated.</B>&nbsp;<I>instead use the getReceiveBufferSize method
 available in UDPProtocolOptions.</I></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#getRemotePort()">getRemotePort</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>Deprecated.</B>&nbsp;<I>use the following instead.
 <i>
 <p>
 UDPProtocolOptions opt = (UDPProtocolOptions)snmpSession.getProtocolOptions();
 <br>
 opt.getRemotePort();
 </i></I></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#getReport()">getReport</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the status of report flag.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#getRetries()">getRetries</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets number of retries before timeout.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../com/adventnet/snmp/snmp2/SASClient.html">SASClient</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#getSASClient()">getSASClient</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>Deprecated.</B>&nbsp;<I>use the following instead
 <br>
 <i>
 SASProtocolOptions opt = (SASProtocolOptions)snmpSession.getProtocolOptions();
 <br>
 SASClient sasclient = opt.getSASClient();
 </i></I></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#getSASProtocol()">getSASProtocol</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>Deprecated.</B>&nbsp;<I>use the following instead.
 <p>
 <i>
 SASProtocolOptions opt = (SASProtocolOptions)snmpSession.getProtocolOptions();
 <br>
 int sasprotocol = opt.getProtocol();
 </i></I></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;byte</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#getSecLevelForTimeSync()">getSecLevelForTimeSync</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the securitylevel that would be used when doing
 a V3 timeSync for a authPriv user.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.text.SimpleDateFormat</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#getSimpleDateFormat()">getSimpleDateFormat</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the SimpleDateFormat for this class.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpAPI.html">SnmpAPI</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#getSnmpAPI()">getSnmpAPI</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the SnmpAPI reference associated with this SnmpSession.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.util.Vector</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#getSnmpClients()">getSnmpClients</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the clients that have been registered for callbacks or null 
  is returned if no one is registered.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#getSnmpClientsSize()">getSnmpClientsSize</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>Deprecated.</B>&nbsp;<I>use the following instead
 <p>
 <i>
 int snmpClientsSize = (snmpSession.getSnmpClients()).size();
 </i></I></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.util.Hashtable</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#getSnmpClientsWithID()">getSnmpClientsWithID</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the hashtable in which the clientID and the SnmpClient are 
  associated.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#getStartLocalPort()">getStartLocalPort</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>Deprecated.</B>&nbsp;<I>now the "open(Applet)" method will throw an 
 SnmpException if it is unable to connect to the SAServer. When such
 an exception is received, the user should decide whether "open(void)"
 method should be called or not.</I></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#getTimeout()">getTimeout</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the timeout value.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#getTimeToWait()">getTimeToWait</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the inter-packet delay time set on this SnmpSession object.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#getTransportProvider()">getTransportProvider</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method gets the transportProvier classname.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;byte[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#getUserName()">getUserName</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the principal for SNMPv3 messages.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#getVersion()">getVersion</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets snmp version for outgoing SNMP requests.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#getWriteCommunity()">getWriteCommunity</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets writeCommunity for outgoing requests.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#isBroadcastFeatureEnable()">isBroadcastFeatureEnable</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The method returns whether the API has the broadcast feature
 enabled or not.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#isSessionEstablished()">isSessionEstablished</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;To get the status of the connection established using 
 this session instance.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#isSetAutoInformResponse()">isSetAutoInformResponse</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Checks if the automatic response flag for the Inform Request is set.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#isTrapAuthEnable()">isTrapAuthEnable</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets status of Trap Authentication for v3 pdus.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#open()">open</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Opens Snmp Session to communicate with an SNMP peer.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#open(java.applet.Applet)">open</A></B>(java.applet.Applet&nbsp;applet)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>Deprecated.</B>&nbsp;<I>use the following instead
 <p>
 <i>
 SnmpAPI api = new SnmpAPI();
 <br>
 SnmpSession ses = new SnmpSession(api);
 <br>
 SASProtocolOptions opt = new SASProtocolOptions();
 <br>
 opt.setApplet(applet);
 <br>
 ses.setProtocolOptions(opt);
 <br>
 ses.open();
 </i></I></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.util.Hashtable</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#partialSet(com.adventnet.snmp.snmp2.SnmpOID[], com.adventnet.snmp.snmp2.SnmpVar[])">partialSet</A></B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpOID.html">SnmpOID</A>[]&nbsp;oids,
           <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpVar.html">SnmpVar</A>[]&nbsp;vars)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SNMP set request method is for multiple SnmpOID argument.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.util.Hashtable</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#partialSet(com.adventnet.snmp.snmp2.SnmpPDU)">partialSet</A></B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html">SnmpPDU</A>&nbsp;pdu)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SNMP set request method is for multiple SnmpOID argument.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html">SnmpPDU</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#receive(int)">receive</A></B>(int&nbsp;reqid)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Fetches SNMP response PDU, fetches first PDU in response queue,
 if reqid is 0.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#removeAllSnmpClients()">removeAllSnmpClients</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method removes all the SnmpClients that were registered in
 this SnmpSession.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#removeConnectionListener()">removeConnectionListener</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Unsubscribes for ConnectionListener.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#removeSnmpClient(com.adventnet.snmp.snmp2.SnmpClient)">removeSnmpClient</A></B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpClient.html">SnmpClient</A>&nbsp;client)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Unsubscribes for callbacks.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#removeSnmpClientWithID(int)">removeSnmpClientWithID</A></B>(int&nbsp;clientid)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Unsubscribe for callbacks.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#restoreDefaultTimeoutPolicy()">restoreDefaultTimeoutPolicy</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;restores this SnmpSession object to have the default
 TimeoutPolicy.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#run()">run</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The run method starts the receiver thread for this session object.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#send(com.adventnet.snmp.snmp2.SnmpPDU)">send</A></B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html">SnmpPDU</A>&nbsp;pdu)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Send SnmpPDU on the given session after encoding the PDU.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.util.Vector</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#sendNotification(com.adventnet.snmp.snmp2.SnmpPDU)">sendNotification</A></B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html">SnmpPDU</A>&nbsp;pdu)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Authenticates and sends the notification to all the entries that can avail
 of the notification filtering facility.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpVar.html">SnmpVar</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#set(com.adventnet.snmp.snmp2.SnmpOID, com.adventnet.snmp.snmp2.SnmpVar)">set</A></B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpOID.html">SnmpOID</A>&nbsp;oid,
    <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpVar.html">SnmpVar</A>&nbsp;var)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>Deprecated.</B>&nbsp;<I>use the following instead
 <p>
 <i>
 SnmpPDU pdu = new SnmpPDU();
 <br>
 SnmpVarBind varbind = new SnmpVarBind(oid, var);
 <br>
 pdu.addVariableBinding(varbind);
 <br>
 pdu.setCommand(SnmpAPI.SET_REQ_MSG);
 <br>
 SnmpPDU response_pdu = snmpSession.syncSend(pdu);
 <br>
 <br>
 SnmpVar response_var = null;
 <br>
 if(response_pdu != null)
 <br>
 {
 <br>
 		response_var = response_pdu.getVariable(0);
 <br>
 }
 <br>
 </i></I></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpVar.html">SnmpVar</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#set(java.lang.String, java.lang.String, byte)">set</A></B>(java.lang.String&nbsp;oidString,
    java.lang.String&nbsp;setString,
    byte&nbsp;type)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>Deprecated.</B>&nbsp;<I>use the following instead
 <p>
 <i>
 SnmpPDU pdu = new SnmpPDU();
 <br>
 SnmpVar variable = SnmpVar.createVariable(setString, type);
 <br>
 SnmpOID oid = new SnmpOID(oidString);
 <br>
 SnmpVarBind varbind = new SnmpVarBind(oid, variable);
 <br>
 pdu.addVariableBinding(varbind);
 <br>
 pdu.setCommand(SnmpAPI.SET_REQ_MSG);
 <br>
 SnmpPDU response_pdu = snmpSession.syncSend(pdu);
 <br>
 <br>
 SnmpVar var = null;
 <br>
 if(response_pdu != null)
 <br>
 {
 <br>
 		var = response_pdu.getVariable(0);
 <br>
 }
 <br>
 </i></I></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#setAutoInformResponse(boolean)">setAutoInformResponse</A></B>(boolean&nbsp;flag)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the automatic response flag for the Inform Request.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#setBroadcastFeatureEnable(boolean)">setBroadcastFeatureEnable</A></B>(boolean&nbsp;bool)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The method can be used to enable/disable the broadcast feature
 available in the API.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#setCallbackthread(boolean)">setCallbackthread</A></B>(boolean&nbsp;useThread)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets this to true if the user wants the callback to be
 called from a seperate thread.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#setCommunity(java.lang.String)">setCommunity</A></B>(java.lang.String&nbsp;community)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets community for outgoing SNMPv1 and SNMPv2c requests.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#setConnectionListener(com.adventnet.snmp.snmp2.ConnectionListener)">setConnectionListener</A></B>(<A HREF="../../../../com/adventnet/snmp/snmp2/ConnectionListener.html">ConnectionListener</A>&nbsp;connListener)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subscribes for ConnectionListener.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#setContextName(byte[])">setContextName</A></B>(byte[]&nbsp;name)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the context name associated with the SNMPv3 message.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#setLocalAddresses(java.lang.String[])">setLocalAddresses</A></B>(java.lang.String[]&nbsp;local_addrs)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>Deprecated.</B>&nbsp;<I>use the following instead.
 <br>
 <i>
 UDPProtocolOptions opt = (UDPProtocolOptions)snmpSession.getProtocolOptions();
 opt.setLocalAddresses(local_addrs);
 </i></I></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#setLocalPort(int)">setLocalPort</A></B>(int&nbsp;local_port)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>Deprecated.</B>&nbsp;<I>use the following instead.
 <p>
 <i>
 UDPProtocolOptions opt = (UDPProtocolOptions)snmpSession.getProtocolOptions();
 <br>
 opt.setLocalPort(local_port);
 </i></I></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#setPacketBufferSize(int)">setPacketBufferSize</A></B>(int&nbsp;size)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the Datagram Buffer Size used for receiving SNMP packets.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#setPeername(java.lang.String)">setPeername</A></B>(java.lang.String&nbsp;peername)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>Deprecated.</B>&nbsp;<I>use the following instead.
 <i>
 <br>
 UDPProtocolOptions opt = (UDPProtocolOptions)snmpSession.getProtocolOptions();
 opt.setRemoteHost(peername);
 </i></I></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#setProtocol(int)">setProtocol</A></B>(int&nbsp;protocol)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>Deprecated.</B>&nbsp;<I>Since all the SNMP communications go through
 a single transport provider, this is not needed.</I></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#setProtocolOptions(com.adventnet.snmp.snmp2.ProtocolOptions)">setProtocolOptions</A></B>(<A HREF="../../../../com/adventnet/snmp/snmp2/ProtocolOptions.html">ProtocolOptions</A>&nbsp;tParam)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This associates the ProtocolOptions with this SnmpSession.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#setReceiveBufferSize(int)">setReceiveBufferSize</A></B>(int&nbsp;bufferSize)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>Deprecated.</B>&nbsp;<I>instead use the setReceiveBufferSize method
 available in UDPProtocolOptions.</I></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#setRemotePort(int)">setRemotePort</A></B>(int&nbsp;port)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>Deprecated.</B>&nbsp;<I>use the following instead.
 <i>
 <p>
 UDPProtocolOptions opt = (UDPProtocolOptions)snmpSession.getProtocolOptions();
 <br>
 opt.setRemotePort(port);
 </i></I></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#setReport(boolean)">setReport</A></B>(boolean&nbsp;status)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the status of report flag.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#setRetries(int)">setRetries</A></B>(int&nbsp;retries)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets number of retries before timeout.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#setSASProtocol(int)">setSASProtocol</A></B>(int&nbsp;prot)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>Deprecated.</B>&nbsp;<I>use the following instead.
 <p>
 <i>
 SASProtocolOptions opt = new SASProtocolOptions();
 <br>
 opt.setApplet(applet);
 <br>
 opt.setProtocol(SASClient.TCP_PROTOCOL); //or SASClient.HTTP_PROTOCOL
 <br>
 snmpSession.setProtocolOptions(opt);
 <br>
 snmpSession.open();
 </i></I></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#setSecLevelForTimeSync(byte)">setSecLevelForTimeSync</A></B>(byte&nbsp;secLevel)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the securityLevel to use when doing
 a V3 timeSync for a authPriv user.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#setSimpleDateFormat(java.text.SimpleDateFormat)">setSimpleDateFormat</A></B>(java.text.SimpleDateFormat&nbsp;format)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the SimpleDateFormat for this class.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#setSocketParms(int, int)">setSocketParms</A></B>(int&nbsp;socketTimeout,
               int&nbsp;socketDelay)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>Deprecated.</B>&nbsp;<I>since a new transportProvider implementation for
 udp has been added, this method no longer becomes necessary.</I></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#setStartLocalPort(int)">setStartLocalPort</A></B>(int&nbsp;startLocalPort)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>Deprecated.</B>&nbsp;<I>now the "open(Applet)" method will throw an 
 SnmpException if it is unable to connect to the SAServer. When such
 an exception is received, the user should decide whether "open(void)"
 method should be called or not.</I></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#setTimeout(int)">setTimeout</A></B>(int&nbsp;timeout)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the timeout value.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#setTimeoutPolicy(com.adventnet.snmp.snmp2.TimeoutPolicy)">setTimeoutPolicy</A></B>(<A HREF="../../../../com/adventnet/snmp/snmp2/TimeoutPolicy.html">TimeoutPolicy</A>&nbsp;timeoutPolicy)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sets the TimeoutPolicy for this SnmpSession.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#setTimeToWait(int)">setTimeToWait</A></B>(int&nbsp;waitTime)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the inter-packet delay time.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#setTransportProvider(java.lang.String)">setTransportProvider</A></B>(java.lang.String&nbsp;providerClassName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method sets the transportProvider classname, which will
 be used for communication purposes.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#setTrapAuthEnable(boolean)">setTrapAuthEnable</A></B>(boolean&nbsp;isAuth)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Specify whether traps should be authenticated while receiving
 SNMPv3  trap messages.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#setUserName(byte[])">setUserName</A></B>(byte[]&nbsp;name)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the principal for SNMPv3 messages.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#setVersion(int)">setVersion</A></B>(int&nbsp;version)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets snmp version for outgoing requests.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#setWriteCommunity(java.lang.String)">setWriteCommunity</A></B>(java.lang.String&nbsp;writeCommunity)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets writeCommunity for outgoing requests.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html">SnmpPDU</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#syncSend(com.adventnet.snmp.snmp2.SnmpPDU)">syncSend</A></B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html">SnmpPDU</A>&nbsp;pdu)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sends SnmpPDU synchronously - returns response SnmpPDU.</TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.lang.Thread"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TD><B>Methods inherited from class java.lang.Thread</B></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>activeCount, checkAccess, countStackFrames, currentThread, destroy, dumpStack, enumerate, getContextClassLoader, getName, getPriority, getThreadGroup, holdsLock, interrupt, interrupted, isAlive, isDaemon, isInterrupted, join, join, join, resume, setContextClassLoader, setDaemon, setName, setPriority, sleep, sleep, start, stop, stop, suspend, toString, yield</CODE></TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TD><B>Methods inherited from class java.lang.Object</B></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait</CODE></TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ============ FIELD DETAIL =========== -->

<A NAME="field_detail"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=1><FONT SIZE="+2">
<B>Field Detail</B></FONT></TD>
</TR>
</TABLE>

<A NAME="IP"><!-- --></A><H3>
IP</H3>
<PRE>
public static final int <B>IP</B></PRE>
<DL>
<DD><B>Deprecated.</B>&nbsp;<I>Since all the SNMP communications go through
 a single transport provider, this is not needed.</I>
<P>
<DD>Static constant for identifying the IP protocol
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.adventnet.snmp.snmp2.SnmpSession.IP">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="TRANSPORT_PROVIDER"><!-- --></A><H3>
TRANSPORT_PROVIDER</H3>
<PRE>
public static final int <B>TRANSPORT_PROVIDER</B></PRE>
<DL>
<DD><B>Deprecated.</B>&nbsp;<I>Since all the SNMP communications go through
 a single transport provider, this is not needed.</I>
<P>
<DD>Constant for using the transport provider framework
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.adventnet.snmp.snmp2.SnmpSession.TRANSPORT_PROVIDER">Constant Field Values</A></DL>
</DL>

<!-- ========= CONSTRUCTOR DETAIL ======== -->

<A NAME="constructor_detail"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=1><FONT SIZE="+2">
<B>Constructor Detail</B></FONT></TD>
</TR>
</TABLE>

<A NAME="SnmpSession(com.adventnet.snmp.snmp2.SnmpAPI)"><!-- --></A><H3>
SnmpSession</H3>
<PRE>
public <B>SnmpSession</B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpAPI.html">SnmpAPI</A>&nbsp;api)</PRE>
<DL>
<DD>Creates a new SnmpSession object by taking the SnmpAPI instance.
 The SnmpAPI instance is required so that this session registers
 with the SnmpAPI and the SnmpAPI can start monitoring the sessions
 for timeouts and retries.
<P>
<DT><B>Parameters:</B><DD><CODE>api</CODE> - The instance of SnmpAPI</DL>

<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=1><FONT SIZE="+2">
<B>Method Detail</B></FONT></TD>
</TR>
</TABLE>

<A NAME="setBroadcastFeatureEnable(boolean)"><!-- --></A><H3>
setBroadcastFeatureEnable</H3>
<PRE>
public void <B>setBroadcastFeatureEnable</B>(boolean&nbsp;bool)</PRE>
<DL>
<DD>The method can be used to enable/disable the broadcast feature
 available in the API. By default, the API has the
 broadcast feature enabled, and if the user wishes to disable
 this feature, he/she can do so by simply calling this
 method with "false" as value.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>bool</CODE> - the boolean value that is to enable/disable
 the broadcast feature in the API.<DT><B>Since:</B><DD>AdventNet SNMP API 4 SP2 ( Release 4.0.2 )</DD>
</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="isBroadcastFeatureEnable()"><!-- --></A><H3>
isBroadcastFeatureEnable</H3>
<PRE>
public boolean <B>isBroadcastFeatureEnable</B>()</PRE>
<DL>
<DD>The method returns whether the API has the broadcast feature
 enabled or not.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>a boolean, which tells whether the API
 currently has the broadcast feature enabled or not.<DT><B>Since:</B><DD>AdventNet SNMP API 4 SP2 ( Release 4.0.2 )</DD>
</DD>
<DT><B>See Also:</B><DD><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#setBroadcastFeatureEnable(boolean)"><CODE>setBroadcastFeatureEnable(boolean)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setSimpleDateFormat(java.text.SimpleDateFormat)"><!-- --></A><H3>
setSimpleDateFormat</H3>
<PRE>
public void <B>setSimpleDateFormat</B>(java.text.SimpleDateFormat&nbsp;format)</PRE>
<DL>
<DD>Sets the SimpleDateFormat for this class. When the
 debug is on, the time stamp will be printed along with
 the packet dumps. The format of this time stamp can be
 changed using this method.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>format</CODE> - The <a href="http://java.sun.com/j2se/1.4/docs/api/java/text/SimpleDateFormat.html">
 SimpleDateFormat</a> used for printing
 the time stamp.<DT><B>Since:</B><DD>AdventNet SNMP API 4 SP2 ( Release 4.0.2 )</DD>
</DD>
<DT><B>See Also:</B><DD><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#getSimpleDateFormat()"><CODE>getSimpleDateFormat()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getSimpleDateFormat()"><!-- --></A><H3>
getSimpleDateFormat</H3>
<PRE>
public java.text.SimpleDateFormat <B>getSimpleDateFormat</B>()</PRE>
<DL>
<DD>Gets the SimpleDateFormat for this class.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the SimpleDateFormat used by this class. This method will
 return a non-null value, only when
 <br>
 1. The SimpleDateFormat is previously set OR
 <br>
 2. When the debug mode is on and atleast one packet has been printed.<DT><B>Since:</B><DD>AdventNet SNMP API 4 SP2 ( Release 4.0.2 )</DD>
</DD>
<DT><B>See Also:</B><DD><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpSession.html#setSimpleDateFormat(java.text.SimpleDateFormat)"><CODE>setSimpleDateFormat(SimpleDateFormat)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getVersion()"><!-- --></A><H3>
getVersion</H3>
<PRE>
public int <B>getVersion</B>()</PRE>
<DL>
<DD>Gets snmp version for outgoing SNMP requests. 
 When using this SNMPv3 API to build applications, all the 
 SNMPv1, SNMPv2c and SNMPv3 messages can be sent and received 
 using the same session, irrespective of the version set in the 
 session object. The version set in session is used to set the 
 version for outgoing messages on the session, when it is not set 
 in the message itself. For example, if a session version is set 
 to SnmpAPI.SNMP_VERSION_3, and a pdu is sent without setting its 
 version explicitly (the pdu will have the default version of
 SnmpAPI.SNMP_VERSION_1), then an SNMPv3 message is sent to the 
 peer SNMP entity. On the other hand, if the pdu version is set 
 explicitly to SnmpAPI.SNMP_VERSION_2C, an SNMPv2c message will be 
 sent to the peer entity. 
<p>
 It is to be noted that when an application sends an SNMPv1 pdu 
 using a session whose version is set to SNMP_VERSION_3, an SNMPv3
 message is sent to the peer. This problem arises because the
 API uses SNMP_VERSION_1 as the default  pdu version and it could 
 not distinguish between applications leaving the version in pdu 
 to default and setting it explicitly to SNMP_VERSION_1.  
 To circumvent this problem, applications should set session 
 version to SNMP_VERSION_1 and set the pdu version explicitly 
 to SNMP_VERSION_2C or SNMP_VERSION_3 while communicating with 
 v2c and v3 peers.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The version of outgoing SNMP requests.</DL>
</DD>
</DL>
<HR>

<A NAME="setVersion(int)"><!-- --></A><H3>
setVersion</H3>
<PRE>
public void <B>setVersion</B>(int&nbsp;version)</PRE>
<DL>
<DD>Sets snmp version for outgoing requests. 
 When using this SNMPv3 API to build applications, all the 
 SNMPv1, SNMPv2c and SNMPv3 messages can be sent and received 
 using the same session, irrespective of the version set in the 
 session object. The version set in session is used to set the 
 version for outgoing messages on the session, when it is not set 
 in the message itself. For example, if a session version is set 
 to SnmpAPI.SNMP_VERSION_3, and a pdu is sent without setting its 
 version explicitly (the pdu will have the default version of
 SnmpAPI.SNMP_VERSION_1), then an SNMPv3 message is sent to the 
 peer SNMP entity. On the other hand, if the pdu version is set 
 explicitly to SnmpAPI.SNMP_VERSION_2C, an SNMPv2c message will be 
 sent to the peer entity. 
<p>
 It is to be noted that when an application sends an SNMPv1 pdu 
 using a session whose version is set to SNMP_VERSION_3, an SNMPv3
 message is sent to the peer. This problem arises, because the
 API uses SNMP_VERSION_1 as the default  pdu version and it could 
 not distinguish between applications leaving the version in pdu 
 to default and setting it explicitly to SNMP_VERSION_1.  
 To circumvent this problem, applications should set session 
 version to SNMP_VERSION_1 and set the pdu version explicitly 
 to SNMP_VERSION_2C or SNMP_VERSION_3, while communicating with 
 v2c and v3 peers.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>version</CODE> - The version of the outgoing SNMP request.</DL>
</DD>
</DL>
<HR>

<A NAME="getReceiveBufferSize()"><!-- --></A><H3>
getReceiveBufferSize</H3>
<PRE>
public int <B>getReceiveBufferSize</B>()
                         throws java.net.SocketException</PRE>
<DL>
<DD><B>Deprecated.</B>&nbsp;<I>instead use the getReceiveBufferSize method
 available in UDPProtocolOptions.</I>
<P>
<DD>Gets the receive buffer size of the datagram socket.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>this method returns the receive buffer size
 of this datagramsocket. This method will return 
 zero :
 <br>
 1. If this method is invoked even before the open method
 is called.
 <br>
 2. If the under lying protocol used is not UDP, that is,
 if some other transport provider is used.
<DT><B>Throws:</B>
<DD><CODE>java.net.SocketException</CODE> - if there is an error in
 the underlying protocol, such as a UDP error.
<DD><CODE>java.lang.NoSuchMethodError</CODE> - if this method is 
 invoked while using JDK lesser than 1.2. The
 reason is the getReceiveBufferSize method has been
 added in java.net.DatagramSocket only in JDK1.2 and
 above.</DL>
</DD>
</DL>
<HR>

<A NAME="setReceiveBufferSize(int)"><!-- --></A><H3>
setReceiveBufferSize</H3>
<PRE>
public void <B>setReceiveBufferSize</B>(int&nbsp;bufferSize)
                          throws java.lang.IllegalArgumentException,
                                 java.net.SocketException</PRE>
<DL>
<DD><B>Deprecated.</B>&nbsp;<I>instead use the setReceiveBufferSize method
 available in UDPProtocolOptions.</I>
<P>
<DD>Sets the receive buffer size of the datagram socket.
 This method will simply return if this method is invoked
 before calling the open method and if some other transport
 provider is used for communication.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>bufferSize</CODE> - the buffer Size that is to be
 set on the datagramSocket.
<DT><B>Throws:</B>
<DD><CODE>java.lang.IllegalArgumentException</CODE> - if the <code>bufferSize</code> is
 0 or is negative.
<DD><CODE>java.net.SocketException</CODE> - if there is an error in
 the underlying protocol, such as a UDP error.
<DD><CODE>java.lang.NoSuchMethodError</CODE> - if this method is 
 invoked while using JDK lesser than 1.2. The
 reason is the setReceiveBufferSize method has been
 added in java.net.DatagramSocket only in JDK1.2 and
 above.</DL>
</DD>
</DL>
<HR>

<A NAME="setCallbackthread(boolean)"><!-- --></A><H3>
setCallbackthread</H3>
<PRE>
public void <B>setCallbackthread</B>(boolean&nbsp;useThread)</PRE>
<DL>
<DD>Sets this to true if the user wants the callback to be
 called from a seperate thread.  Recommended if you're doing any
 serious work in the callback, especially sending new requests. 
 The SnmpAPI provides two ways of processing received messages,
 using the callback method. When the callbackThread is set 
 true, the callback method is invoked from a separate thread 
 as the response arrives. If it is set false,
 then callback method is invoked from the same thread as the 
 receiver thread and subsequent responses can be received only, if
 the user returns from the callback method.
 You can set the
 value of callbackThread based on, whether you want callback's
 to be invoked from a separate thread or from the SnmpSession
 receiver thread itself.
 <p>
 The performance of the receiver thread in receiving responses or 
 traps is little bit poorer,If we invoke the callback from a
 separate thread. 
 In order to be called back when a response is received, 
 applications should implement the SnmpClient interface and
 register with the SnmpSession, using the addSnmpClient() method.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>useThread</CODE> - the flag that tells, whether to use the callback
 thread or not.<DT><B>See Also:</B><DD><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpClient.html"><CODE>SnmpClient</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getCommunity()"><!-- --></A><H3>
getCommunity</H3>
<PRE>
public java.lang.String <B>getCommunity</B>()</PRE>
<DL>
<DD>Gets community for outgoing SNMPv1 and SNMPv2c requests. 
 The community string in the 
 pdu overrides the community set in session. This means, only when 
 the community string in the pdu is null, the one in session is used.
 The default community value is "public".
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The community of the outgoing SNMPv1 or SNMPv2c messages.</DL>
</DD>
</DL>
<HR>

<A NAME="setCommunity(java.lang.String)"><!-- --></A><H3>
setCommunity</H3>
<PRE>
public void <B>setCommunity</B>(java.lang.String&nbsp;community)</PRE>
<DL>
<DD>Sets community for outgoing SNMPv1 and SNMPv2c requests. 
 The community string in the 
 pdu overrides the community set in session. This means, only when 
 the community string in the pdu is null, the one in session is used.
 The default community value is "public".
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getWriteCommunity()"><!-- --></A><H3>
getWriteCommunity</H3>
<PRE>
public java.lang.String <B>getWriteCommunity</B>()</PRE>
<DL>
<DD>Gets writeCommunity for outgoing requests. This is used
 in SET operations only. The writeCommunity string in the 
 pdu overrides the writeCommunity in session. This means, only when 
 the writeCommunity string in the pdu is null, the one in session 
 is used. If the writeCommunity is not specified, then value in 
 community field is used. The default writeCommunity value is null.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The writeCommunity value of outgoing SNMPv1 or SNMPv2c
 messages.</DL>
</DD>
</DL>
<HR>

<A NAME="setWriteCommunity(java.lang.String)"><!-- --></A><H3>
setWriteCommunity</H3>
<PRE>
public void <B>setWriteCommunity</B>(java.lang.String&nbsp;writeCommunity)</PRE>
<DL>
<DD>Sets writeCommunity for outgoing requests. This is used
 in SET operations only. The writeCommunity string in the 
 pdu overrides the writeCommunity in session. This means, only when 
 the writeCommunity string in the pdu is null, the one in session 
 is used. If the writeCommunity is not specified, then value in 
 community field is used. The default writeCommunity value is null.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>writeCommunity</CODE> - The writeCommunity for the outgoing SNMPv1
 or SNMPv2c messages.</DL>
</DD>
</DL>
<HR>

<A NAME="getRetries()"><!-- --></A><H3>
getRetries</H3>
<PRE>
public int <B>getRetries</B>()</PRE>
<DL>
<DD>Gets number of retries before timeout. The retries in the 
 pdu overrides the retries value in session. This means, only when 
 the retries in the pdu is 0, the session value is used. 
 The default value of retries is 0.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The retries value being used by the session.</DL>
</DD>
</DL>
<HR>

<A NAME="setRetries(int)"><!-- --></A><H3>
setRetries</H3>
<PRE>
public void <B>setRetries</B>(int&nbsp;retries)</PRE>
<DL>
<DD>Sets number of retries before timeout. The retries in the 
 pdu overrides the retries value in session. This means, only when 
 the retries in the pdu is 0, the session value is used. 
 The default value of retries is 0.
 The timeout value grows exponentially for each retries. Timeout value
 is doubled for each retry. For example, if the timeout is set to 5000 
 (meaning 5 seconds) and retries is set to 2,  the first 
 retransmission will happen after 5 seconds, the second after 
 15 seconds etc. This exponential way of timeout policy can be
 changed using the TimeoutPolicy class. This method will not
 set the value, if it is negative.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>retries</CODE> - The retries value to be used by the session.<DT><B>See Also:</B><DD><A HREF="../../../../com/adventnet/snmp/snmp2/TimeoutPolicy.html"><CODE>TimeoutPolicy</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setSASProtocol(int)"><!-- --></A><H3>
setSASProtocol</H3>
<PRE>
public void <B>setSASProtocol</B>(int&nbsp;prot)</PRE>
<DL>
<DD><B>Deprecated.</B>&nbsp;<I>use the following instead.
 <p>
 <i>
 SASProtocolOptions opt = new SASProtocolOptions();
 <br>
 opt.setApplet(applet);
 <br>
 opt.setProtocol(SASClient.TCP_PROTOCOL); //or SASClient.HTTP_PROTOCOL
 <br>
 snmpSession.setProtocolOptions(opt);
 <br>
 snmpSession.open();
 </i></I>
<P>
<DD>Method to set the protocol used by SASClient 
 The value for protocol can be either TCP_PROTOCOL (1) or
 HTTP_PROTOCOL (2). TCP_PROTOCOL will use Tcp/Ip connection and
 forward the snmp request to SAS and HTTP_PROTOCOL will use
 HTTP protocol and forward the request to the servlet loaded with the web server
 This has to be set before calling the open method. By default the value of 
 protocol is 1.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>prot</CODE> - the protocol that is to be used for SNMP communications.</DL>
</DD>
</DL>
<HR>

<A NAME="getSASProtocol()"><!-- --></A><H3>
getSASProtocol</H3>
<PRE>
public int <B>getSASProtocol</B>()</PRE>
<DL>
<DD><B>Deprecated.</B>&nbsp;<I>use the following instead.
 <p>
 <i>
 SASProtocolOptions opt = (SASProtocolOptions)snmpSession.getProtocolOptions();
 <br>
 int sasprotocol = opt.getProtocol();
 </i></I>
<P>
<DD>Method to get the protocol used by SASClient 
 The value for protocol can be either TCP_PROTOCOL or
 HTTP_PROTOCOL. Using TCP_PROTOCOL will use Tcp/Ip connection and
 forward the snmp request to SAS and using  HTTP_PROTOCOL will use
 HTTP protocol and forward the request to the servlet loaded with the web server
 This has to be set before calling the open method. By default the value of 
 protocol is 1.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the sasprotocol that is used.</DL>
</DD>
</DL>
<HR>

<A NAME="getTimeout()"><!-- --></A><H3>
getTimeout</H3>
<PRE>
public int <B>getTimeout</B>()</PRE>
<DL>
<DD>Gets the timeout value. The timeout is the time to wait for the 
 first response in milli-seconds, before attempting a retransmission.
 The default value of timeout is 5000 milliseconds.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The timeout value in milliseconds used for monitoring the
 SNMP requests.</DL>
</DD>
</DL>
<HR>

<A NAME="setTimeout(int)"><!-- --></A><H3>
setTimeout</H3>
<PRE>
public void <B>setTimeout</B>(int&nbsp;timeout)</PRE>
<DL>
<DD>Sets the timeout value. The timeout is the time to wait for the first 
 response in milli-seconds, before attempting a retransmission.The timeout
 in the pdu overrides the timeout value in session. This means, only when 
 the timeout in the pdu is 0, the session timeout value is used. 
 The default value of timeout is 5000 milliseconds.
 The timeout value to be set should be in milliseconds.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>timeout</CODE> - The timeout value to be used for monitoring the 
 SNMP requests.</DL>
</DD>
</DL>
<HR>

<A NAME="getSecLevelForTimeSync()"><!-- --></A><H3>
getSecLevelForTimeSync</H3>
<PRE>
public byte <B>getSecLevelForTimeSync</B>()</PRE>
<DL>
<DD>Returns the securitylevel that would be used when doing
 a V3 timeSync for a authPriv user. Can be Snmp3Message.AUTH_PRIV(3)
 or Snmp3Message.AUTH_NO_PRIV(1). Usually the time sync packet
 will be sent with AUTH_NO_PRIV security level, but this can be
 configured using this method.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The securityLevel.</DL>
</DD>
</DL>
<HR>

<A NAME="setSecLevelForTimeSync(byte)"><!-- --></A><H3>
setSecLevelForTimeSync</H3>
<PRE>
public void <B>setSecLevelForTimeSync</B>(byte&nbsp;secLevel)</PRE>
<DL>
<DD>Sets the securityLevel to use when doing
 a V3 timeSync for a authPriv user. Can be either
 Snmp3Message.AUTH_PRIV(3) or Snmp3Message.AUTH_NO_PRIV(1).
 Default is Snmp3Message.AUTH_NO_PRIV
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>secLevel</CODE> - The securityLevel</DL>
</DD>
</DL>
<HR>

<A NAME="getUserName()"><!-- --></A><H3>
getUserName</H3>
<PRE>
public byte[] <B>getUserName</B>()</PRE>
<DL>
<DD>Returns the principal for SNMPv3 messages. The user name in the
 pdu over rides the one in session. This means, only when the user
 name in the pdu is null, the one in session is used.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The principal for SNMPv3 messages.</DL>
</DD>
</DL>
<HR>

<A NAME="setUserName(byte[])"><!-- --></A><H3>
setUserName</H3>
<PRE>
public void <B>setUserName</B>(byte[]&nbsp;name)</PRE>
<DL>
<DD>Sets the principal for SNMPv3 messages. The user name in the
 pdu over rides the one in session. This means, only when the user
 name in the pdu is null, the one in session is used.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - The principal for SNMPv3 messages.</DL>
</DD>
</DL>
<HR>

<A NAME="setContextName(byte[])"><!-- --></A><H3>
setContextName</H3>
<PRE>
public void <B>setContextName</B>(byte[]&nbsp;name)</PRE>
<DL>
<DD>Sets the context name associated with the SNMPv3 message.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - the contextName associated with the SNMPv3 message.</DL>
</DD>
</DL>
<HR>

<A NAME="getContextName()"><!-- --></A><H3>
getContextName</H3>
<PRE>
public byte[] <B>getContextName</B>()</PRE>
<DL>
<DD>Gets the context name associated with the SNMPv3 message.
 The context name in the pdu over rides the one in session.
 This means, only when the context name in the pdu is null,
 the one in session is used.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The contextName associated with the SNMPv3 message.</DL>
</DD>
</DL>
<HR>

<A NAME="setTrapAuthEnable(boolean)"><!-- --></A><H3>
setTrapAuthEnable</H3>
<PRE>
public void <B>setTrapAuthEnable</B>(boolean&nbsp;isAuth)</PRE>
<DL>
<DD>Specify whether traps should be authenticated while receiving
 SNMPv3  trap messages. Default value is false.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>isAuth</CODE> - Set this to true if traps should be authenticated 
 while receiving SNMPv3  trap messages. False otherwise.</DL>
</DD>
</DL>
<HR>

<A NAME="isTrapAuthEnable()"><!-- --></A><H3>
isTrapAuthEnable</H3>
<PRE>
public boolean <B>isTrapAuthEnable</B>()</PRE>
<DL>
<DD>Gets status of Trap Authentication for v3 pdus. If the status is 
 true, then the traps should be authenticated while receiving SNMPv3
 trap messages. False otherwise.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The status value true or false if traps should be 
 authenticated while receiving SNMPv3  trap messages.</DL>
</DD>
</DL>
<HR>

<A NAME="getPacketBufferSize()"><!-- --></A><H3>
getPacketBufferSize</H3>
<PRE>
public int <B>getPacketBufferSize</B>()</PRE>
<DL>
<DD>Gets the Datagram Buffer Size used for receiving SNMP packets. 
 The default value is 64K.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the datagram packet buffer size in bytes.</DL>
</DD>
</DL>
<HR>

<A NAME="setPacketBufferSize(int)"><!-- --></A><H3>
setPacketBufferSize</H3>
<PRE>
public void <B>setPacketBufferSize</B>(int&nbsp;size)</PRE>
<DL>
<DD>Sets the Datagram Buffer Size used for receiving SNMP packets.
 Use this method only in case you would
 need to have a buffer size in excess of 8000 bytes
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>size</CODE> - The size of the datagram packet buffer to be used in bytes.
  An initial allocation of 64K is made by default.</DL>
</DD>
</DL>
<HR>

<A NAME="getPeername()"><!-- --></A><H3>
getPeername</H3>
<PRE>
public java.lang.String <B>getPeername</B>()</PRE>
<DL>
<DD><B>Deprecated.</B>&nbsp;<I>use the following instead.
 <i>
 <br>
 UDPProtocolOptions opt = (UDPProtocolOptions)snmpSession.getProtocolOptions();
 opt.getRemoteHost();
 </i></I>
<P>
<DD>Gets domain name or dotted IP address of peer entity. 
 The remoteHost attribute of SnmpPDU overrides the peername 
 in SnmpSession. This means, when remoteHost is null in SnmpPDU,
 messages are sent to the host, peername,  in session. When 
 remoteHost is not null in SnmpPDU, messages are sent to the 
 remoteHost. It is always good to set the host  in Snmp session 
 to which Snmp requests are frequently sent. Default peername is null.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The domain name or the dotted IP address of the peer.</DL>
</DD>
</DL>
<HR>

<A NAME="setPeername(java.lang.String)"><!-- --></A><H3>
setPeername</H3>
<PRE>
public void <B>setPeername</B>(java.lang.String&nbsp;peername)</PRE>
<DL>
<DD><B>Deprecated.</B>&nbsp;<I>use the following instead.
 <i>
 <br>
 UDPProtocolOptions opt = (UDPProtocolOptions)snmpSession.getProtocolOptions();
 opt.setRemoteHost(peername);
 </i></I>
<P>
<DD>Sets domain name or dotted IP address of default peer.
 The remoteHost attribute of SnmpPDU overrides the peername 
 in SnmpSession. This means, when remoteHost is null in SnmpPDU,
 messages are sent to the host, peername,  in session. When 
 remoteHost is not null in SnmpPDU, messages are sent to the 
 remoteHost. It is always good to set the peername in 
 SnmpSession to which SNMP requests are frequently sent. Default 
 peername is null.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>peername</CODE> - the peername to which the SNMP communications
 should take place.</DL>
</DD>
</DL>
<HR>

<A NAME="getRemotePort()"><!-- --></A><H3>
getRemotePort</H3>
<PRE>
public int <B>getRemotePort</B>()</PRE>
<DL>
<DD><B>Deprecated.</B>&nbsp;<I>use the following instead.
 <i>
 <p>
 UDPProtocolOptions opt = (UDPProtocolOptions)snmpSession.getProtocolOptions();
 <br>
 opt.getRemotePort();
 </i></I>
<P>
<DD>Gets the remote udp port on the peer that this session is used 
 to communicate with. The remotePort parameter in SnmpPDU overrides 
 the one in session. It is always good to set the remote Port in 
 session to which messages are often sent. When remotePort 
 in SnmpPDU is 0 (default), the message is sent to remotePort specified in 
 the session. The default value of remotePort in session is 0.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The remote port on the peer that this session is used to
 communicate.</DL>
</DD>
</DL>
<HR>

<A NAME="setRemotePort(int)"><!-- --></A><H3>
setRemotePort</H3>
<PRE>
public void <B>setRemotePort</B>(int&nbsp;port)</PRE>
<DL>
<DD><B>Deprecated.</B>&nbsp;<I>use the following instead.
 <i>
 <p>
 UDPProtocolOptions opt = (UDPProtocolOptions)snmpSession.getProtocolOptions();
 <br>
 opt.setRemotePort(port);
 </i></I>
<P>
<DD>Sets the remote udp port on the peer that this session is used 
 to communicate with. The remotePort parameter in SnmpPDU overrides 
 the one in session. It is a good idea to set remotePort in session
 to which messages are often sent. When remotePort 
 in SnmpPDU is 0, the message is sent to remotePort specified in 
 the session. The default value of remotePort in session is 0.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>port</CODE> - The remote port on the peer that this session is used to
 communicate.</DL>
</DD>
</DL>
<HR>

<A NAME="getReport()"><!-- --></A><H3>
getReport</H3>
<PRE>
public boolean <B>getReport</B>()</PRE>
<DL>
<DD>Returns the status of report flag. Reports are forwarded to appln.
 if set to true. Default is false.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the report flag that is set in this session object.</DL>
</DD>
</DL>
<HR>

<A NAME="setReport(boolean)"><!-- --></A><H3>
setReport</H3>
<PRE>
public void <B>setReport</B>(boolean&nbsp;status)</PRE>
<DL>
<DD>Sets the status of report flag. Reports are forwarded to appln.
 if this flag is set to true. Default is false.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>status</CODE> - the report status flag that is to be set in this 
 session.</DL>
</DD>
</DL>
<HR>

<A NAME="getLocalAddresses()"><!-- --></A><H3>
getLocalAddresses</H3>
<PRE>
public java.lang.String[] <B>getLocalAddresses</B>()</PRE>
<DL>
<DD><B>Deprecated.</B>&nbsp;<I>use the following instead.
 <br>
 <i>
 UDPProtocolOptions opt = (UDPProtocolOptions)snmpSession.getProtocolOptions();
 <br>
 String[] local_address = opt.getLocalAddresses();
 </i></I>
<P>
<DD>Gets local Addresses, hostnames or IP addresses, to bind session to.
 It is to be noted, that this method returns an array of Strings with
 the address values and the current behaviour is that the 
 local address of the last string in array is used to bind the session.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>A String array of the addresses.</DL>
</DD>
</DL>
<HR>

<A NAME="setLocalAddresses(java.lang.String[])"><!-- --></A><H3>
setLocalAddresses</H3>
<PRE>
public void <B>setLocalAddresses</B>(java.lang.String[]&nbsp;local_addrs)</PRE>
<DL>
<DD><B>Deprecated.</B>&nbsp;<I>use the following instead.
 <br>
 <i>
 UDPProtocolOptions opt = (UDPProtocolOptions)snmpSession.getProtocolOptions();
 opt.setLocalAddresses(local_addrs);
 </i></I>
<P>
<DD>Sets local Addresses, hostnames or IP addresses, to bind session to.
 If null, will use default address(es) assigned by DatagramSocket().
 It is to be noted that setLocalAddresses( ) takes a string array,
 as the argument and the current behaviour is that it binds the 
 session with the local address, which happens to be the last string 
 in array. If any of the string in this array is given as empty
 or null it is taken as localhost, since
 java.net.InetAddress.getByName("") or
 java.net.InetAddress.getByName(null)
 will return only localhost.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>local_addrs</CODE> - An array of Strings which contain the address
 to which the session is bound. Only the address in the last String
 is bound to the session.</DL>
</DD>
</DL>
<HR>

<A NAME="getLocalPort()"><!-- --></A><H3>
getLocalPort</H3>
<PRE>
public int <B>getLocalPort</B>()</PRE>
<DL>
<DD><B>Deprecated.</B>&nbsp;<I>use the following instead.
 <p>
 <i>
 UDPProtocolOptions opt = (UDPProtocolOptions)snmpSession.getProtocolOptions();
 <br>
 int local_port = opt.getLocalPort();
 </i></I>
<P>
<DD>Gets local UDP port number at which the datagram packets are sent
 and received. 
 0 is the default port number in which case it's system assigned.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The port number on which the datagram packets are sent 
 and received in this session.</DL>
</DD>
</DL>
<HR>

<A NAME="setLocalPort(int)"><!-- --></A><H3>
setLocalPort</H3>
<PRE>
public void <B>setLocalPort</B>(int&nbsp;local_port)</PRE>
<DL>
<DD><B>Deprecated.</B>&nbsp;<I>use the following instead.
 <p>
 <i>
 UDPProtocolOptions opt = (UDPProtocolOptions)snmpSession.getProtocolOptions();
 <br>
 opt.setLocalPort(local_port);
 </i></I>
<P>
<DD>Sets local UDP port number at which the datagram packets are sent
 and received. 0 is the default port number in which case it's 
 system assigned
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>local_port</CODE> - The  port number on which the datagram packets 
 are to be sent and received in this session.</DL>
</DD>
</DL>
<HR>

<A NAME="getStartLocalPort()"><!-- --></A><H3>
getStartLocalPort</H3>
<PRE>
public int <B>getStartLocalPort</B>()</PRE>
<DL>
<DD><B>Deprecated.</B>&nbsp;<I>now the "open(Applet)" method will throw an 
 SnmpException if it is unable to connect to the SAServer. When such
 an exception is received, the user should decide whether "open(void)"
 method should be called or not.</I>
<P>
<DD>Gets the port , 6000 is the default. This is used because of IE4.0
 bug with using port 0 in case of applets. If the local UDP port
 is 0 and in case of applets using IE4.0, the startLocalPort value
 is used instead of local UDP port.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The startLocalPort to be used in case of applets.</DL>
</DD>
</DL>
<HR>

<A NAME="setStartLocalPort(int)"><!-- --></A><H3>
setStartLocalPort</H3>
<PRE>
public void <B>setStartLocalPort</B>(int&nbsp;startLocalPort)</PRE>
<DL>
<DD><B>Deprecated.</B>&nbsp;<I>now the "open(Applet)" method will throw an 
 SnmpException if it is unable to connect to the SAServer. When such
 an exception is received, the user should decide whether "open(void)"
 method should be called or not.</I>
<P>
<DD>Sets this so that next available port after this will be used.
 This is used beacuse of IE4.0 bug with using port 0 in case of 
 applets. If the local UDP port is 0 and in case of applets using 
 IE4.0, the startLocalPort value is used instead of local UDP port.
 The default value is 6000. If the socket cannot be opened at this 
 port then the next available port is used instead.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>startLocalPort</CODE> - The port at which to send and receive
 datagram packets in case of applets using IE4.0.</DL>
</DD>
</DL>
<HR>

<A NAME="getSASClient()"><!-- --></A><H3>
getSASClient</H3>
<PRE>
public <A HREF="../../../../com/adventnet/snmp/snmp2/SASClient.html">SASClient</A> <B>getSASClient</B>()</PRE>
<DL>
<DD><B>Deprecated.</B>&nbsp;<I>use the following instead
 <br>
 <i>
 SASProtocolOptions opt = (SASProtocolOptions)snmpSession.getProtocolOptions();
 <br>
 SASClient sasclient = opt.getSASClient();
 </i></I>
<P>
<DD>To get around socket access restriction in applets, the SASClient
 allows for using a
 process on the Applet host as a pass through for Snmp PDUs.  If this
 variable "sasclient" is non-null, this passthrough mechanism will
 be used for this session instance.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The SASClient.</DL>
</DD>
</DL>
<HR>

<A NAME="getSnmpClients()"><!-- --></A><H3>
getSnmpClients</H3>
<PRE>
public java.util.Vector <B>getSnmpClients</B>()</PRE>
<DL>
<DD>Returns the clients that have been registered for callbacks or null 
  is returned if no one is registered.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The clients that have been registered for callbacks or null.</DL>
</DD>
</DL>
<HR>

<A NAME="getSnmpClientsSize()"><!-- --></A><H3>
getSnmpClientsSize</H3>
<PRE>
public int <B>getSnmpClientsSize</B>()</PRE>
<DL>
<DD><B>Deprecated.</B>&nbsp;<I>use the following instead
 <p>
 <i>
 int snmpClientsSize = (snmpSession.getSnmpClients()).size();
 </i></I>
<P>
<DD>Returns the number of clients that have registered for callbacks.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The count of the clients that have registered for callbacks.</DL>
</DD>
</DL>
<HR>

<A NAME="getSnmpClientsWithID()"><!-- --></A><H3>
getSnmpClientsWithID</H3>
<PRE>
public java.util.Hashtable <B>getSnmpClientsWithID</B>()</PRE>
<DL>
<DD>Returns the hashtable in which the clientID and the SnmpClient are 
  associated.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The Hashtable which contains the clientIDs as the keys and the
  SnmpClients as their elements. Each SnmpClient will have a unique 
  clientID. These clientIDs will be generated automatically, when the
  addSnmpClientWithID(SnmpClient) method is called with a SnmpClient 
  as the argument.</DL>
</DD>
</DL>
<HR>

<A NAME="addSnmpClient(com.adventnet.snmp.snmp2.SnmpClient)"><!-- --></A><H3>
addSnmpClient</H3>
<PRE>
public void <B>addSnmpClient</B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpClient.html">SnmpClient</A>&nbsp;client)</PRE>
<DL>
<DD>Subscribe for callbacks.  This adds your SnmpClient
 interface implementation to this session, which will invoke
 your class callbacks, authenticate and debug functions. 
 The SnmpClient interface is implemented by applications that wish
 to send and receive messages asynchronously. The callback( )
 method is automatically called in when a response arrives. This
 method will add the client to it's list of clients only if 
 the argument is not null.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>client</CODE> - the SnmpClient that is to be added to this SnmpSession
 instance.<DT><B>See Also:</B><DD><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpClient.html"><CODE>SnmpClient</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="addSnmpClientWithID(com.adventnet.snmp.snmp2.SnmpClient)"><!-- --></A><H3>
addSnmpClientWithID</H3>
<PRE>
public int <B>addSnmpClientWithID</B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpClient.html">SnmpClient</A>&nbsp;client)</PRE>
<DL>
<DD>Subscribes for callbacks.  This adds your SnmpClient
 interface implementation to this session, which will invoke
 your class callbacks, authenticate and debug functions. 
 The SnmpClient interface is implemented by applications that wish
 to send and receive messages asynchronously. The callback( )
 method is automatically called when a response arrives. This
 method will add the client to it's list of clients only if 
 the argument is not null.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>client</CODE> - the SnmpClient that is to be added to this
 SnmpSession.
<DT><B>Returns:</B><DD>id for client added .Set this id in PDU while sending 
 request for invoking callback of particular client. For the callback of
 the SnmpClient ( which is added by addSnmpClientWithID ) to be called,
 the corresponding clientID should be set in the PDU before making any
 SNMP request. If the clientID is not set in the PDU, then the callback 
 ( of the client that is added through addSnmpClientWithID ) will not 
 be called. This method will return zero, when a null is passed to it.<DT><B>See Also:</B><DD><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpClient.html"><CODE>SnmpClient</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="removeSnmpClient(com.adventnet.snmp.snmp2.SnmpClient)"><!-- --></A><H3>
removeSnmpClient</H3>
<PRE>
public void <B>removeSnmpClient</B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpClient.html">SnmpClient</A>&nbsp;client)</PRE>
<DL>
<DD>Unsubscribes for callbacks.   This removes your SnmpClient
 interface implementation from this session. 
 The SnmpClient interface is implemented by applications that wish
 to send and receive messages asynchronously, or applications that 
 wish to implemet its own authentication function. The SnmpClient
 interface provides a callback method that avoids polling done to 
 check for responses. The callback( ) method is automatically 
 called when a response arrives.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpClient.html"><CODE>SnmpClient</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="removeAllSnmpClients()"><!-- --></A><H3>
removeAllSnmpClients</H3>
<PRE>
public void <B>removeAllSnmpClients</B>()</PRE>
<DL>
<DD>This method removes all the SnmpClients that were registered in
 this SnmpSession.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="removeSnmpClientWithID(int)"><!-- --></A><H3>
removeSnmpClientWithID</H3>
<PRE>
public void <B>removeSnmpClientWithID</B>(int&nbsp;clientid)</PRE>
<DL>
<DD>Unsubscribe for callbacks.   This removes your SnmpClient
 interface implementation from this session. 
 The SnmpClient interface is implemented by applications that wish
 to send and receive messages asynchronously, or applications that 
 wish to implemet its own authentication function. The SnmpClient
 interface provides a callback method that avoids polling done to 
 check for responses. The callback( ) method is automatically 
 called when a response arrives.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setProtocol(int)"><!-- --></A><H3>
setProtocol</H3>
<PRE>
public void <B>setProtocol</B>(int&nbsp;protocol)</PRE>
<DL>
<DD><B>Deprecated.</B>&nbsp;<I>Since all the SNMP communications go through
 a single transport provider, this is not needed.</I>
<P>
<DD>Sets the protocol to be used by the session. Currently valid values 
  The default value is IP.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>protocol</CODE> - The value for identifying the IP 
 protocol. The constant value for IP is provided in this class.</DL>
</DD>
</DL>
<HR>

<A NAME="setAutoInformResponse(boolean)"><!-- --></A><H3>
setAutoInformResponse</H3>
<PRE>
public void <B>setAutoInformResponse</B>(boolean&nbsp;flag)</PRE>
<DL>
<DD>Sets the automatic response flag for the Inform Request. If this flag
 is set to true, then the SNMP stack automatically sends a Get Reponse
 message back to the sender. The default value is true.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>flag</CODE> - boolean value of the flag to be set.</DL>
</DD>
</DL>
<HR>

<A NAME="isSetAutoInformResponse()"><!-- --></A><H3>
isSetAutoInformResponse</H3>
<PRE>
public boolean <B>isSetAutoInformResponse</B>()</PRE>
<DL>
<DD>Checks if the automatic response flag for the Inform Request is set. The
 default value is true.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>boolean value of the Inform Request response flag.</DL>
</DD>
</DL>
<HR>

<A NAME="getSnmpAPI()"><!-- --></A><H3>
getSnmpAPI</H3>
<PRE>
public <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpAPI.html">SnmpAPI</A> <B>getSnmpAPI</B>()</PRE>
<DL>
<DD>Returns the SnmpAPI reference associated with this SnmpSession.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the SnmpAPI reference associated with this SnmpSession.</DL>
</DD>
</DL>
<HR>

<A NAME="run()"><!-- --></A><H3>
run</H3>
<PRE>
public void <B>run</B>()</PRE>
<DL>
<DD>The run method starts the receiver thread for this session object.
 Waits for incoming datagrams, and updates SnmpSession object with
 received Datagrams. The API user need not call this method explicitly.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>run</CODE> in interface <CODE>java.lang.Runnable</CODE><DT><B>Overrides:</B><DD><CODE>run</CODE> in class <CODE>java.lang.Thread</CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="open()"><!-- --></A><H3>
open</H3>
<PRE>
public void <B>open</B>()
          throws <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpException.html">SnmpException</A></PRE>
<DL>
<DD>Opens Snmp Session to communicate with an SNMP peer. Once the 
 SnmpSession is instantiated, it has to be opened with this method
 so that a datagram socket is opened for SNMP communications.
 This method also starts the receiver thread which waits for
 incoming datagrams. This method should be called only once for
 an instance of SnmpSession. If it is called for the next time
 then an SnmpException will be thrown.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpException.html">SnmpException</A></CODE> - is thrown for the following reasons:
 <br>
 (i) on socket error, that is, if trying to open the session in
 an already occupied port.
 <br>
 (ii) when this method is called for the second time<DT><B>See Also:</B><DD><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpException.html"><CODE>SnmpException</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setTransportProvider(java.lang.String)"><!-- --></A><H3>
setTransportProvider</H3>
<PRE>
public void <B>setTransportProvider</B>(java.lang.String&nbsp;providerClassName)</PRE>
<DL>
<DD>This method sets the transportProvider classname, which will
 be used for communication purposes.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>providerClassName</CODE> - The class name of the transport provider,
 through which the SNMP communication will take place.<DT><B>Since:</B><DD>AdventNet SNMP API 4.</DD>
</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="getTransportProvider()"><!-- --></A><H3>
getTransportProvider</H3>
<PRE>
public java.lang.String <B>getTransportProvider</B>()</PRE>
<DL>
<DD>This method gets the transportProvier classname.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the transportProvider class name.<DT><B>Since:</B><DD>AdventNet SNMP API 4.</DD>
</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="open(java.applet.Applet)"><!-- --></A><H3>
open</H3>
<PRE>
public void <B>open</B>(java.applet.Applet&nbsp;applet)
          throws <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpException.html">SnmpException</A></PRE>
<DL>
<DD><B>Deprecated.</B>&nbsp;<I>use the following instead
 <p>
 <i>
 SnmpAPI api = new SnmpAPI();
 <br>
 SnmpSession ses = new SnmpSession(api);
 <br>
 SASProtocolOptions opt = new SASProtocolOptions();
 <br>
 opt.setApplet(applet);
 <br>
 ses.setProtocolOptions(opt);
 <br>
 ses.open();
 </i></I>
<P>
<DD>Open Snmp Session  to communicate with an SNMP peer,
 using the applet host server as a pass through.
 If the connection to the applet server process is 
 successfully established, sasclient will be set to 
 the SASClient instance.If not it is set null.If, 
 unsuccessful it will try a local socket.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpException.html">SnmpException</A></CODE> - is thrown on socket error.<DT><B>See Also:</B><DD><A HREF="../../../../com/adventnet/snmp/snmp2/SASClient.html"><CODE>SASClient</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setTimeoutPolicy(com.adventnet.snmp.snmp2.TimeoutPolicy)"><!-- --></A><H3>
setTimeoutPolicy</H3>
<PRE>
public void <B>setTimeoutPolicy</B>(<A HREF="../../../../com/adventnet/snmp/snmp2/TimeoutPolicy.html">TimeoutPolicy</A>&nbsp;timeoutPolicy)</PRE>
<DL>
<DD>sets the TimeoutPolicy for this SnmpSession.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>timeoutPolicy</CODE> - this is the user's own
 implementation of TimeoutPolicy</DL>
</DD>
</DL>
<HR>

<A NAME="restoreDefaultTimeoutPolicy()"><!-- --></A><H3>
restoreDefaultTimeoutPolicy</H3>
<PRE>
public void <B>restoreDefaultTimeoutPolicy</B>()</PRE>
<DL>
<DD>restores this SnmpSession object to have the default
 TimeoutPolicy. The exponential TimeoutPolicy is the
 default timeout policy.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../../com/adventnet/snmp/snmp2/TimeoutPolicy.html"><CODE>TimeoutPolicy</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="close()"><!-- --></A><H3>
close</H3>
<PRE>
public void <B>close</B>()</PRE>
<DL>
<DD>Close Snmp Session and stop receiver thread. This method will
 simply return if it is called even before calling the open
 method or if it is called for the second time.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="send(com.adventnet.snmp.snmp2.SnmpPDU)"><!-- --></A><H3>
send</H3>
<PRE>
public int <B>send</B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html">SnmpPDU</A>&nbsp;pdu)
         throws <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpException.html">SnmpException</A></PRE>
<DL>
<DD>Send SnmpPDU on the given session after encoding the PDU.
 This is an asynchronous request, returns after transmission.
 Uses the "checkResponses()" or "checkTimeouts()" methods to
 look for responses or timeouts.
 Throws SnmpException on decode error, UnknownHost and send error.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>pdu</CODE> - The instance of SnmpPDU
<DT><B>Returns:</B><DD>Message ID for v3 request and the Request ID for v1/v2c request.
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpException.html">SnmpException</A></CODE> - is thrown on the following conditions:
 <br>
 (i) Socket send error.
 <br>
 (ii) If the command is not set on the pdu.
 <br>
 (iii) If the pdu argument is null.
 <br>
 (iv) If this method is called even before the open method is called.
 <br>
 (v) If some encode error occurs.</DL>
</DD>
</DL>
<HR>

<A NAME="syncSend(com.adventnet.snmp.snmp2.SnmpPDU)"><!-- --></A><H3>
syncSend</H3>
<PRE>
public <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html">SnmpPDU</A> <B>syncSend</B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html">SnmpPDU</A>&nbsp;pdu)
                 throws <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpException.html">SnmpException</A></PRE>
<DL>
<DD>Sends SnmpPDU synchronously - returns response SnmpPDU.  
 On failure throws SnmpException.
 This is a synchronous request, returns after receiving
 SNMP response, or timing out.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>pdu</CODE> - The SnmpPDU that is to be sent.
<DT><B>Returns:</B><DD>The response PDU. Null if the request timed out.
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpException.html">SnmpException</A></CODE> - is thrown on the following conditions:
 <br>
 (i) Socket send error.
 <br>
 (ii) If the command is not set on the pdu.
 <br>
 (iii) If the pdu argument is null.
 <br>
 (iv) If this method is called even before the open method is called.
 <br>
 (v) If some encode error occurs.</DL>
</DD>
</DL>
<HR>

<A NAME="get(java.lang.String)"><!-- --></A><H3>
get</H3>
<PRE>
public <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpVar.html">SnmpVar</A> <B>get</B>(java.lang.String&nbsp;oidString)
            throws <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpException.html">SnmpException</A></PRE>
<DL>
<DD><B>Deprecated.</B>&nbsp;<I>use the following instead
 <p>
 <i>
 SnmpPDU pdu = new SnmpPDU();
 <br>
 pdu.addNull(new SnmpOID(oidString));
 <br>
 pdu.setCommand(SnmpAPI.GET_REQ_MSG);
 <br>
 SnmpPDU response_pdu = snmpSession.syncSend(pdu);
 <br>
 <br>
 SnmpVar var = null;
 <br>
 if(response_pdu != null)
 <br>
 {
 <br>
 		var = response_pdu.getVariable(0);
 <br>
 }
 <br>
 </i></I>
<P>
<DD>SNMP get request method is for single String OID argument.
  Builds PDU and makes get request
  and waits for the response.  Returns null if timed out.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpException.html">SnmpException</A></CODE> - is thrown on error.</DL>
</DD>
</DL>
<HR>

<A NAME="get(com.adventnet.snmp.snmp2.SnmpOID)"><!-- --></A><H3>
get</H3>
<PRE>
public <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpVar.html">SnmpVar</A> <B>get</B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpOID.html">SnmpOID</A>&nbsp;oid)
            throws <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpException.html">SnmpException</A></PRE>
<DL>
<DD><B>Deprecated.</B>&nbsp;<I>use the following instead
 <p>
 <i>
 SnmpPDU pdu = new SnmpPDU();
 <br>
 pdu.addNull(oid);
 <br>
 pdu.setCommand(SnmpAPI.GET_REQ_MSG);
 <br>
 SnmpPDU response_pdu = snmpSession.syncSend(pdu);
 <br>
 <br>
 SnmpVar var = null;
 <br>
 if(response_pdu != null)
 <br>
 {
 <br>
 		var = response_pdu.getVariable(0);
 <br>
 }
 <br>
 </i></I>
<P>
<DD>SNMP get request method for single SnmpOID argument.
  Builds PDU and makes get request
  and waits for response.  Returns null if timeout.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpException.html">SnmpException</A></CODE> - is thrown on error.</DL>
</DD>
</DL>
<HR>

<A NAME="getnext(java.lang.String)"><!-- --></A><H3>
getnext</H3>
<PRE>
public <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpVar.html">SnmpVar</A> <B>getnext</B>(java.lang.String&nbsp;oidString)
                throws <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpException.html">SnmpException</A></PRE>
<DL>
<DD><B>Deprecated.</B>&nbsp;<I>use the following instead
 <p>
 <i>
 SnmpPDU pdu = new SnmpPDU();
 <br>
 pdu.addNull(new SnmpOID(oidString));
 <br>
 pdu.setCommand(SnmpAPI.GETNEXT_REQ_MSG);
 <br>
 SnmpPDU response_pdu = snmpSession.syncSend(pdu);
 <br>
 <br>
 SnmpVar var = null;
 <br>
 if(response_pdu != null)
 <br>
 {
 <br>
 		var = response_pdu.getVariable(0);
 <br>
 }
 <br>
 </i></I>
<P>
<DD>SNMP getnext request method is for single String OID argument.
  Builds PDU and makes getnext request
  and waits for the response.  Returns null if timed out.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpException.html">SnmpException</A></CODE> - is thrown on error.</DL>
</DD>
</DL>
<HR>

<A NAME="getnext(com.adventnet.snmp.snmp2.SnmpOID)"><!-- --></A><H3>
getnext</H3>
<PRE>
public <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpVar.html">SnmpVar</A> <B>getnext</B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpOID.html">SnmpOID</A>&nbsp;oid)
                throws <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpException.html">SnmpException</A></PRE>
<DL>
<DD><B>Deprecated.</B>&nbsp;<I>use the following instead
 <p>
 <i>
 SnmpPDU pdu = new SnmpPDU();
 <br>
 pdu.addNull(oid);
 <br>
 pdu.setCommand(SnmpAPI.GETNEXT_REQ_MSG);
 <br>
 SnmpPDU response_pdu = snmpSession.syncSend(pdu);
 <br>
 <br>
 SnmpVar var = null;
 <br>
 if(response_pdu != null)
 <br>
 {
 <br>
 		var = response_pdu.getVariable(0);
 <br>
 }
 <br>
 </i></I>
<P>
<DD>SNMP getnext request method for single SnmpOID argument.
  Builds PDU and makes getnext request
  and waits for response.  Returns null if timeout.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpException.html">SnmpException</A></CODE> - is thrown on error.</DL>
</DD>
</DL>
<HR>

<A NAME="set(java.lang.String, java.lang.String, byte)"><!-- --></A><H3>
set</H3>
<PRE>
public <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpVar.html">SnmpVar</A> <B>set</B>(java.lang.String&nbsp;oidString,
                   java.lang.String&nbsp;setString,
                   byte&nbsp;type)
            throws <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpException.html">SnmpException</A></PRE>
<DL>
<DD><B>Deprecated.</B>&nbsp;<I>use the following instead
 <p>
 <i>
 SnmpPDU pdu = new SnmpPDU();
 <br>
 SnmpVar variable = SnmpVar.createVariable(setString, type);
 <br>
 SnmpOID oid = new SnmpOID(oidString);
 <br>
 SnmpVarBind varbind = new SnmpVarBind(oid, variable);
 <br>
 pdu.addVariableBinding(varbind);
 <br>
 pdu.setCommand(SnmpAPI.SET_REQ_MSG);
 <br>
 SnmpPDU response_pdu = snmpSession.syncSend(pdu);
 <br>
 <br>
 SnmpVar var = null;
 <br>
 if(response_pdu != null)
 <br>
 {
 <br>
 		var = response_pdu.getVariable(0);
 <br>
 }
 <br>
 </i></I>
<P>
<DD>SNMP set request method for single String OID argument.
  Builds PDU and makes set request
  and waits for response.  Returns null if timed out.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>oidString</CODE> - The String oid.<DD><CODE>setString</CODE> - String value.<DD><CODE>type</CODE> - Type of the variable
<DT><B>Returns:</B><DD>The SnmpVar ,the variable.
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpException.html">SnmpException</A></CODE> - is thrown on error.</DL>
</DD>
</DL>
<HR>

<A NAME="set(com.adventnet.snmp.snmp2.SnmpOID, com.adventnet.snmp.snmp2.SnmpVar)"><!-- --></A><H3>
set</H3>
<PRE>
public <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpVar.html">SnmpVar</A> <B>set</B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpOID.html">SnmpOID</A>&nbsp;oid,
                   <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpVar.html">SnmpVar</A>&nbsp;var)
            throws <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpException.html">SnmpException</A></PRE>
<DL>
<DD><B>Deprecated.</B>&nbsp;<I>use the following instead
 <p>
 <i>
 SnmpPDU pdu = new SnmpPDU();
 <br>
 SnmpVarBind varbind = new SnmpVarBind(oid, var);
 <br>
 pdu.addVariableBinding(varbind);
 <br>
 pdu.setCommand(SnmpAPI.SET_REQ_MSG);
 <br>
 SnmpPDU response_pdu = snmpSession.syncSend(pdu);
 <br>
 <br>
 SnmpVar response_var = null;
 <br>
 if(response_pdu != null)
 <br>
 {
 <br>
 		response_var = response_pdu.getVariable(0);
 <br>
 }
 <br>
 </i></I>
<P>
<DD>SNMP set request method is for single SnmpOID argument.
 Builds PDU and makes set request
 and waits for the response.  Returns null if timeout.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>var</CODE> - The SnmpVar ,the variable.
<DT><B>Returns:</B><DD>The SnmpVar ,the variable.
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpException.html">SnmpException</A></CODE> - is thrown on error.</DL>
</DD>
</DL>
<HR>

<A NAME="partialSet(com.adventnet.snmp.snmp2.SnmpOID[], com.adventnet.snmp.snmp2.SnmpVar[])"><!-- --></A><H3>
partialSet</H3>
<PRE>
public java.util.Hashtable <B>partialSet</B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpOID.html">SnmpOID</A>[]&nbsp;oids,
                                      <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpVar.html">SnmpVar</A>[]&nbsp;vars)
                               throws <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpException.html">SnmpException</A></PRE>
<DL>
<DD>SNMP set request method is for multiple SnmpOID argument.
 Builds PDU and attempts to do a partial set in case of failure of the
 first request by sending multiple requests until success.
 Returns Hashtable of error status for oids which caused errors. The key in 
 the table indicates the oid number which caused the error and the value gives 
 the error status.
 Returns null in case of timeout. Empty Hashtable in case of no errors.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>oids</CODE> - The array of SnmpOID.<DD><CODE>vars</CODE> - The array of SnmpVar.
<DT><B>Returns:</B><DD>Error status Hashtable.
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpException.html">SnmpException</A></CODE> - is thrown on error.</DL>
</DD>
</DL>
<HR>

<A NAME="partialSet(com.adventnet.snmp.snmp2.SnmpPDU)"><!-- --></A><H3>
partialSet</H3>
<PRE>
public java.util.Hashtable <B>partialSet</B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html">SnmpPDU</A>&nbsp;pdu)
                               throws <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpException.html">SnmpException</A></PRE>
<DL>
<DD>SNMP set request method is for multiple SnmpOID argument.
 This builds PDU and attempts to do a partial set,
 in case of failure of the * first request by sending
 multiple requests until success. Returns Hashtable of
 error status for oids which caused errors. The key in 
 the table indicates the oid number which caused the
 error and the value gives * the error status. Returns null,
 in case of time-out. Empty Hashtable in case of no errors.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>pdu</CODE> - SnmpPDU.
<DT><B>Returns:</B><DD>Error status Hashtable.
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpException.html">SnmpException</A></CODE> - is thrown on error.</DL>
</DD>
</DL>
<HR>

<A NAME="receive(int)"><!-- --></A><H3>
receive</H3>
<PRE>
public <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html">SnmpPDU</A> <B>receive</B>(int&nbsp;reqid)</PRE>
<DL>
<DD>Fetches SNMP response PDU, fetches first PDU in response queue,
 if reqid is 0.  Takes PDU off the response queue.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>reqid</CODE> - The request id.
<DT><B>Returns:</B><DD>The pdu.</DL>
</DD>
</DL>
<HR>

<A NAME="checkTimeout(int)"><!-- --></A><H3>
checkTimeout</H3>
<PRE>
public boolean <B>checkTimeout</B>(int&nbsp;reqid)</PRE>
<DL>
<DD>Returns true if the reqid is in the list of this session's timed out requests,
 and removes it from the list.  Returns false if not in list.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>reqid</CODE> - The request id for which the timeout status is to be known.
<DT><B>Returns:</B><DD>true if timed out else false.</DL>
</DD>
</DL>
<HR>

<A NAME="checkResponses()"><!-- --></A><H3>
checkResponses</H3>
<PRE>
public int[] <B>checkResponses</B>()</PRE>
<DL>
<DD>Checks for any outstanding responses that are still in
 the receive queue.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The list of requests, i.e. request ids.</DL>
</DD>
</DL>
<HR>

<A NAME="setSocketParms(int, int)"><!-- --></A><H3>
setSocketParms</H3>
<PRE>
public void <B>setSocketParms</B>(int&nbsp;socketTimeout,
                           int&nbsp;socketDelay)</PRE>
<DL>
<DD><B>Deprecated.</B>&nbsp;<I>since a new transportProvider implementation for
 udp has been added, this method no longer becomes necessary.</I>
<P>
<DD>Params to set socket timeout and delay. The first param sets the 
 socketTimeout. The second is the delay the receiver sleeps through 
 before entering the blocking receive again. Defaults are 250 and 0 
 respectively
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>socketTimeout</CODE> - The timeout for the socket in ms<DD><CODE>socketDelay</CODE> - The delay in ms</DL>
</DD>
</DL>
<HR>

<A NAME="setProtocolOptions(com.adventnet.snmp.snmp2.ProtocolOptions)"><!-- --></A><H3>
setProtocolOptions</H3>
<PRE>
public void <B>setProtocolOptions</B>(<A HREF="../../../../com/adventnet/snmp/snmp2/ProtocolOptions.html">ProtocolOptions</A>&nbsp;tParam)</PRE>
<DL>
<DD>This associates the ProtocolOptions with this SnmpSession.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>tParam</CODE> - ProtocolOptions to be set.</DL>
</DD>
</DL>
<HR>

<A NAME="getProtocolOptions()"><!-- --></A><H3>
getProtocolOptions</H3>
<PRE>
public <A HREF="../../../../com/adventnet/snmp/snmp2/ProtocolOptions.html">ProtocolOptions</A> <B>getProtocolOptions</B>()</PRE>
<DL>
<DD>This method will return the ProtocolOptions associated with this
 SnmpSession.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The ProtocolOptions corresponding to this SnmpSession.</DL>
</DD>
</DL>
<HR>

<A NAME="getProtocol()"><!-- --></A><H3>
getProtocol</H3>
<PRE>
public int <B>getProtocol</B>()</PRE>
<DL>
<DD><B>Deprecated.</B>&nbsp;<I>since all SNMP communications go through only
 a transportProvider, this method is not at all necessary.</I>
<P>
<DD>This returns the protocol associated with this session object
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The protocol corresponding to this session object</DL>
</DD>
</DL>
<HR>

<A NAME="setConnectionListener(com.adventnet.snmp.snmp2.ConnectionListener)"><!-- --></A><H3>
setConnectionListener</H3>
<PRE>
public void <B>setConnectionListener</B>(<A HREF="../../../../com/adventnet/snmp/snmp2/ConnectionListener.html">ConnectionListener</A>&nbsp;connListener)</PRE>
<DL>
<DD>Subscribes for ConnectionListener. This adds your
 ConnectionListener interface implementation to this session,
 which will invoke your checkConnectionStatus(), processConnectionDown(),
 processConnectionUp() functions.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>connListener</CODE> - - ConnectionListener instance.<DT><B>See Also:</B><DD><A HREF="../../../../com/adventnet/snmp/snmp2/ConnectionListener.html"><CODE>ConnectionListener</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="removeConnectionListener()"><!-- --></A><H3>
removeConnectionListener</H3>
<PRE>
public void <B>removeConnectionListener</B>()</PRE>
<DL>
<DD>Unsubscribes for ConnectionListener. This removes your ConnectionListener
 interface implementation from this session.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getConnectionListener()"><!-- --></A><H3>
getConnectionListener</H3>
<PRE>
public <A HREF="../../../../com/adventnet/snmp/snmp2/ConnectionListener.html">ConnectionListener</A> <B>getConnectionListener</B>()</PRE>
<DL>
<DD>To get reference to the ConnectionListener object.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>ConnectionListener object.<DT><B>See Also:</B><DD><A HREF="../../../../com/adventnet/snmp/snmp2/ConnectionListener.html"><CODE>ConnectionListener</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="isSessionEstablished()"><!-- --></A><H3>
isSessionEstablished</H3>
<PRE>
public boolean <B>isSessionEstablished</B>()</PRE>
<DL>
<DD>To get the status of the connection established using 
 this session instance.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>true if the connection is alive else false.</DL>
</DD>
</DL>
<HR>

<A NAME="sendNotification(com.adventnet.snmp.snmp2.SnmpPDU)"><!-- --></A><H3>
sendNotification</H3>
<PRE>
public java.util.Vector <B>sendNotification</B>(<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html">SnmpPDU</A>&nbsp;pdu)
                                  throws <A HREF="../../../../com/adventnet/snmp/snmp2/SnmpException.html">SnmpException</A></PRE>
<DL>
<DD>Authenticates and sends the notification to all the entries that can avail
 of the notification filtering facility.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>pdu</CODE> - The SnmpPDU instance that contains the SnmpOID to be used for 
 notification filtering.
<DT><B>Returns:</B><DD>Vector which contains a list of trap/inform request PDU's 
 that were sent, if the notifyType is TRAP/INFORM.
<DD><CODE><A HREF="../../../../com/adventnet/snmp/snmp2/SnmpException.html">SnmpException</A></CODE></DL>
</DD>
</DL>
<HR>

<A NAME="setTimeToWait(int)"><!-- --></A><H3>
setTimeToWait</H3>
<PRE>
public void <B>setTimeToWait</B>(int&nbsp;waitTime)</PRE>
<DL>
<DD>Sets the inter-packet delay time. This method can be used
 to set the time delay which is required between consecutive
 SNMP requests due to low bandwidth in a network.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>waitTime</CODE> - The inter-packet delay time.
 Warning : This method should be used only when the underlying
 protocol is UDP.The timeout value to be set for the request 
 should be taken care by the user.</DL>
</DD>
</DL>
<HR>

<A NAME="getTimeToWait()"><!-- --></A><H3>
getTimeToWait</H3>
<PRE>
public int <B>getTimeToWait</B>()</PRE>
<DL>
<DD>Gets the inter-packet delay time set on this SnmpSession object.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The inter-packet delay time.</DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>

<!-- ========== START OF NAVBAR ========== -->
<A NAME="navbar_bottom"><!-- --></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0">
<TR>
<TD COLSPAN=3 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpPDU.html"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../../com/adventnet/snmp/snmp2/SnmpString.html"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../index.html" TARGET="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="SnmpSession.html" TARGET="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;
<SCRIPT>
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
<A HREF="../../../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>
</NOSCRIPT>
</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<!-- =========== END OF NAVBAR =========== -->

<HR>
Copyright (c)AdventNet Inc., 1996-2006
</BODY>
</HTML>
